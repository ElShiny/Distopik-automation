
unirel-sw-mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800100  00800100  000007fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019aa  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb4  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4c  00000000  00000000  00003012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ace  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000051a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	45 c2       	rjmp	.+1162   	; 0x492 <__vector_3>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	3d c0       	rjmp	.+122    	; 0x94 <__vector_12>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	af 36       	cpi	r26, 0x6F	; 111
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	e9 d0       	rcall	.+466    	; 0x218 <main>
  46:	9f c3       	rjmp	.+1854   	; 0x786 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <timersInit>:



void timersInit(hskp_t *hskp){
	
	TCCR0A = 1<<CTC0|1<<CS02; //timer enable
  4a:	2c e0       	ldi	r18, 0x0C	; 12
  4c:	25 bd       	out	0x25, r18	; 37
	OCR0A = 30;			//31 is 1 ms delay
  4e:	2e e1       	ldi	r18, 0x1E	; 30
  50:	27 bd       	out	0x27, r18	; 39
	TIMSK0 = 1<<OCIE0A; //timer interrupt
  52:	22 e0       	ldi	r18, 0x02	; 2
  54:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
	TCNT0 = 0;			//empty timer counter
  58:	16 bc       	out	0x26, r1	; 38
	hskp->en = 1;
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	fc 01       	movw	r30, r24
  5e:	24 83       	std	Z+4, r18	; 0x04
  60:	08 95       	ret

00000062 <enableTimer>:
}


void enableTimer(void){
	TIMSK0 |= 1<<OCIE0A;
  62:	ee e6       	ldi	r30, 0x6E	; 110
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	82 60       	ori	r24, 0x02	; 2
  6a:	80 83       	st	Z, r24
  6c:	08 95       	ret

0000006e <disableTimer>:
}

void disableTimer(void){
	TIMSK0 &= ~(1<<OCIE0A);
  6e:	ee e6       	ldi	r30, 0x6E	; 110
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	80 83       	st	Z, r24
  78:	08 95       	ret

0000007a <enableHSKP>:
}

void enableHSKP(hskp_t *hskp){
	hskp->en = 1;
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	fc 01       	movw	r30, r24
  7e:	24 83       	std	Z+4, r18	; 0x04
  80:	08 95       	ret

00000082 <disableHSKP>:
}

void disableHSKP(hskp_t *hskp){
	hskp->en = 0;
  82:	fc 01       	movw	r30, r24
  84:	14 82       	std	Z+4, r1	; 0x04
  86:	08 95       	ret

00000088 <getTick>:
}

uint16_t getTick(hskp_t *hskp){
	return hskp->tick;
  88:	fc 01       	movw	r30, r24
  8a:	80 81       	ld	r24, Z
  8c:	91 81       	ldd	r25, Z+1	; 0x01
  8e:	a2 81       	ldd	r26, Z+2	; 0x02
  90:	b3 81       	ldd	r27, Z+3	; 0x03
}
  92:	08 95       	ret

00000094 <__vector_12>:


ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
  94:	78 94       	sei
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
		
	disableTimer();
  b8:	da df       	rcall	.-76     	; 0x6e <disableTimer>
	
	housekp.cnt++;
  ba:	e2 e0       	ldi	r30, 0x02	; 2
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	85 81       	ldd	r24, Z+5	; 0x05
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	85 83       	std	Z+5, r24	; 0x05
	housekp.tick++;
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	a2 81       	ldd	r26, Z+2	; 0x02
  ca:	b3 81       	ldd	r27, Z+3	; 0x03
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	a1 1d       	adc	r26, r1
  d0:	b1 1d       	adc	r27, r1
  d2:	80 83       	st	Z, r24
  d4:	91 83       	std	Z+1, r25	; 0x01
  d6:	a2 83       	std	Z+2, r26	; 0x02
  d8:	b3 83       	std	Z+3, r27	; 0x03
	
	enableTimer();
  da:	c3 df       	rcall	.-122    	; 0x62 <enableTimer>
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	5f 91       	pop	r21
  ee:	4f 91       	pop	r20
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <I2CInit>:
	TWCR = 1<<TWINT | 1<<TWEN | ack<<TWEA;
	while (!(TWCR & 1<<TWINT));
	if ((TWSR & 0xF8) != (1<<TWS6|1<<TWS4) &&
	(TWSR & 0xF8) != (1<<TWS6|1<<TWS4|1<<TWS3)) return 1;
	return TWDR;
}
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
 104:	e9 eb       	ldi	r30, 0xB9	; 185
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <I2CStart>:
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	94 6a       	ori	r25, 0xA4	; 164
 116:	90 83       	st	Z, r25
 118:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 11c:	99 23       	and	r25, r25
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2CStart+0xa>
 120:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 124:	98 7f       	andi	r25, 0xF8	; 248
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	29 f0       	breq	.+10     	; 0x134 <I2CStart+0x26>
 12a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 12e:	98 7f       	andi	r25, 0xF8	; 248
 130:	90 31       	cpi	r25, 0x10	; 16
 132:	c9 f4       	brne	.+50     	; 0x166 <I2CStart+0x58>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	86 2b       	or	r24, r22
 13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 146:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 14a:	88 23       	and	r24, r24
 14c:	e4 f7       	brge	.-8      	; 0x146 <I2CStart+0x38>
 14e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 152:	88 7f       	andi	r24, 0xF8	; 248
 154:	88 31       	cpi	r24, 0x18	; 24
 156:	49 f0       	breq	.+18     	; 0x16a <I2CStart+0x5c>
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	80 34       	cpi	r24, 0x40	; 64
 160:	31 f4       	brne	.+12     	; 0x16e <I2CStart+0x60>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret

00000172 <I2CStop>:
 172:	84 e9       	ldi	r24, 0x94	; 148
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 178:	08 95       	ret

0000017a <I2CWrite>:
 17a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 184:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 188:	88 23       	and	r24, r24
 18a:	e4 f7       	brge	.-8      	; 0x184 <I2CWrite+0xa>
 18c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 190:	88 7f       	andi	r24, 0xF8	; 248
 192:	88 32       	cpi	r24, 0x28	; 40
 194:	11 f0       	breq	.+4      	; 0x19a <I2CWrite+0x20>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret

0000019e <MCP_init>:

void MCP_init(void){
	
	I2CStart(0b0100000, I2C_WRITE);//set gpioa to output
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	b5 df       	rcall	.-150    	; 0x10e <I2CStart>
	I2CWrite(0x00);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	e9 df       	rcall	.-46     	; 0x17a <I2CWrite>
	I2CWrite(0x00);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	e7 df       	rcall	.-50     	; 0x17a <I2CWrite>
	I2CWrite(0x00);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	e5 df       	rcall	.-54     	; 0x17a <I2CWrite>
	I2CStop();
 1b0:	e0 df       	rcall	.-64     	; 0x172 <I2CStop>
 1b2:	08 95       	ret

000001b4 <mirror_byte>:
}

uint8_t mirror_byte(uint8_t byte){
 1b4:	98 2f       	mov	r25, r24
	    int i;
		uint8_t reverse_byte = 0;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
		
	    for (i = 0; i < 8; i++) {
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	18 c0       	rjmp	.+48     	; 0x1ee <mirror_byte+0x3a>
		    if ((byte & (1 << i)))
 1be:	49 2f       	mov	r20, r25
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <mirror_byte+0x16>
 1c6:	55 95       	asr	r21
 1c8:	47 95       	ror	r20
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <mirror_byte+0x12>
 1ce:	40 ff       	sbrs	r20, 0
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <mirror_byte+0x36>
		    reverse_byte |= 1 << (7 - i);
 1d2:	67 e0       	ldi	r22, 0x07	; 7
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	62 1b       	sub	r22, r18
 1d8:	73 0b       	sbc	r23, r19
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <mirror_byte+0x30>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <mirror_byte+0x2c>
 1e8:	84 2b       	or	r24, r20

uint8_t mirror_byte(uint8_t byte){
	    int i;
		uint8_t reverse_byte = 0;
		
	    for (i = 0; i < 8; i++) {
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	28 30       	cpi	r18, 0x08	; 8
 1f0:	31 05       	cpc	r19, r1
 1f2:	2c f3       	brlt	.-54     	; 0x1be <mirror_byte+0xa>
		    if ((byte & (1 << i)))
		    reverse_byte |= 1 << (7 - i);
	    }
		return reverse_byte;
}
 1f4:	08 95       	ret

000001f6 <set_ladder>:

void set_ladder(uint8_t val, uint8_t laddder){
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c8 2f       	mov	r28, r24
 1fc:	d6 2f       	mov	r29, r22
	
		I2CStart(0b0100000, I2C_WRITE);//set gpioa to output
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	85 df       	rcall	.-246    	; 0x10e <I2CStart>
		I2CWrite(0x12 + laddder);
 204:	82 e1       	ldi	r24, 0x12	; 18
 206:	8d 0f       	add	r24, r29
 208:	b8 df       	rcall	.-144    	; 0x17a <I2CWrite>
		I2CWrite(mirror_byte(val));
 20a:	8c 2f       	mov	r24, r28
 20c:	d3 df       	rcall	.-90     	; 0x1b4 <mirror_byte>
 20e:	b5 df       	rcall	.-150    	; 0x17a <I2CWrite>
		I2CStop();	
 210:	b0 df       	rcall	.-160    	; 0x172 <I2CStop>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <main>:



int main(void)
{
	MCUSR = 0;//disable watchdog
 218:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	a8 95       	wdr
 220:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 224:	88 61       	ori	r24, 0x18	; 24
 226:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 22a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 22e:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	
	timersInit(&housekp);
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0a df       	rcall	.-492    	; 0x4a <timersInit>
	I2CInit();
 236:	63 df       	rcall	.-314    	; 0xfe <I2CInit>
	SPIInit();
 238:	e5 d0       	rcall	.+458    	; 0x404 <SPIInit>
	bufferInit(&buf);
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	fb d0       	rcall	.+502    	; 0x436 <bufferInit>
	
	sei();
 240:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	80 e7       	ldi	r24, 0x70	; 112
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x30>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x3a>
 252:	00 00       	nop
	
					
	_delay_ms(100);
	//DDRB |= 1<<DDB6;
	//PORTB |= 1<<PORTB6;
		MCP_init();
 254:	a4 df       	rcall	.-184    	; 0x19e <MCP_init>
		
		
	while (1){
		
		if(parseSPI(&spi_s, &buf, &housekp) == -1)errorHandler();
 256:	42 e0       	ldi	r20, 0x02	; 2
 258:	51 e0       	ldi	r21, 0x01	; 1
 25a:	68 e0       	ldi	r22, 0x08	; 8
 25c:	71 e0       	ldi	r23, 0x01	; 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	04 d0       	rcall	.+8      	; 0x26c <parseSPI>
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	b9 f7       	brne	.-18     	; 0x256 <main+0x3e>
 268:	cb d0       	rcall	.+406    	; 0x400 <errorHandler>
 26a:	f5 cf       	rjmp	.-22     	; 0x256 <main+0x3e>

0000026c <parseSPI>:





int parseSPI(spi_t *spi, buffer_t *buffer, hskp_t  *hskp){
 26c:	af 92       	push	r10
 26e:	bf 92       	push	r11
 270:	cf 92       	push	r12
 272:	df 92       	push	r13
 274:	ef 92       	push	r14
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	9c 01       	movw	r18, r24
	
	if(buffer->buffer_length == 0)return 0;
 280:	fb 01       	movw	r30, r22
 282:	ec 59       	subi	r30, 0x9C	; 156
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	90 81       	ld	r25, Z
 288:	99 23       	and	r25, r25
 28a:	09 f4       	brne	.+2      	; 0x28e <parseSPI+0x22>
 28c:	9e c0       	rjmp	.+316    	; 0x3ca <__stack+0xcb>
 28e:	6a 01       	movw	r12, r20
 290:	eb 01       	movw	r28, r22
 292:	59 01       	movw	r10, r18
	if(readBuffer(buffer) != RECIEVE_KEYWORD)return 0;
 294:	cb 01       	movw	r24, r22
 296:	2a d1       	rcall	.+596    	; 0x4ec <readBuffer>
 298:	8f 3c       	cpi	r24, 0xCF	; 207
 29a:	91 05       	cpc	r25, r1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <parseSPI+0x34>
 29e:	98 c0       	rjmp	.+304    	; 0x3d0 <__stack+0xd1>

	//PORTB ^= 1<<PORTB6;
	//disableHSKP();
	int start_tick = getTick(hskp);
 2a0:	c6 01       	movw	r24, r12
 2a2:	f2 de       	rcall	.-540    	; 0x88 <getTick>
 2a4:	8c 01       	movw	r16, r24
	
	parsing_state = PARSING_INSTR;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <parsing_state>
	while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <parseSPI+0x54>
 2ae:	c6 01       	movw	r24, r12
 2b0:	eb de       	rcall	.-554    	; 0x88 <getTick>
 2b2:	98 01       	movw	r18, r16
 2b4:	28 57       	subi	r18, 0x78	; 120
 2b6:	3c 4e       	sbci	r19, 0xEC	; 236
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	08 f4       	brcc	.+2      	; 0x2c0 <parseSPI+0x54>
 2be:	8b c0       	rjmp	.+278    	; 0x3d6 <__stack+0xd7>
 2c0:	ce 01       	movw	r24, r28
 2c2:	37 d1       	rcall	.+622    	; 0x532 <readBufferLength>
 2c4:	89 2b       	or	r24, r25
 2c6:	99 f3       	breq	.-26     	; 0x2ae <parseSPI+0x42>
	int cmd = readBuffer(buffer);
 2c8:	ce 01       	movw	r24, r28
 2ca:	10 d1       	rcall	.+544    	; 0x4ec <readBuffer>

	switch(cmd){
 2cc:	8b 31       	cpi	r24, 0x1B	; 27
 2ce:	91 05       	cpc	r25, r1
 2d0:	7c f4       	brge	.+30     	; 0x2f0 <parseSPI+0x84>
 2d2:	84 31       	cpi	r24, 0x14	; 20
 2d4:	91 05       	cpc	r25, r1
 2d6:	0c f0       	brlt	.+2      	; 0x2da <parseSPI+0x6e>
 2d8:	81 c0       	rjmp	.+258    	; 0x3dc <__stack+0xdd>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	91 05       	cpc	r25, r1
 2de:	19 f1       	breq	.+70     	; 0x326 <__stack+0x27>
 2e0:	24 f4       	brge	.+8      	; 0x2ea <parseSPI+0x7e>
 2e2:	99 23       	and	r25, r25
 2e4:	0c f0       	brlt	.+2      	; 0x2e8 <parseSPI+0x7c>
 2e6:	7a c0       	rjmp	.+244    	; 0x3dc <__stack+0xdd>
 2e8:	6b c0       	rjmp	.+214    	; 0x3c0 <__stack+0xc1>
 2ea:	03 97       	sbiw	r24, 0x03	; 3
 2ec:	89 f1       	breq	.+98     	; 0x350 <__stack+0x51>
 2ee:	68 c0       	rjmp	.+208    	; 0x3c0 <__stack+0xc1>
 2f0:	8d 3f       	cpi	r24, 0xFD	; 253
 2f2:	91 05       	cpc	r25, r1
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <parseSPI+0x8c>
 2f6:	43 c0       	rjmp	.+134    	; 0x37e <__stack+0x7f>
 2f8:	24 f4       	brge	.+8      	; 0x302 <__stack+0x3>
 2fa:	8c 3f       	cpi	r24, 0xFC	; 252
 2fc:	91 05       	cpc	r25, r1
 2fe:	a1 f1       	breq	.+104    	; 0x368 <__stack+0x69>
 300:	5f c0       	rjmp	.+190    	; 0x3c0 <__stack+0xc1>
 302:	8e 3f       	cpi	r24, 0xFE	; 254
 304:	91 05       	cpc	r25, r1
 306:	09 f4       	brne	.+2      	; 0x30a <__stack+0xb>
 308:	45 c0       	rjmp	.+138    	; 0x394 <__stack+0x95>
 30a:	8f 3f       	cpi	r24, 0xFF	; 255
 30c:	91 05       	cpc	r25, r1
 30e:	09 f4       	brne	.+2      	; 0x312 <__stack+0x13>
 310:	4e c0       	rjmp	.+156    	; 0x3ae <__stack+0xaf>
 312:	56 c0       	rjmp	.+172    	; 0x3c0 <__stack+0xc1>
		case 1: //write ace value
		
			break;
		
		case 2: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 314:	c6 01       	movw	r24, r12
 316:	b8 de       	rcall	.-656    	; 0x88 <getTick>
 318:	98 01       	movw	r18, r16
 31a:	28 57       	subi	r18, 0x78	; 120
 31c:	3c 4e       	sbci	r19, 0xEC	; 236
 31e:	28 17       	cp	r18, r24
 320:	39 07       	cpc	r19, r25
 322:	08 f4       	brcc	.+2      	; 0x326 <__stack+0x27>
 324:	5e c0       	rjmp	.+188    	; 0x3e2 <__stack+0xe3>
 326:	ce 01       	movw	r24, r28
 328:	04 d1       	rcall	.+520    	; 0x532 <readBufferLength>
 32a:	89 2b       	or	r24, r25
 32c:	99 f3       	breq	.-26     	; 0x314 <__stack+0x15>
			set_ladder(readBuffer(buffer), 0);
 32e:	ce 01       	movw	r24, r28
 330:	dd d0       	rcall	.+442    	; 0x4ec <readBuffer>
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	5f df       	rcall	.-322    	; 0x1f6 <set_ladder>
		default: bufferInit(buffer);
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		
		case 2: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
			set_ladder(readBuffer(buffer), 0);
			break;
 33c:	57 c0       	rjmp	.+174    	; 0x3ec <__stack+0xed>
		
		case 3: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 33e:	c6 01       	movw	r24, r12
 340:	a3 de       	rcall	.-698    	; 0x88 <getTick>
 342:	98 01       	movw	r18, r16
 344:	28 57       	subi	r18, 0x78	; 120
 346:	3c 4e       	sbci	r19, 0xEC	; 236
 348:	28 17       	cp	r18, r24
 34a:	39 07       	cpc	r19, r25
 34c:	08 f4       	brcc	.+2      	; 0x350 <__stack+0x51>
 34e:	4c c0       	rjmp	.+152    	; 0x3e8 <__stack+0xe9>
 350:	ce 01       	movw	r24, r28
 352:	ef d0       	rcall	.+478    	; 0x532 <readBufferLength>
 354:	89 2b       	or	r24, r25
 356:	99 f3       	breq	.-26     	; 0x33e <__stack+0x3f>
			set_ladder(readBuffer(buffer), 1);
 358:	ce 01       	movw	r24, r28
 35a:	c8 d0       	rcall	.+400    	; 0x4ec <readBuffer>
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	4a df       	rcall	.-364    	; 0x1f6 <set_ladder>
		default: bufferInit(buffer);
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
			break;
		
		case 3: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
			set_ladder(readBuffer(buffer), 1);
			break;
 366:	42 c0       	rjmp	.+132    	; 0x3ec <__stack+0xed>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 368:	98 e0       	ldi	r25, 0x08	; 8
 36a:	88 e1       	ldi	r24, 0x18	; 24
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	a8 95       	wdr
 372:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 376:	0f be       	out	0x3f, r0	; 63
 378:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stack+0x7d>
			
		case 252://report current buffer
			soft_reset();
			break;
		case 253://report current buffer
			writeSpi(spi, hskp, 253, readBufferLength(buffer), 100);
 37e:	ce 01       	movw	r24, r28
 380:	d8 d0       	rcall	.+432    	; 0x532 <readBufferLength>
 382:	04 e6       	ldi	r16, 0x64	; 100
 384:	28 2f       	mov	r18, r24
 386:	4d ef       	ldi	r20, 0xFD	; 253
 388:	b6 01       	movw	r22, r12
 38a:	c5 01       	movw	r24, r10
 38c:	d8 d0       	rcall	.+432    	; 0x53e <writeSpi>
		default: bufferInit(buffer);
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
		case 252://report current buffer
			soft_reset();
			break;
		case 253://report current buffer
			writeSpi(spi, hskp, 253, readBufferLength(buffer), 100);
			break;
 392:	2c c0       	rjmp	.+88     	; 0x3ec <__stack+0xed>
		
		case 254://report current buffer
			writeSpiBuffer(spi, hskp, 254, buffer->buffer, BUFFER_SIZE, 100);
 394:	0f 2e       	mov	r0, r31
 396:	f4 e6       	ldi	r31, 0x64	; 100
 398:	ef 2e       	mov	r14, r31
 39a:	f0 2d       	mov	r31, r0
 39c:	04 e6       	ldi	r16, 0x64	; 100
 39e:	9e 01       	movw	r18, r28
 3a0:	4e ef       	ldi	r20, 0xFE	; 254
 3a2:	b6 01       	movw	r22, r12
 3a4:	c5 01       	movw	r24, r10
 3a6:	48 d1       	rcall	.+656    	; 0x638 <writeSpiBuffer>
		default: bufferInit(buffer);
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
			writeSpi(spi, hskp, 253, readBufferLength(buffer), 100);
			break;
		
		case 254://report current buffer
			writeSpiBuffer(spi, hskp, 254, buffer->buffer, BUFFER_SIZE, 100);
			break;
 3ac:	1f c0       	rjmp	.+62     	; 0x3ec <__stack+0xed>
					
		case 255:
			writeSpi(spi, hskp, 255, UNIREL_POT_MINI, 100);
 3ae:	04 e6       	ldi	r16, 0x64	; 100
 3b0:	25 e6       	ldi	r18, 0x65	; 101
 3b2:	4f ef       	ldi	r20, 0xFF	; 255
 3b4:	b6 01       	movw	r22, r12
 3b6:	c5 01       	movw	r24, r10
 3b8:	c2 d0       	rcall	.+388    	; 0x53e <writeSpi>
		default: bufferInit(buffer);
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
			writeSpiBuffer(spi, hskp, 254, buffer->buffer, BUFFER_SIZE, 100);
			break;
					
		case 255:
			writeSpi(spi, hskp, 255, UNIREL_POT_MINI, 100);
			break;
 3be:	16 c0       	rjmp	.+44     	; 0x3ec <__stack+0xed>
		default: bufferInit(buffer);
 3c0:	ce 01       	movw	r24, r28
 3c2:	39 d0       	rcall	.+114    	; 0x436 <bufferInit>
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	11 c0       	rjmp	.+34     	; 0x3ec <__stack+0xed>



int parseSPI(spi_t *spi, buffer_t *buffer, hskp_t  *hskp){
	
	if(buffer->buffer_length == 0)return 0;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e c0       	rjmp	.+28     	; 0x3ec <__stack+0xed>
	if(readBuffer(buffer) != RECIEVE_KEYWORD)return 0;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0b c0       	rjmp	.+22     	; 0x3ec <__stack+0xed>
	//PORTB ^= 1<<PORTB6;
	//disableHSKP();
	int start_tick = getTick(hskp);
	
	parsing_state = PARSING_INSTR;
	while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	9f ef       	ldi	r25, 0xFF	; 255
 3da:	08 c0       	rjmp	.+16     	; 0x3ec <__stack+0xed>
		default: bufferInit(buffer);
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <__stack+0xed>
		case 1: //write ace value
		
			break;
		
		case 2: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	9f ef       	ldi	r25, 0xFF	; 255
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <__stack+0xed>
			set_ladder(readBuffer(buffer), 0);
			break;
		
		case 3: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
		
	}
	//bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	bf 90       	pop	r11
 3fc:	af 90       	pop	r10
 3fe:	08 95       	ret

00000400 <errorHandler>:

void errorHandler(void){
	cli();
 400:	f8 94       	cli
 402:	ff cf       	rjmp	.-2      	; 0x402 <errorHandler+0x2>

00000404 <SPIInit>:



void SPIInit(void){
			
	DDRB &= ~(1<<DDB7); //set HIZ mode
 404:	84 b1       	in	r24, 0x04	; 4
 406:	8f 77       	andi	r24, 0x7F	; 127
 408:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB7);
 40a:	85 b1       	in	r24, 0x05	; 5
 40c:	8f 77       	andi	r24, 0x7F	; 127
 40e:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB4; //set MISO output
 410:	84 b1       	in	r24, 0x04	; 4
 412:	80 61       	ori	r24, 0x10	; 16
 414:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= 1<< DDB6;
 416:	84 b1       	in	r24, 0x04	; 4
 418:	80 64       	ori	r24, 0x40	; 64
 41a:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0; //interrupt for SS
 41c:	e8 e6       	ldi	r30, 0x68	; 104
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	81 60       	ori	r24, 0x01	; 1
 424:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT2;
 426:	eb e6       	ldi	r30, 0x6B	; 107
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	84 60       	ori	r24, 0x04	; 4
 42e:	80 83       	st	Z, r24
	
	SPCR = 1<<SPE;// | 1<<SPIE; //enable SPI
 430:	80 e4       	ldi	r24, 0x40	; 64
 432:	8c bd       	out	0x2c, r24	; 44
 434:	08 95       	ret

00000436 <bufferInit>:
}


void bufferInit(buffer_t *buffer){
	
	buffer->read_index = 0;
 436:	fc 01       	movw	r30, r24
 438:	eb 59       	subi	r30, 0x9B	; 155
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	10 82       	st	Z, r1
	buffer->write_index = 0;
 43e:	31 96       	adiw	r30, 0x01	; 1
 440:	10 82       	st	Z, r1
	buffer->buffer_length = 0;
 442:	32 97       	sbiw	r30, 0x02	; 2
 444:	10 82       	st	Z, r1
	buffer->buffer[0] = 0;
 446:	fc 01       	movw	r30, r24
 448:	10 82       	st	Z, r1
	buffer->buffer[1] = 0;
 44a:	11 82       	std	Z+1, r1	; 0x01
 44c:	08 95       	ret

0000044e <writeBuffer>:
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 44e:	fc 01       	movw	r30, r24
 450:	ec 59       	subi	r30, 0x9C	; 156
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	20 81       	ld	r18, Z
 456:	23 36       	cpi	r18, 0x63	; 99
 458:	b1 f0       	breq	.+44     	; 0x486 <writeBuffer+0x38>
	buffer->buffer[buffer->write_index] = val;
 45a:	32 96       	adiw	r30, 0x02	; 2
 45c:	20 81       	ld	r18, Z
 45e:	dc 01       	movw	r26, r24
 460:	a2 0f       	add	r26, r18
 462:	b1 1d       	adc	r27, r1
 464:	6c 93       	st	X, r22
	buffer->write_index++;
 466:	20 81       	ld	r18, Z
 468:	2f 5f       	subi	r18, 0xFF	; 255
 46a:	20 83       	st	Z, r18
	buffer->buffer_length++;
 46c:	dc 01       	movw	r26, r24
 46e:	ac 59       	subi	r26, 0x9C	; 156
 470:	bf 4f       	sbci	r27, 0xFF	; 255
 472:	2c 91       	ld	r18, X
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	2c 93       	st	X, r18
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
 478:	20 81       	ld	r18, Z
 47a:	23 36       	cpi	r18, 0x63	; 99
 47c:	39 f4       	brne	.+14     	; 0x48c <writeBuffer+0x3e>
 47e:	10 82       	st	Z, r1
	return 0;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	08 95       	ret
	buffer->buffer[1] = 0;
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	9f ef       	ldi	r25, 0xFF	; 255
 48a:	08 95       	ret
	buffer->buffer[buffer->write_index] = val;
	buffer->write_index++;
	buffer->buffer_length++;
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
	return 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
}
 490:	08 95       	ret

00000492 <__vector_3>:
#include <avr/interrupt.h>
#include <util/delay.h>



 ISR(PCINT0_vect){
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	if(!(PINB & 1<<PINB2) ||/* !(PINB & 1<<PINB7)*/ spi_s.spi_busy)return;
 4b4:	1a 9b       	sbis	0x03, 2	; 3
 4b6:	09 c0       	rjmp	.+18     	; 0x4ca <__vector_3+0x38>
 4b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4bc:	81 11       	cpse	r24, r1
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <__vector_3+0x38>
	
	writeBuffer(&buf, SPDR);
 4c0:	6e b5       	in	r22, 0x2e	; 46
 4c2:	88 e0       	ldi	r24, 0x08	; 8
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	c3 df       	rcall	.-122    	; 0x44e <writeBuffer>
	SPDR = 0;
 4c8:	1e bc       	out	0x2e, r1	; 46
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <readBuffer>:
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 4ec:	fc 01       	movw	r30, r24
 4ee:	ec 59       	subi	r30, 0x9C	; 156
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	20 81       	ld	r18, Z
 4f4:	22 23       	and	r18, r18
 4f6:	b9 f0       	breq	.+46     	; 0x526 <readBuffer+0x3a>
	int buf = buffer->buffer[buffer->read_index];
 4f8:	31 96       	adiw	r30, 0x01	; 1
 4fa:	20 81       	ld	r18, Z
 4fc:	dc 01       	movw	r26, r24
 4fe:	a2 0f       	add	r26, r18
 500:	b1 1d       	adc	r27, r1
 502:	2c 91       	ld	r18, X
 504:	30 e0       	ldi	r19, 0x00	; 0
	buffer->read_index++;
 506:	40 81       	ld	r20, Z
 508:	4f 5f       	subi	r20, 0xFF	; 255
 50a:	40 83       	st	Z, r20
	buffer->buffer_length--;
 50c:	dc 01       	movw	r26, r24
 50e:	ac 59       	subi	r26, 0x9C	; 156
 510:	bf 4f       	sbci	r27, 0xFF	; 255
 512:	4c 91       	ld	r20, X
 514:	41 50       	subi	r20, 0x01	; 1
 516:	4c 93       	st	X, r20
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
 518:	40 81       	ld	r20, Z
 51a:	43 36       	cpi	r20, 0x63	; 99
 51c:	39 f4       	brne	.+14     	; 0x52c <readBuffer+0x40>
 51e:	10 82       	st	Z, r1
	return buf;
 520:	82 2f       	mov	r24, r18
 522:	93 2f       	mov	r25, r19
 524:	08 95       	ret
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	08 95       	ret
	int buf = buffer->buffer[buffer->read_index];
	buffer->read_index++;
	buffer->buffer_length--;
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
	return buf;
 52c:	82 2f       	mov	r24, r18
 52e:	93 2f       	mov	r25, r19
}
 530:	08 95       	ret

00000532 <readBufferLength>:

int readBufferLength(buffer_t *buffer){
	return buffer->buffer_length;
 532:	8c 59       	subi	r24, 0x9C	; 156
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
}
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	08 95       	ret

0000053e <writeSpi>:

void writeSpi(spi_t *spi, hskp_t *hskp, uint8_t instr, uint8_t data, uint8_t timeout){
 53e:	8f 92       	push	r8
 540:	9f 92       	push	r9
 542:	af 92       	push	r10
 544:	bf 92       	push	r11
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	7c 01       	movw	r14, r24
 556:	eb 01       	movw	r28, r22
 558:	d4 2e       	mov	r13, r20
 55a:	12 2f       	mov	r17, r18
	
	uint32_t start_tick = getTick(hskp);
 55c:	cb 01       	movw	r24, r22
 55e:	94 dd       	rcall	.-1240   	; 0x88 <getTick>
 560:	4c 01       	movw	r8, r24
 562:	a1 2c       	mov	r10, r1
 564:	b1 2c       	mov	r11, r1
	while(!(PINB & 1<<PINB2)){}
 566:	1a 9b       	sbis	0x03, 2	; 3
 568:	fe cf       	rjmp	.-4      	; 0x566 <writeSpi+0x28>
	disableHSKP(&housekp);
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	89 dd       	rcall	.-1262   	; 0x82 <disableHSKP>
	spi->spi_busy = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	f7 01       	movw	r30, r14
 574:	80 83       	st	Z, r24


	SPSR;
 576:	8d b5       	in	r24, 0x2d	; 45
	SPDR = TRANSMIT_KEYWORD;
 578:	8f ed       	ldi	r24, 0xDF	; 223
 57a:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);//set INT low
 57c:	85 b1       	in	r24, 0x05	; 5
 57e:	8f 77       	andi	r24, 0x7F	; 127
 580:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 582:	84 b1       	in	r24, 0x04	; 4
 584:	80 68       	ori	r24, 0x80	; 128
 586:	84 b9       	out	0x04, r24	; 4
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <writeSpi+0x6a>
 58a:	ce 01       	movw	r24, r28
 58c:	7d dd       	rcall	.-1286   	; 0x88 <getTick>
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	b5 01       	movw	r22, r10
 594:	a4 01       	movw	r20, r8
 596:	40 0f       	add	r20, r16
 598:	51 1d       	adc	r21, r1
 59a:	61 1d       	adc	r22, r1
 59c:	71 1d       	adc	r23, r1
 59e:	48 17       	cp	r20, r24
 5a0:	59 07       	cpc	r21, r25
 5a2:	6a 07       	cpc	r22, r26
 5a4:	7b 07       	cpc	r23, r27
 5a6:	28 f0       	brcs	.+10     	; 0x5b2 <writeSpi+0x74>
 5a8:	0d b4       	in	r0, 0x2d	; 45
 5aa:	07 fe       	sbrs	r0, 7
 5ac:	ee cf       	rjmp	.-36     	; 0x58a <writeSpi+0x4c>
 5ae:	1a 9b       	sbis	0x03, 2	; 3
 5b0:	ec cf       	rjmp	.-40     	; 0x58a <writeSpi+0x4c>
	
	SPDR = instr;
 5b2:	de bc       	out	0x2e, r13	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <writeSpi+0x96>
 5b6:	ce 01       	movw	r24, r28
 5b8:	67 dd       	rcall	.-1330   	; 0x88 <getTick>
 5ba:	a0 e0       	ldi	r26, 0x00	; 0
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	b5 01       	movw	r22, r10
 5c0:	a4 01       	movw	r20, r8
 5c2:	40 0f       	add	r20, r16
 5c4:	51 1d       	adc	r21, r1
 5c6:	61 1d       	adc	r22, r1
 5c8:	71 1d       	adc	r23, r1
 5ca:	48 17       	cp	r20, r24
 5cc:	59 07       	cpc	r21, r25
 5ce:	6a 07       	cpc	r22, r26
 5d0:	7b 07       	cpc	r23, r27
 5d2:	28 f0       	brcs	.+10     	; 0x5de <writeSpi+0xa0>
 5d4:	0d b4       	in	r0, 0x2d	; 45
 5d6:	07 fe       	sbrs	r0, 7
 5d8:	ee cf       	rjmp	.-36     	; 0x5b6 <writeSpi+0x78>
 5da:	1a 9b       	sbis	0x03, 2	; 3
 5dc:	ec cf       	rjmp	.-40     	; 0x5b6 <writeSpi+0x78>
		
	SPDR = data;
 5de:	1e bd       	out	0x2e, r17	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 5e0:	0f c0       	rjmp	.+30     	; 0x600 <writeSpi+0xc2>
 5e2:	ce 01       	movw	r24, r28
 5e4:	51 dd       	rcall	.-1374   	; 0x88 <getTick>
 5e6:	a0 e0       	ldi	r26, 0x00	; 0
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	b5 01       	movw	r22, r10
 5ec:	a4 01       	movw	r20, r8
 5ee:	40 0f       	add	r20, r16
 5f0:	51 1d       	adc	r21, r1
 5f2:	61 1d       	adc	r22, r1
 5f4:	71 1d       	adc	r23, r1
 5f6:	48 17       	cp	r20, r24
 5f8:	59 07       	cpc	r21, r25
 5fa:	6a 07       	cpc	r22, r26
 5fc:	7b 07       	cpc	r23, r27
 5fe:	28 f0       	brcs	.+10     	; 0x60a <writeSpi+0xcc>
 600:	0d b4       	in	r0, 0x2d	; 45
 602:	07 fe       	sbrs	r0, 7
 604:	ee cf       	rjmp	.-36     	; 0x5e2 <writeSpi+0xa4>
 606:	1a 9b       	sbis	0x03, 2	; 3
 608:	ec cf       	rjmp	.-40     	; 0x5e2 <writeSpi+0xa4>
	
	PORTB &= ~(1<<PORTB7); //set INT high
 60a:	85 b1       	in	r24, 0x05	; 5
 60c:	8f 77       	andi	r24, 0x7F	; 127
 60e:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 610:	84 b1       	in	r24, 0x04	; 4
 612:	8f 77       	andi	r24, 0x7F	; 127
 614:	84 b9       	out	0x04, r24	; 4
	
	//PCICR |= 1<< PCIE0;
	enableHSKP(&housekp);
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	2f dd       	rcall	.-1442   	; 0x7a <enableHSKP>
	spi->spi_busy = 0;	
 61c:	f7 01       	movw	r30, r14
 61e:	10 82       	st	Z, r1
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	df 90       	pop	r13
 62e:	bf 90       	pop	r11
 630:	af 90       	pop	r10
 632:	9f 90       	pop	r9
 634:	8f 90       	pop	r8
 636:	08 95       	ret

00000638 <writeSpiBuffer>:

void writeSpiBuffer(spi_t *spi, hskp_t *hskp, uint8_t instr, uint8_t* data, uint8_t length, uint8_t timeout){
 638:	4f 92       	push	r4
 63a:	5f 92       	push	r5
 63c:	6f 92       	push	r6
 63e:	7f 92       	push	r7
 640:	8f 92       	push	r8
 642:	9f 92       	push	r9
 644:	af 92       	push	r10
 646:	bf 92       	push	r11
 648:	cf 92       	push	r12
 64a:	df 92       	push	r13
 64c:	ef 92       	push	r14
 64e:	0f 93       	push	r16
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	4c 01       	movw	r8, r24
 656:	eb 01       	movw	r28, r22
 658:	d4 2e       	mov	r13, r20
 65a:	59 01       	movw	r10, r18
	
	uint32_t start_tick = getTick(hskp);
 65c:	cb 01       	movw	r24, r22
 65e:	14 dd       	rcall	.-1496   	; 0x88 <getTick>
 660:	2c 01       	movw	r4, r24
 662:	61 2c       	mov	r6, r1
 664:	71 2c       	mov	r7, r1
	while(!(PINB & 1<<PINB2)){}
 666:	1a 9b       	sbis	0x03, 2	; 3
 668:	fe cf       	rjmp	.-4      	; 0x666 <writeSpiBuffer+0x2e>
	disableHSKP(&housekp);
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	09 dd       	rcall	.-1518   	; 0x82 <disableHSKP>
	spi->spi_busy = 1;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	f4 01       	movw	r30, r8
 674:	80 83       	st	Z, r24
	
	SPSR;		//clearing spif flag
 676:	8d b5       	in	r24, 0x2d	; 45
	SPDR = TRANSMIT_KEYWORD;		//set instr
 678:	8f ed       	ldi	r24, 0xDF	; 223
 67a:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);	//set INT low
 67c:	85 b1       	in	r24, 0x05	; 5
 67e:	8f 77       	andi	r24, 0x7F	; 127
 680:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 682:	84 b1       	in	r24, 0x04	; 4
 684:	80 68       	ori	r24, 0x80	; 128
 686:	84 b9       	out	0x04, r24	; 4

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 688:	0f c0       	rjmp	.+30     	; 0x6a8 <writeSpiBuffer+0x70>
 68a:	ce 01       	movw	r24, r28
 68c:	fd dc       	rcall	.-1542   	; 0x88 <getTick>
 68e:	a0 e0       	ldi	r26, 0x00	; 0
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	b3 01       	movw	r22, r6
 694:	a2 01       	movw	r20, r4
 696:	4e 0d       	add	r20, r14
 698:	51 1d       	adc	r21, r1
 69a:	61 1d       	adc	r22, r1
 69c:	71 1d       	adc	r23, r1
 69e:	48 17       	cp	r20, r24
 6a0:	59 07       	cpc	r21, r25
 6a2:	6a 07       	cpc	r22, r26
 6a4:	7b 07       	cpc	r23, r27
 6a6:	28 f0       	brcs	.+10     	; 0x6b2 <writeSpiBuffer+0x7a>
 6a8:	0d b4       	in	r0, 0x2d	; 45
 6aa:	07 fe       	sbrs	r0, 7
 6ac:	ee cf       	rjmp	.-36     	; 0x68a <writeSpiBuffer+0x52>
 6ae:	1a 9b       	sbis	0x03, 2	; 3
 6b0:	ec cf       	rjmp	.-40     	; 0x68a <writeSpiBuffer+0x52>
	
	SPDR = instr;
 6b2:	de bc       	out	0x2e, r13	; 46
		
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <writeSpiBuffer+0x9c>
 6b6:	ce 01       	movw	r24, r28
 6b8:	e7 dc       	rcall	.-1586   	; 0x88 <getTick>
 6ba:	a0 e0       	ldi	r26, 0x00	; 0
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	b3 01       	movw	r22, r6
 6c0:	a2 01       	movw	r20, r4
 6c2:	4e 0d       	add	r20, r14
 6c4:	51 1d       	adc	r21, r1
 6c6:	61 1d       	adc	r22, r1
 6c8:	71 1d       	adc	r23, r1
 6ca:	48 17       	cp	r20, r24
 6cc:	59 07       	cpc	r21, r25
 6ce:	6a 07       	cpc	r22, r26
 6d0:	7b 07       	cpc	r23, r27
 6d2:	28 f0       	brcs	.+10     	; 0x6de <writeSpiBuffer+0xa6>
 6d4:	0d b4       	in	r0, 0x2d	; 45
 6d6:	07 fe       	sbrs	r0, 7
 6d8:	ee cf       	rjmp	.-36     	; 0x6b6 <writeSpiBuffer+0x7e>
 6da:	1a 9b       	sbis	0x03, 2	; 3
 6dc:	ec cf       	rjmp	.-40     	; 0x6b6 <writeSpiBuffer+0x7e>
		
	SPDR = length;
 6de:	0e bd       	out	0x2e, r16	; 46
	
	for(int i=0; i<length; i++){
 6e0:	c1 2c       	mov	r12, r1
 6e2:	d1 2c       	mov	r13, r1
 6e4:	1c c0       	rjmp	.+56     	; 0x71e <writeSpiBuffer+0xe6>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 6e6:	ce 01       	movw	r24, r28
 6e8:	cf dc       	rcall	.-1634   	; 0x88 <getTick>
 6ea:	a0 e0       	ldi	r26, 0x00	; 0
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	b3 01       	movw	r22, r6
 6f0:	a2 01       	movw	r20, r4
 6f2:	4e 0d       	add	r20, r14
 6f4:	51 1d       	adc	r21, r1
 6f6:	61 1d       	adc	r22, r1
 6f8:	71 1d       	adc	r23, r1
 6fa:	48 17       	cp	r20, r24
 6fc:	59 07       	cpc	r21, r25
 6fe:	6a 07       	cpc	r22, r26
 700:	7b 07       	cpc	r23, r27
 702:	28 f0       	brcs	.+10     	; 0x70e <writeSpiBuffer+0xd6>
 704:	0d b4       	in	r0, 0x2d	; 45
 706:	07 fe       	sbrs	r0, 7
 708:	ee cf       	rjmp	.-36     	; 0x6e6 <writeSpiBuffer+0xae>
 70a:	1a 9b       	sbis	0x03, 2	; 3
 70c:	ec cf       	rjmp	.-40     	; 0x6e6 <writeSpiBuffer+0xae>
		SPDR = data[i];
 70e:	f5 01       	movw	r30, r10
 710:	ec 0d       	add	r30, r12
 712:	fd 1d       	adc	r31, r13
 714:	80 81       	ld	r24, Z
 716:	8e bd       	out	0x2e, r24	; 46
		
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
		
	SPDR = length;
	
	for(int i=0; i<length; i++){
 718:	ff ef       	ldi	r31, 0xFF	; 255
 71a:	cf 1a       	sub	r12, r31
 71c:	df 0a       	sbc	r13, r31
 71e:	80 2f       	mov	r24, r16
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	c8 16       	cp	r12, r24
 724:	d9 06       	cpc	r13, r25
 726:	74 f3       	brlt	.-36     	; 0x704 <writeSpiBuffer+0xcc>
 728:	0f c0       	rjmp	.+30     	; 0x748 <writeSpiBuffer+0x110>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
		SPDR = data[i];
	}
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout) break;}
 72a:	ce 01       	movw	r24, r28
 72c:	ad dc       	rcall	.-1702   	; 0x88 <getTick>
 72e:	a0 e0       	ldi	r26, 0x00	; 0
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	b3 01       	movw	r22, r6
 734:	a2 01       	movw	r20, r4
 736:	4e 0d       	add	r20, r14
 738:	51 1d       	adc	r21, r1
 73a:	61 1d       	adc	r22, r1
 73c:	71 1d       	adc	r23, r1
 73e:	48 17       	cp	r20, r24
 740:	59 07       	cpc	r21, r25
 742:	6a 07       	cpc	r22, r26
 744:	7b 07       	cpc	r23, r27
 746:	28 f0       	brcs	.+10     	; 0x752 <writeSpiBuffer+0x11a>
 748:	0d b4       	in	r0, 0x2d	; 45
 74a:	07 fe       	sbrs	r0, 7
 74c:	ee cf       	rjmp	.-36     	; 0x72a <writeSpiBuffer+0xf2>
 74e:	1a 9b       	sbis	0x03, 2	; 3
 750:	ec cf       	rjmp	.-40     	; 0x72a <writeSpiBuffer+0xf2>
	PORTB &= ~(1<<PORTB7); //set INT high
 752:	85 b1       	in	r24, 0x05	; 5
 754:	8f 77       	andi	r24, 0x7F	; 127
 756:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 758:	84 b1       	in	r24, 0x04	; 4
 75a:	8f 77       	andi	r24, 0x7F	; 127
 75c:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	enableHSKP(&housekp);
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	8b dc       	rcall	.-1770   	; 0x7a <enableHSKP>
	spi->spi_busy = 0;
 764:	f4 01       	movw	r30, r8
 766:	10 82       	st	Z, r1
	//if(getTick()>start_tick+timeout)errorHandler();
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	0f 91       	pop	r16
 76e:	ef 90       	pop	r14
 770:	df 90       	pop	r13
 772:	cf 90       	pop	r12
 774:	bf 90       	pop	r11
 776:	af 90       	pop	r10
 778:	9f 90       	pop	r9
 77a:	8f 90       	pop	r8
 77c:	7f 90       	pop	r7
 77e:	6f 90       	pop	r6
 780:	5f 90       	pop	r5
 782:	4f 90       	pop	r4
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>

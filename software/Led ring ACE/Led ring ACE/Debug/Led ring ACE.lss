
Led ring ACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  0080011e  0080011e  00000814  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c3  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b70  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001581  00000000  00000000  00002d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d0b  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b6  00000000  00000000  0000b293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000bb49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002cac  00000000  00000000  0000bc61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
   2:	ad c0       	rjmp	.+346    	; 0x15e <__bad_interrupt>
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
   6:	1d c3       	rjmp	.+1594   	; 0x642 <__vector_3>
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	a9 c0       	rjmp	.+338    	; 0x15e <__bad_interrupt>
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	a7 c0       	rjmp	.+334    	; 0x15e <__bad_interrupt>
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	a5 c0       	rjmp	.+330    	; 0x15e <__bad_interrupt>
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	a3 c0       	rjmp	.+326    	; 0x15e <__bad_interrupt>
  18:	5b c1       	rjmp	.+694    	; 0x2d0 <__vector_12>
  1a:	a1 c0       	rjmp	.+322    	; 0x15e <__bad_interrupt>
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	9f c0       	rjmp	.+318    	; 0x15e <__bad_interrupt>
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	9d c0       	rjmp	.+314    	; 0x15e <__bad_interrupt>
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	9b c0       	rjmp	.+310    	; 0x15e <__bad_interrupt>

00000028 <__trampolines_end>:
  28:	ff 38       	cpi	r31, 0x8F	; 143
  2a:	28 37       	cpi	r18, 0x78	; 120
  2c:	18 ff       	.word	0xff18	; ????
  2e:	27 34       	cpi	r18, 0x47	; 71
  30:	08 39       	cpi	r16, 0x98	; 152
  32:	ff ff       	.word	0xffff	; ????
  34:	17 ff       	sbrs	r17, 7
  36:	24 0d       	add	r18, r4
  38:	78 ff       	.word	0xff78	; ????
  3a:	29 36       	cpi	r18, 0x69	; 105
  3c:	ff ff       	.word	0xffff	; ????
  3e:	ff 35       	cpi	r31, 0x5F	; 95
  40:	07 ff       	sbrs	r16, 7
  42:	ff ff       	.word	0xffff	; ????
  44:	14 13       	cpse	r17, r20
  46:	7d 12       	cpse	r7, r29
  48:	68 69       	ori	r22, 0x98	; 152
  4a:	ff ff       	.word	0xffff	; ????
  4c:	19 6a       	ori	r17, 0xA9	; 169
  4e:	26 ff       	sbrs	r18, 6
  50:	ff 3a       	cpi	r31, 0xAF	; 175
  52:	ff ff       	.word	0xffff	; ????
  54:	ff ff       	.word	0xffff	; ????
  56:	25 0e       	add	r2, r21
  58:	77 76       	andi	r23, 0x67	; 103
  5a:	ff ff       	.word	0xffff	; ????
  5c:	ff 6b       	ori	r31, 0xBF	; 191
  5e:	ff ff       	.word	0xffff	; ????
  60:	04 ff       	sbrs	r16, 4
  62:	03 ff       	sbrs	r16, 3
  64:	6d 6c       	ori	r22, 0xCD	; 205
  66:	02 01       	movw	r0, r4
  68:	58 ff       	.word	0xff58	; ????
  6a:	59 ff       	.word	0xff59	; ????
  6c:	ff ff       	.word	0xffff	; ????
  6e:	ff 33       	cpi	r31, 0x3F	; 63
  70:	09 0a       	sbc	r0, r25
  72:	5a ff       	.word	0xff5a	; ????
  74:	16 0b       	sbc	r17, r22
  76:	ff 0c       	add	r15, r15
  78:	ff ff       	.word	0xffff	; ????
  7a:	2a 2b       	or	r18, r26
  7c:	ff ff       	.word	0xffff	; ????
  7e:	ff ff       	.word	0xffff	; ????
  80:	ff ff       	.word	0xffff	; ????
  82:	ff ff       	.word	0xffff	; ????
  84:	15 ff       	sbrs	r17, 5
  86:	7e 7f       	andi	r23, 0xFE	; 254
  88:	67 ff       	sbrs	r22, 7
  8a:	66 ff       	sbrs	r22, 6
  8c:	ff ff       	.word	0xffff	; ????
  8e:	ff ff       	.word	0xffff	; ????
  90:	ff ff       	.word	0xffff	; ????
  92:	5b ff       	.word	0xff5b	; ????
  94:	ff ff       	.word	0xffff	; ????
  96:	ff ff       	.word	0xffff	; ????
  98:	74 75       	andi	r23, 0x54	; 84
  9a:	ff ff       	.word	0xffff	; ????
  9c:	73 ff       	sbrs	r23, 3
  9e:	ff ff       	.word	0xffff	; ????
  a0:	5d 5e       	subi	r21, 0xED	; 237
  a2:	5c ff       	.word	0xff5c	; ????
  a4:	72 5f       	subi	r23, 0xF2	; 242
  a6:	71 00       	.word	0x0071	; ????
  a8:	48 47       	sbci	r20, 0x78	; 120
  aa:	ff 44       	sbci	r31, 0x4F	; 79
  ac:	49 ff       	.word	0xff49	; ????
  ae:	ff 1d       	adc	r31, r15
  b0:	ff 46       	sbci	r31, 0x6F	; 111
  b2:	ff 45       	sbci	r31, 0x5F	; 95
  b4:	ff ff       	.word	0xffff	; ????
  b6:	23 22       	and	r2, r19
  b8:	79 ff       	.word	0xff79	; ????
  ba:	7a ff       	.word	0xff7a	; ????
  bc:	4a ff       	.word	0xff4a	; ????
  be:	ff 1e       	adc	r15, r31
  c0:	06 ff       	sbrs	r16, 6
  c2:	7b ff       	.word	0xff7b	; ????
  c4:	ff ff       	.word	0xffff	; ????
  c6:	7c 11       	cpse	r23, r12
  c8:	ff ff       	.word	0xffff	; ????
  ca:	ff 43       	sbci	r31, 0x3F	; 63
  cc:	1a ff       	.word	0xff1a	; ????
  ce:	1b 1c       	adc	r1, r11
  d0:	ff 3b       	cpi	r31, 0xBF	; 191
  d2:	ff ff       	.word	0xffff	; ????
  d4:	ff ff       	.word	0xffff	; ????
  d6:	ff 0f       	add	r31, r31
  d8:	ff ff       	.word	0xffff	; ????
  da:	ff ff       	.word	0xffff	; ????
  dc:	ff ff       	.word	0xffff	; ????
  de:	ff ff       	.word	0xffff	; ????
  e0:	05 ff       	sbrs	r16, 5
  e2:	ff ff       	.word	0xffff	; ????
  e4:	6e ff       	.word	0xff6e	; ????
  e6:	6f 10       	cpse	r6, r15
  e8:	57 54       	subi	r21, 0x47	; 71
  ea:	ff 2d       	mov	r31, r15
  ec:	56 55       	subi	r21, 0x56	; 86
  ee:	ff 32       	cpi	r31, 0x2F	; 47
  f0:	ff ff       	.word	0xffff	; ????
  f2:	ff 2e       	mov	r15, r31
  f4:	ff ff       	.word	0xffff	; ????
  f6:	ff 21       	and	r31, r15
  f8:	ff 53       	subi	r31, 0x3F	; 63
  fa:	ff 2c       	mov	r15, r15
  fc:	4b ff       	.word	0xff4b	; ????
  fe:	ff 1f       	adc	r31, r31
 100:	ff ff       	.word	0xffff	; ????
 102:	ff ff       	.word	0xffff	; ????
 104:	ff ff       	.word	0xffff	; ????
 106:	ff 20       	and	r15, r15
 108:	64 3d       	cpi	r22, 0xD4	; 212
 10a:	65 42       	sbci	r22, 0x25	; 37
 10c:	ff 3e       	cpi	r31, 0xEF	; 239
 10e:	ff 31       	cpi	r31, 0x1F	; 31
 110:	63 3c       	cpi	r22, 0xC3	; 195
 112:	ff 2f       	mov	r31, r31
 114:	ff ff       	.word	0xffff	; ????
 116:	ff 30       	cpi	r31, 0x0F	; 15
 118:	4d 52       	subi	r20, 0x2D	; 45
 11a:	4e 41       	sbci	r20, 0x1E	; 30
 11c:	4c 3f       	cpi	r20, 0xFC	; 252
 11e:	ff 40       	sbci	r31, 0x0F	; 15
 120:	62 51       	subi	r22, 0x12	; 18
 122:	4f 50       	subi	r20, 0x0F	; 15
 124:	61 60       	ori	r22, 0x01	; 1
 126:	70 ff       	sbrs	r23, 0

00000128 <__ctors_end>:
 128:	11 24       	eor	r1, r1
 12a:	1f be       	out	0x3f, r1	; 63
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	d2 e0       	ldi	r29, 0x02	; 2
 130:	de bf       	out	0x3e, r29	; 62
 132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
 134:	11 e0       	ldi	r17, 0x01	; 1
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	e2 e6       	ldi	r30, 0x62	; 98
 13c:	f7 e0       	ldi	r31, 0x07	; 7
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
 140:	05 90       	lpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	ae 31       	cpi	r26, 0x1E	; 30
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	ae e1       	ldi	r26, 0x1E	; 30
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	ad 38       	cpi	r26, 0x8D	; 141
 156:	b2 07       	cpc	r27, r18
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	12 d2       	rcall	.+1060   	; 0x580 <main>
 15c:	00 c3       	rjmp	.+1536   	; 0x75e <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <disableTimer>:
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1);
	
	PORTD |= 1<<ACE_EN;
	
	return raw_val;
}
 160:	ee e6       	ldi	r30, 0x6E	; 110
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <isBitSet>:
 16c:	86 23       	and	r24, r22
 16e:	11 f0       	breq	.+4      	; 0x174 <isBitSet+0x8>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret

00000178 <readACEQuick>:

uint8_t ACETransform(uint8_t val){
	return encoderMap[val];
}

uint8_t readACEQuick(void){
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	PORTD &= ~(1<<ACE_EN);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	87 7f       	andi	r24, 0xF7	; 247
 180:	8b b9       	out	0x0b, r24	; 11
	asm("nop\n\t"
 182:	00 00       	nop
 184:	00 00       	nop
 186:	00 00       	nop
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 188:	86 b1       	in	r24, 0x06	; 6
 18a:	60 e8       	ldi	r22, 0x80	; 128
 18c:	ef df       	rcall	.-34     	; 0x16c <isBitSet>
 18e:	c8 2f       	mov	r28, r24
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	d6 95       	lsr	r29
 194:	dc 2f       	mov	r29, r28
 196:	cc 27       	eor	r28, r28
 198:	d7 95       	ror	r29
 19a:	c7 95       	ror	r28
 19c:	86 b1       	in	r24, 0x06	; 6
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	e5 df       	rcall	.-54     	; 0x16c <isBitSet>
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	00 24       	eor	r0, r0
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	07 94       	ror	r0
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	07 94       	ror	r0
 1b2:	98 2f       	mov	r25, r24
 1b4:	80 2d       	mov	r24, r0
 1b6:	c8 2b       	or	r28, r24
 1b8:	d9 2b       	or	r29, r25
 1ba:	86 b1       	in	r24, 0x06	; 6
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	d6 df       	rcall	.-84     	; 0x16c <isBitSet>
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	82 95       	swap	r24
 1c8:	92 95       	swap	r25
 1ca:	90 7f       	andi	r25, 0xF0	; 240
 1cc:	98 27       	eor	r25, r24
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	98 27       	eor	r25, r24
 1d2:	c8 2b       	or	r28, r24
 1d4:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 1d6:	86 b1       	in	r24, 0x06	; 6
 1d8:	64 e0       	ldi	r22, 0x04	; 4
 1da:	c8 df       	rcall	.-112    	; 0x16c <isBitSet>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	82 95       	swap	r24
 1e0:	92 95       	swap	r25
 1e2:	90 7f       	andi	r25, 0xF0	; 240
 1e4:	98 27       	eor	r25, r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	98 27       	eor	r25, r24
uint8_t readACEQuick(void){
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 1ea:	c8 2b       	or	r28, r24
 1ec:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 1ee:	89 b1       	in	r24, 0x09	; 9
 1f0:	60 e4       	ldi	r22, 0x40	; 64
 1f2:	bc df       	rcall	.-136    	; 0x16c <isBitSet>
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	c8 2b       	or	r28, r24
 204:	d9 2b       	or	r29, r25
 206:	89 b1       	in	r24, 0x09	; 9
 208:	60 e8       	ldi	r22, 0x80	; 128
 20a:	b0 df       	rcall	.-160    	; 0x16c <isBitSet>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	c8 2b       	or	r28, r24
 218:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 21a:	83 b1       	in	r24, 0x03	; 3
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	a6 df       	rcall	.-180    	; 0x16c <isBitSet>
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 226:	c8 2b       	or	r28, r24
 228:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 22a:	83 b1       	in	r24, 0x03	; 3
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	9e df       	rcall	.-196    	; 0x16c <isBitSet>
 230:	fe 01       	movw	r30, r28
 232:	e8 2b       	or	r30, r24
uint8_t readACEQuick(void){
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 234:	e8 5d       	subi	r30, 0xD8	; 216
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	84 91       	lpm	r24, Z
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
	
	PORTD |= 1<<ACE_EN;
 23a:	9b b1       	in	r25, 0x0b	; 11
 23c:	98 60       	ori	r25, 0x08	; 8
 23e:	9b b9       	out	0x0b, r25	; 11
	return val;
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <ACEInit>:
uint8_t ace_changed = 0;


void ACEInit(void){
	
	DDRB &= ~(0x03); //set ace pins on portx to input
 246:	84 b1       	in	r24, 0x04	; 4
 248:	8c 7f       	andi	r24, 0xFC	; 252
 24a:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(0x87);
 24c:	87 b1       	in	r24, 0x07	; 7
 24e:	88 77       	andi	r24, 0x78	; 120
 250:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x08; //set EN to output
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= 1<<ACE_EN; 
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	8b b9       	out	0x0b, r24	; 11
	
	TCCR0A = 1<<CTC0|1<<CS02|1<<CS00; //timer enable
 25c:	8d e0       	ldi	r24, 0x0D	; 13
 25e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 78;			//78 is 10 ms delay
 260:	8e e4       	ldi	r24, 0x4E	; 78
 262:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1<<OCIE0A; //timer interrupt
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
	TCNT0 = 0;			//empty timer counter
 26a:	16 bc       	out	0x26, r1	; 38
	
	ace_val_old = readACEQuick();
 26c:	85 df       	rcall	.-246    	; 0x178 <readACEQuick>
 26e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ace_val_old>
 272:	08 95       	ret

00000274 <absoluteToRelative>:
uint8_t isBitSet(uint8_t reg, uint8_t pin){
	if (reg & pin) return 0;
	else return 1;
}

void absoluteToRelative(uint8_t *old_val, uint8_t *new_val, int *save){
 274:	fb 01       	movw	r30, r22
	
	int delta = 0;
	
	if(*old_val > 117 && *new_val < 10) delta = *new_val - *old_val + 128;		//corrections for zero crossing
 276:	dc 01       	movw	r26, r24
 278:	6c 91       	ld	r22, X
 27a:	66 37       	cpi	r22, 0x76	; 118
 27c:	48 f0       	brcs	.+18     	; 0x290 <absoluteToRelative+0x1c>
 27e:	20 81       	ld	r18, Z
 280:	2a 30       	cpi	r18, 0x0A	; 10
 282:	30 f4       	brcc	.+12     	; 0x290 <absoluteToRelative+0x1c>
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	26 1b       	sub	r18, r22
 288:	31 09       	sbc	r19, r1
 28a:	20 58       	subi	r18, 0x80	; 128
 28c:	3f 4f       	sbci	r19, 0xFF	; 255
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <absoluteToRelative+0x3a>
	else if(*old_val < 15 && *new_val > 110) delta = *new_val - *old_val - 128;
 290:	6f 30       	cpi	r22, 0x0F	; 15
 292:	48 f4       	brcc	.+18     	; 0x2a6 <absoluteToRelative+0x32>
 294:	20 81       	ld	r18, Z
 296:	2f 36       	cpi	r18, 0x6F	; 111
 298:	30 f0       	brcs	.+12     	; 0x2a6 <absoluteToRelative+0x32>
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	26 1b       	sub	r18, r22
 29e:	31 09       	sbc	r19, r1
 2a0:	20 58       	subi	r18, 0x80	; 128
 2a2:	31 09       	sbc	r19, r1
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <absoluteToRelative+0x3a>
	else delta = *new_val - *old_val;
 2a6:	20 81       	ld	r18, Z
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	26 1b       	sub	r18, r22
 2ac:	31 09       	sbc	r19, r1
	
	*save = *save + delta;	
 2ae:	da 01       	movw	r26, r20
 2b0:	6d 91       	ld	r22, X+
 2b2:	7c 91       	ld	r23, X
 2b4:	11 97       	sbiw	r26, 0x01	; 1
 2b6:	62 0f       	add	r22, r18
 2b8:	73 1f       	adc	r23, r19
 2ba:	6d 93       	st	X+, r22
 2bc:	7c 93       	st	X, r23
	
	*old_val = *new_val;
 2be:	40 81       	ld	r20, Z
 2c0:	fc 01       	movw	r30, r24
 2c2:	40 83       	st	Z, r20
	
	if(delta) ace_changed = 1;
 2c4:	23 2b       	or	r18, r19
 2c6:	19 f0       	breq	.+6      	; 0x2ce <absoluteToRelative+0x5a>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 2ce:	08 95       	ret

000002d0 <__vector_12>:
}


ISR(TIMER0_COMPA_vect){
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	
	if(cnt == 0){//reading ace values
 2f2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <cnt>
 2f6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <cnt+0x1>
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	a1 f4       	brne	.+40     	; 0x326 <__stack+0x27>
		ace_val_new = readACEQuick();
 2fe:	3c df       	rcall	.-392    	; 0x178 <readACEQuick>
 300:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ace_val_new>
		absoluteToRelative(&ace_val_old, &ace_val_new, &ace_val);
 304:	43 e2       	ldi	r20, 0x23	; 35
 306:	51 e0       	ldi	r21, 0x01	; 1
 308:	62 e2       	ldi	r22, 0x22	; 34
 30a:	71 e0       	ldi	r23, 0x01	; 1
 30c:	81 e2       	ldi	r24, 0x21	; 33
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	b1 df       	rcall	.-158    	; 0x274 <absoluteToRelative>
		cnt ++;
 312:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <cnt>
 316:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <cnt+0x1>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <cnt+0x1>
 320:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <cnt>
 324:	09 c0       	rjmp	.+18     	; 0x338 <__stack+0x39>
	}
	
	else if(cnt == 1){//setting leds
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	39 f4       	brne	.+14     	; 0x338 <__stack+0x39>
		setLEDRgb(ace_val);
 32a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ace_val>
 32e:	df d0       	rcall	.+446    	; 0x4ee <setLEDRgb>
		cnt = 0;
 330:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cnt+0x1>
 334:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cnt>
	}


 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <I2CInit>:
#define BITRATE 2       // Hardware I2C bitrate// 2 for 400kHz, 32 for 100kHz
#define PRESCALER 0		// SET PRESCALER TO 1


void I2CInit(void){
  TWBR = BITRATE;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
  TWSR &= ~(0x2 & PRESCALER);
 360:	e9 eb       	ldi	r30, 0xB9	; 185
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	80 83       	st	Z, r24
 368:	08 95       	ret

0000036a <I2CStart>:
}

// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
 36a:	ec eb       	ldi	r30, 0xBC	; 188
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	90 81       	ld	r25, Z
 370:	94 6a       	ori	r25, 0xA4	; 164
 372:	90 83       	st	Z, r25
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
 374:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 378:	99 23       	and	r25, r25
 37a:	e4 f7       	brge	.-8      	; 0x374 <I2CStart+0xa>
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 37c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 380:	98 7f       	andi	r25, 0xF8	; 248
 382:	98 30       	cpi	r25, 0x08	; 8
 384:	29 f0       	breq	.+10     	; 0x390 <I2CStart+0x26>
 386:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 38a:	98 7f       	andi	r25, 0xF8	; 248
 38c:	90 31       	cpi	r25, 0x10	; 16
 38e:	c9 f4       	brne	.+50     	; 0x3c2 <I2CStart+0x58>
	TWDR = address<<1 | rw;						//write adr+rw
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	86 2b       	or	r24, r22
 398:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
 39c:	84 e8       	ldi	r24, 0x84	; 132
 39e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));				//wait for send
 3a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3a6:	88 23       	and	r24, r24
 3a8:	e4 f7       	brge	.-8      	; 0x3a2 <I2CStart+0x38>
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 3aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3ae:	88 7f       	andi	r24, 0xF8	; 248
 3b0:	88 31       	cpi	r24, 0x18	; 24
 3b2:	49 f0       	breq	.+18     	; 0x3c6 <I2CStart+0x5c>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 3b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 3b8:	88 7f       	andi	r24, 0xF8	; 248
 3ba:	80 34       	cpi	r24, 0x40	; 64
 3bc:	31 f4       	brne	.+12     	; 0x3ca <I2CStart+0x60>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	08 95       	ret
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 3ca:	81 e0       	ldi	r24, 0x01	; 1
	return 0;

}
 3cc:	08 95       	ret

000003ce <I2CStop>:

void I2CStop (void) {
	TWCR = 1<<TWINT|1<<TWSTO|1<<TWEN;	// Send STOP
 3ce:	84 e9       	ldi	r24, 0x94	; 148
 3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3d4:	08 95       	ret

000003d6 <I2CWrite>:
	//while (!(TWCR & (1<<TWINT)));		// Wait for bus to return to idle state
}

uint8_t I2CWrite (uint8_t data) {
  TWDR = data;
 3d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
  TWCR = 1<<TWINT | 1 << TWEN;
 3da:	84 e8       	ldi	r24, 0x84	; 132
 3dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
  while (!(TWCR & 1<<TWINT));
 3e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3e4:	88 23       	and	r24, r24
 3e6:	e4 f7       	brge	.-8      	; 0x3e0 <I2CWrite+0xa>
  if((TWSR & 0xF8) != (1<<TWS5|1<<TWS3)) return 1;
 3e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3ec:	88 7f       	andi	r24, 0xF8	; 248
 3ee:	88 32       	cpi	r24, 0x28	; 40
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <I2CWrite+0x20>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	08 95       	ret
  return 0;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
  //return (TWSR & 0xF8);
}
 3f8:	08 95       	ret

000003fa <LEDSetReg>:
	I2CStop();
	if(I2CStart(IS3_ADR, I2C_READ)) return 1;
	uint8_t ret = I2CRead(0);
	I2CStop();
	return ret;
}
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	c8 2f       	mov	r28, r24
 400:	d6 2f       	mov	r29, r22
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	84 e3       	ldi	r24, 0x34	; 52
 406:	b1 df       	rcall	.-158    	; 0x36a <I2CStart>
 408:	81 11       	cpse	r24, r1
 40a:	0b c0       	rjmp	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 40c:	8c 2f       	mov	r24, r28
 40e:	e3 df       	rcall	.-58     	; 0x3d6 <I2CWrite>
 410:	81 11       	cpse	r24, r1
 412:	09 c0       	rjmp	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 414:	8d 2f       	mov	r24, r29
 416:	df df       	rcall	.-66     	; 0x3d6 <I2CWrite>
 418:	c8 2f       	mov	r28, r24
 41a:	81 11       	cpse	r24, r1
 41c:	06 c0       	rjmp	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41e:	d7 df       	rcall	.-82     	; 0x3ce <I2CStop>
 420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 422:	c1 e0       	ldi	r28, 0x01	; 1
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	c1 e0       	ldi	r28, 0x01	; 1
 428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	c1 e0       	ldi	r28, 0x01	; 1
 42c:	8c 2f       	mov	r24, r28
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <LEDInit>:
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	6e ea       	ldi	r22, 0xAE	; 174
 43a:	8f ec       	ldi	r24, 0xCF	; 207
 43c:	de df       	rcall	.-68     	; 0x3fa <LEDSetReg>
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	80 ea       	ldi	r24, 0xA0	; 160
 442:	db df       	rcall	.-74     	; 0x3fa <LEDSetReg>
 444:	6e e1       	ldi	r22, 0x1E	; 30
 446:	81 ea       	ldi	r24, 0xA1	; 161
 448:	d8 df       	rcall	.-80     	; 0x3fa <LEDSetReg>
 44a:	c0 e9       	ldi	r28, 0x90	; 144
 44c:	d0 e0       	ldi	r29, 0x00	; 0
 44e:	04 c0       	rjmp	.+8      	; 0x458 <LEDInit+0x24>
 450:	6c e3       	ldi	r22, 0x3C	; 60
 452:	8c 2f       	mov	r24, r28
 454:	d2 df       	rcall	.-92     	; 0x3fa <LEDSetReg>
 456:	21 96       	adiw	r28, 0x01	; 1
 458:	cf 39       	cpi	r28, 0x9F	; 159
 45a:	d1 05       	cpc	r29, r1
 45c:	cc f3       	brlt	.-14     	; 0x450 <LEDInit+0x1c>
 45e:	87 b1       	in	r24, 0x07	; 7
 460:	88 60       	ori	r24, 0x08	; 8
 462:	87 b9       	out	0x07, r24	; 7
 464:	88 b1       	in	r24, 0x08	; 8
 466:	88 60       	ori	r24, 0x08	; 8
 468:	88 b9       	out	0x08, r24	; 8
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <setLED>:

uint8_t setLED(uint8_t led, uint8_t rgb){
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	c6 2f       	mov	r28, r22
	uint8_t led_adr = led_adr_arr[led];
 476:	e8 2f       	mov	r30, r24
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	e0 50       	subi	r30, 0x00	; 0
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	d0 81       	ld	r29, Z
	if(I2CStart(IS3_ADR, I2C_WRITE)) return 1;
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	84 e3       	ldi	r24, 0x34	; 52
 484:	72 df       	rcall	.-284    	; 0x36a <I2CStart>
 486:	81 11       	cpse	r24, r1
 488:	2b c0       	rjmp	.+86     	; 0x4e0 <setLED+0x70>
	if(I2CWrite(led_adr)) return 1;
 48a:	8d 2f       	mov	r24, r29
 48c:	a4 df       	rcall	.-184    	; 0x3d6 <I2CWrite>
 48e:	d8 2f       	mov	r29, r24
 490:	81 11       	cpse	r24, r1
 492:	28 c0       	rjmp	.+80     	; 0x4e4 <setLED+0x74>
	
	I2CWrite(85*(0x3&rgb));
 494:	8c 2f       	mov	r24, r28
 496:	83 70       	andi	r24, 0x03	; 3
 498:	98 2f       	mov	r25, r24
 49a:	99 0f       	add	r25, r25
 49c:	99 0f       	add	r25, r25
 49e:	89 0f       	add	r24, r25
 4a0:	98 2f       	mov	r25, r24
 4a2:	92 95       	swap	r25
 4a4:	90 7f       	andi	r25, 0xF0	; 240
 4a6:	89 0f       	add	r24, r25
 4a8:	96 df       	rcall	.-212    	; 0x3d6 <I2CWrite>
	I2CWrite(85*(0x3&(rgb>>2)));
 4aa:	8c 2f       	mov	r24, r28
 4ac:	86 95       	lsr	r24
 4ae:	86 95       	lsr	r24
 4b0:	83 70       	andi	r24, 0x03	; 3
 4b2:	98 2f       	mov	r25, r24
 4b4:	99 0f       	add	r25, r25
 4b6:	99 0f       	add	r25, r25
 4b8:	89 0f       	add	r24, r25
 4ba:	98 2f       	mov	r25, r24
 4bc:	92 95       	swap	r25
 4be:	90 7f       	andi	r25, 0xF0	; 240
 4c0:	89 0f       	add	r24, r25
 4c2:	89 df       	rcall	.-238    	; 0x3d6 <I2CWrite>
	I2CWrite(85*(0x3&(rgb>>4)));
 4c4:	c2 95       	swap	r28
 4c6:	cf 70       	andi	r28, 0x0F	; 15
 4c8:	c3 70       	andi	r28, 0x03	; 3
 4ca:	8c 2f       	mov	r24, r28
 4cc:	88 0f       	add	r24, r24
 4ce:	88 0f       	add	r24, r24
 4d0:	c8 0f       	add	r28, r24
 4d2:	8c 2f       	mov	r24, r28
 4d4:	82 95       	swap	r24
 4d6:	80 7f       	andi	r24, 0xF0	; 240
 4d8:	8c 0f       	add	r24, r28
 4da:	7d df       	rcall	.-262    	; 0x3d6 <I2CWrite>
	
	I2CStop();
 4dc:	78 df       	rcall	.-272    	; 0x3ce <I2CStop>
	return 0;
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <setLED+0x76>
	return ret;
}

uint8_t setLED(uint8_t led, uint8_t rgb){
	uint8_t led_adr = led_adr_arr[led];
	if(I2CStart(IS3_ADR, I2C_WRITE)) return 1;
 4e0:	d1 e0       	ldi	r29, 0x01	; 1
 4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <setLED+0x76>
	if(I2CWrite(led_adr)) return 1;
 4e4:	d1 e0       	ldi	r29, 0x01	; 1
	I2CWrite(85*(0x3&(rgb>>2)));
	I2CWrite(85*(0x3&(rgb>>4)));
	
	I2CStop();
	return 0;
}
 4e6:	8d 2f       	mov	r24, r29
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <setLEDRgb>:

void setLEDRgb(uint8_t value){
 4ee:	ff 92       	push	r15
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	int led = value;//((value)*15)>>6;
 4f8:	08 2f       	mov	r16, r24
 4fa:	10 e0       	ldi	r17, 0x00	; 0
	int bck_clr = 0;
	
	for(int i = 0; i<30; i++){
 4fc:	c0 e0       	ldi	r28, 0x00	; 0
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void setLEDRgb(uint8_t value){
	int led = value;//((value)*15)>>6;
	int bck_clr = 0;
 500:	f1 2c       	mov	r15, r1
	
	for(int i = 0; i<30; i++){
 502:	35 c0       	rjmp	.+106    	; 0x56e <setLEDRgb+0x80>
		if(i<=led && led<= 30){setLED(i, 0b110000); bck_clr = 0;}
 504:	0c 17       	cp	r16, r28
 506:	1d 07       	cpc	r17, r29
 508:	44 f0       	brlt	.+16     	; 0x51a <setLEDRgb+0x2c>
 50a:	0f 31       	cpi	r16, 0x1F	; 31
 50c:	11 05       	cpc	r17, r1
 50e:	2c f4       	brge	.+10     	; 0x51a <setLEDRgb+0x2c>
 510:	60 e3       	ldi	r22, 0x30	; 48
 512:	8c 2f       	mov	r24, r28
 514:	ad df       	rcall	.-166    	; 0x470 <setLED>
 516:	f1 2c       	mov	r15, r1
 518:	29 c0       	rjmp	.+82     	; 0x56c <setLEDRgb+0x7e>
		else if(i<=led-30 && 30<=led && led<=60){setLED(i, 0b001100);bck_clr = 0b110000;}
 51a:	c8 01       	movw	r24, r16
 51c:	4e 97       	sbiw	r24, 0x1e	; 30
 51e:	8c 17       	cp	r24, r28
 520:	9d 07       	cpc	r25, r29
 522:	74 f0       	brlt	.+28     	; 0x540 <setLEDRgb+0x52>
 524:	0e 31       	cpi	r16, 0x1E	; 30
 526:	11 05       	cpc	r17, r1
 528:	5c f0       	brlt	.+22     	; 0x540 <setLEDRgb+0x52>
 52a:	0d 33       	cpi	r16, 0x3D	; 61
 52c:	11 05       	cpc	r17, r1
 52e:	44 f4       	brge	.+16     	; 0x540 <setLEDRgb+0x52>
 530:	6c e0       	ldi	r22, 0x0C	; 12
 532:	8c 2f       	mov	r24, r28
 534:	9d df       	rcall	.-198    	; 0x470 <setLED>
 536:	0f 2e       	mov	r0, r31
 538:	f0 e3       	ldi	r31, 0x30	; 48
 53a:	ff 2e       	mov	r15, r31
 53c:	f0 2d       	mov	r31, r0
 53e:	16 c0       	rjmp	.+44     	; 0x56c <setLEDRgb+0x7e>
		else if(i<=led-60 && 60<=led && led<=90){setLED(i, 0b000011);bck_clr = 0b001100;}
 540:	c8 01       	movw	r24, r16
 542:	cc 97       	sbiw	r24, 0x3c	; 60
 544:	8c 17       	cp	r24, r28
 546:	9d 07       	cpc	r25, r29
 548:	74 f0       	brlt	.+28     	; 0x566 <setLEDRgb+0x78>
 54a:	0c 33       	cpi	r16, 0x3C	; 60
 54c:	11 05       	cpc	r17, r1
 54e:	5c f0       	brlt	.+22     	; 0x566 <setLEDRgb+0x78>
 550:	0b 35       	cpi	r16, 0x5B	; 91
 552:	11 05       	cpc	r17, r1
 554:	44 f4       	brge	.+16     	; 0x566 <setLEDRgb+0x78>
 556:	63 e0       	ldi	r22, 0x03	; 3
 558:	8c 2f       	mov	r24, r28
 55a:	8a df       	rcall	.-236    	; 0x470 <setLED>
 55c:	0f 2e       	mov	r0, r31
 55e:	fc e0       	ldi	r31, 0x0C	; 12
 560:	ff 2e       	mov	r15, r31
 562:	f0 2d       	mov	r31, r0
 564:	03 c0       	rjmp	.+6      	; 0x56c <setLEDRgb+0x7e>
		else setLED(i, bck_clr);
 566:	6f 2d       	mov	r22, r15
 568:	8c 2f       	mov	r24, r28
 56a:	82 df       	rcall	.-252    	; 0x470 <setLED>

void setLEDRgb(uint8_t value){
	int led = value;//((value)*15)>>6;
	int bck_clr = 0;
	
	for(int i = 0; i<30; i++){
 56c:	21 96       	adiw	r28, 0x01	; 1
 56e:	ce 31       	cpi	r28, 0x1E	; 30
 570:	d1 05       	cpc	r29, r1
 572:	44 f2       	brlt	.-112    	; 0x504 <setLEDRgb+0x16>
		if(i<=led && led<= 30){setLED(i, 0b110000); bck_clr = 0;}
		else if(i<=led-30 && 30<=led && led<=60){setLED(i, 0b001100);bck_clr = 0b110000;}
		else if(i<=led-60 && 60<=led && led<=90){setLED(i, 0b000011);bck_clr = 0b001100;}
		else setLED(i, bck_clr);
		}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	08 95       	ret

00000580 <main>:



int main(void)
{
	ACEInit();
 580:	62 de       	rcall	.-828    	; 0x246 <ACEInit>
	I2CInit();
 582:	eb de       	rcall	.-554    	; 0x35a <I2CInit>
	LEDInit();
 584:	57 df       	rcall	.-338    	; 0x434 <LEDInit>
	SPIInit();
 586:	1a d0       	rcall	.+52     	; 0x5bc <SPIInit>
	bufferInit();
 588:	32 d0       	rcall	.+100    	; 0x5ee <bufferInit>
	
	sei();
 58a:	78 94       	sei
	
	disableTimer();
 58c:	e9 dd       	rcall	.-1070   	; 0x160 <disableTimer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	2f ef       	ldi	r18, 0xFF	; 255
 590:	81 e1       	ldi	r24, 0x11	; 17
 592:	9a e7       	ldi	r25, 0x7A	; 122
 594:	21 50       	subi	r18, 0x01	; 1
 596:	80 40       	sbci	r24, 0x00	; 0
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <main+0x14>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0x1e>
 59e:	00 00       	nop
	while(1){
					

		
		_delay_ms(5000);
		writeSpiBuffer(20, buffer, 30);
 5a0:	4e e1       	ldi	r20, 0x1E	; 30
 5a2:	69 e2       	ldi	r22, 0x29	; 41
 5a4:	71 e0       	ldi	r23, 0x01	; 1
 5a6:	84 e1       	ldi	r24, 0x14	; 20
 5a8:	a0 d0       	rcall	.+320    	; 0x6ea <writeSpiBuffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5aa:	25 e3       	ldi	r18, 0x35	; 53
 5ac:	2a 95       	dec	r18
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <main+0x2c>
 5b0:	00 00       	nop
		_delay_us(20);
		writeSpi(10, buffer_length);
 5b2:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <buffer_length>
 5b6:	8a e0       	ldi	r24, 0x0A	; 10
 5b8:	73 d0       	rcall	.+230    	; 0x6a0 <writeSpi>
 5ba:	e9 cf       	rjmp	.-46     	; 0x58e <main+0xe>

000005bc <SPIInit>:
	int buf = buffer[read_index];
	read_index++;
	buffer_length--;
	if(read_index == BUFFER_SIZE) read_index = 0;
	return buf;
}
 5bc:	84 b1       	in	r24, 0x04	; 4
 5be:	8f 77       	andi	r24, 0x7F	; 127
 5c0:	84 b9       	out	0x04, r24	; 4
 5c2:	85 b1       	in	r24, 0x05	; 5
 5c4:	8f 77       	andi	r24, 0x7F	; 127
 5c6:	85 b9       	out	0x05, r24	; 5
 5c8:	84 b1       	in	r24, 0x04	; 4
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	84 b9       	out	0x04, r24	; 4
 5ce:	84 b1       	in	r24, 0x04	; 4
 5d0:	80 64       	ori	r24, 0x40	; 64
 5d2:	84 b9       	out	0x04, r24	; 4
 5d4:	e8 e6       	ldi	r30, 0x68	; 104
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	80 83       	st	Z, r24
 5de:	eb e6       	ldi	r30, 0x6B	; 107
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	84 60       	ori	r24, 0x04	; 4
 5e6:	80 83       	st	Z, r24
 5e8:	80 e4       	ldi	r24, 0x40	; 64
 5ea:	8c bd       	out	0x2c, r24	; 44
 5ec:	08 95       	ret

000005ee <bufferInit>:
 5ee:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <read_index>
 5f2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <write_index>
 5f6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <buffer_length>
 5fa:	e9 e2       	ldi	r30, 0x29	; 41
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	10 82       	st	Z, r1
 600:	11 82       	std	Z+1, r1	; 0x01
 602:	08 95       	ret

00000604 <writeBuffer>:
 604:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <buffer_length>
 608:	24 36       	cpi	r18, 0x64	; 100
 60a:	a9 f0       	breq	.+42     	; 0x636 <writeBuffer+0x32>
 60c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <write_index>
 610:	e9 2f       	mov	r30, r25
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	e7 5d       	subi	r30, 0xD7	; 215
 616:	fe 4f       	sbci	r31, 0xFE	; 254
 618:	80 83       	st	Z, r24
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	89 0f       	add	r24, r25
 61e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <write_index>
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <buffer_length>
 628:	84 36       	cpi	r24, 0x64	; 100
 62a:	41 f4       	brne	.+16     	; 0x63c <writeBuffer+0x38>
 62c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <write_index>
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	08 95       	ret
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	08 95       	ret
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	08 95       	ret

00000642 <__vector_3>:
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
 664:	1a 9b       	sbis	0x03, 2	; 3
 666:	0b c0       	rjmp	.+22     	; 0x67e <__vector_3+0x3c>
 668:	1f 9b       	sbis	0x03, 7	; 3
 66a:	09 c0       	rjmp	.+18     	; 0x67e <__vector_3+0x3c>
 66c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <spi_busy>
 670:	81 11       	cpse	r24, r1
 672:	05 c0       	rjmp	.+10     	; 0x67e <__vector_3+0x3c>
 674:	f8 94       	cli
 676:	8e b5       	in	r24, 0x2e	; 46
 678:	c5 df       	rcall	.-118    	; 0x604 <writeBuffer>
 67a:	1e bc       	out	0x2e, r1	; 46
 67c:	78 94       	sei
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <writeSpi>:

void writeSpi(uint8_t instr, uint8_t data){
	while(spi_busy);
 6a0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <spi_busy>
 6a4:	91 11       	cpse	r25, r1
 6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <writeSpi>
	
	cli();
 6a8:	f8 94       	cli
		
	spi_busy = 1;
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <spi_busy>
	SPSR;
 6b0:	9d b5       	in	r25, 0x2d	; 45
	SPDR = instr;
 6b2:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);//set INT low
 6b4:	85 b1       	in	r24, 0x05	; 5
 6b6:	8f 77       	andi	r24, 0x7F	; 127
 6b8:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 6ba:	84 b1       	in	r24, 0x04	; 4
 6bc:	80 68       	ori	r24, 0x80	; 128
 6be:	84 b9       	out	0x04, r24	; 4
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
 6c0:	0d b4       	in	r0, 0x2d	; 45
 6c2:	07 fe       	sbrs	r0, 7
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <writeSpi+0x20>
 6c6:	1a 9b       	sbis	0x03, 2	; 3
 6c8:	fb cf       	rjmp	.-10     	; 0x6c0 <writeSpi+0x20>
	
	SPDR = data;
 6ca:	6e bd       	out	0x2e, r22	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
 6cc:	0d b4       	in	r0, 0x2d	; 45
 6ce:	07 fe       	sbrs	r0, 7
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <writeSpi+0x2c>
 6d2:	1a 9b       	sbis	0x03, 2	; 3
 6d4:	fb cf       	rjmp	.-10     	; 0x6cc <writeSpi+0x2c>
	
	PORTB &= ~(1<<PORTB7); //set INT high
 6d6:	85 b1       	in	r24, 0x05	; 5
 6d8:	8f 77       	andi	r24, 0x7F	; 127
 6da:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 6dc:	84 b1       	in	r24, 0x04	; 4
 6de:	8f 77       	andi	r24, 0x7F	; 127
 6e0:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	sei();
 6e2:	78 94       	sei
	spi_busy = 0;	
 6e4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <spi_busy>
 6e8:	08 95       	ret

000006ea <writeSpiBuffer>:
}

void writeSpiBuffer(uint8_t instr, uint8_t* data, uint8_t length){
	
	while(spi_busy || !(PINB & 1<<PINB7));
 6ea:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <spi_busy>
 6ee:	91 11       	cpse	r25, r1
 6f0:	fc cf       	rjmp	.-8      	; 0x6ea <writeSpiBuffer>
 6f2:	1f 9b       	sbis	0x03, 7	; 3
 6f4:	fa cf       	rjmp	.-12     	; 0x6ea <writeSpiBuffer>
	spi_busy = 1; //set global busy flag
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <spi_busy>
	
	cli();
 6fc:	f8 94       	cli
	
	SPSR;		//clearing spif flag
 6fe:	9d b5       	in	r25, 0x2d	; 45
	SPDR = instr;		//set instr
 700:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);	//set INT low
 702:	85 b1       	in	r24, 0x05	; 5
 704:	8f 77       	andi	r24, 0x7F	; 127
 706:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 708:	84 b1       	in	r24, 0x04	; 4
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	84 b9       	out	0x04, r24	; 4

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
 70e:	0d b4       	in	r0, 0x2d	; 45
 710:	07 fe       	sbrs	r0, 7
 712:	fd cf       	rjmp	.-6      	; 0x70e <writeSpiBuffer+0x24>
 714:	1a 9b       	sbis	0x03, 2	; 3
 716:	fb cf       	rjmp	.-10     	; 0x70e <writeSpiBuffer+0x24>
	SPDR = length;
 718:	4e bd       	out	0x2e, r20	; 46
	
	for(int i=0; i<length; i++){
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0b c0       	rjmp	.+22     	; 0x736 <writeSpiBuffer+0x4c>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
 720:	0d b4       	in	r0, 0x2d	; 45
 722:	07 fe       	sbrs	r0, 7
 724:	fd cf       	rjmp	.-6      	; 0x720 <writeSpiBuffer+0x36>
 726:	1a 9b       	sbis	0x03, 2	; 3
 728:	fb cf       	rjmp	.-10     	; 0x720 <writeSpiBuffer+0x36>
		SPDR = data[i];
 72a:	fb 01       	movw	r30, r22
 72c:	e8 0f       	add	r30, r24
 72e:	f9 1f       	adc	r31, r25
 730:	20 81       	ld	r18, Z
 732:	2e bd       	out	0x2e, r18	; 46

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
	SPDR = length;
	
	for(int i=0; i<length; i++){
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	24 2f       	mov	r18, r20
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	82 17       	cp	r24, r18
 73c:	93 07       	cpc	r25, r19
 73e:	84 f3       	brlt	.-32     	; 0x720 <writeSpiBuffer+0x36>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
		SPDR = data[i];
	}
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2));
 740:	0d b4       	in	r0, 0x2d	; 45
 742:	07 fe       	sbrs	r0, 7
 744:	fd cf       	rjmp	.-6      	; 0x740 <writeSpiBuffer+0x56>
 746:	1a 9b       	sbis	0x03, 2	; 3
 748:	fb cf       	rjmp	.-10     	; 0x740 <writeSpiBuffer+0x56>
	PORTB &= ~(1<<PORTB7); //set INT high
 74a:	85 b1       	in	r24, 0x05	; 5
 74c:	8f 77       	andi	r24, 0x7F	; 127
 74e:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 750:	84 b1       	in	r24, 0x04	; 4
 752:	8f 77       	andi	r24, 0x7F	; 127
 754:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	sei();
 756:	78 94       	sei
	spi_busy = 0;
 758:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <spi_busy>
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>

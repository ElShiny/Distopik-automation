
Led ring ACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  0080011e  0080011e  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000130e  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abd  00000000  00000000  00001b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128a  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006c7e  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ab  00000000  00000000  0000a7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000aea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c7b  00000000  00000000  0000af7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
   2:	ad c0       	rjmp	.+346    	; 0x15e <__bad_interrupt>
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
   6:	e7 c2       	rjmp	.+1486   	; 0x5d6 <__vector_3>
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	a9 c0       	rjmp	.+338    	; 0x15e <__bad_interrupt>
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	a7 c0       	rjmp	.+334    	; 0x15e <__bad_interrupt>
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	a5 c0       	rjmp	.+330    	; 0x15e <__bad_interrupt>
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	a3 c0       	rjmp	.+326    	; 0x15e <__bad_interrupt>
  18:	50 c1       	rjmp	.+672    	; 0x2ba <__vector_12>
  1a:	a1 c0       	rjmp	.+322    	; 0x15e <__bad_interrupt>
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	9f c0       	rjmp	.+318    	; 0x15e <__bad_interrupt>
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	9d c0       	rjmp	.+314    	; 0x15e <__bad_interrupt>
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	9b c0       	rjmp	.+310    	; 0x15e <__bad_interrupt>

00000028 <__trampolines_end>:
  28:	ff 38       	cpi	r31, 0x8F	; 143
  2a:	28 37       	cpi	r18, 0x78	; 120
  2c:	18 ff       	.word	0xff18	; ????
  2e:	27 34       	cpi	r18, 0x47	; 71
  30:	08 39       	cpi	r16, 0x98	; 152
  32:	ff ff       	.word	0xffff	; ????
  34:	17 ff       	sbrs	r17, 7
  36:	24 0d       	add	r18, r4
  38:	78 ff       	.word	0xff78	; ????
  3a:	29 36       	cpi	r18, 0x69	; 105
  3c:	ff ff       	.word	0xffff	; ????
  3e:	ff 35       	cpi	r31, 0x5F	; 95
  40:	07 ff       	sbrs	r16, 7
  42:	ff ff       	.word	0xffff	; ????
  44:	14 13       	cpse	r17, r20
  46:	7d 12       	cpse	r7, r29
  48:	68 69       	ori	r22, 0x98	; 152
  4a:	ff ff       	.word	0xffff	; ????
  4c:	19 6a       	ori	r17, 0xA9	; 169
  4e:	26 ff       	sbrs	r18, 6
  50:	ff 3a       	cpi	r31, 0xAF	; 175
  52:	ff ff       	.word	0xffff	; ????
  54:	ff ff       	.word	0xffff	; ????
  56:	25 0e       	add	r2, r21
  58:	77 76       	andi	r23, 0x67	; 103
  5a:	ff ff       	.word	0xffff	; ????
  5c:	ff 6b       	ori	r31, 0xBF	; 191
  5e:	ff ff       	.word	0xffff	; ????
  60:	04 ff       	sbrs	r16, 4
  62:	03 ff       	sbrs	r16, 3
  64:	6d 6c       	ori	r22, 0xCD	; 205
  66:	02 01       	movw	r0, r4
  68:	58 ff       	.word	0xff58	; ????
  6a:	59 ff       	.word	0xff59	; ????
  6c:	ff ff       	.word	0xffff	; ????
  6e:	ff 33       	cpi	r31, 0x3F	; 63
  70:	09 0a       	sbc	r0, r25
  72:	5a ff       	.word	0xff5a	; ????
  74:	16 0b       	sbc	r17, r22
  76:	ff 0c       	add	r15, r15
  78:	ff ff       	.word	0xffff	; ????
  7a:	2a 2b       	or	r18, r26
  7c:	ff ff       	.word	0xffff	; ????
  7e:	ff ff       	.word	0xffff	; ????
  80:	ff ff       	.word	0xffff	; ????
  82:	ff ff       	.word	0xffff	; ????
  84:	15 ff       	sbrs	r17, 5
  86:	7e 7f       	andi	r23, 0xFE	; 254
  88:	67 ff       	sbrs	r22, 7
  8a:	66 ff       	sbrs	r22, 6
  8c:	ff ff       	.word	0xffff	; ????
  8e:	ff ff       	.word	0xffff	; ????
  90:	ff ff       	.word	0xffff	; ????
  92:	5b ff       	.word	0xff5b	; ????
  94:	ff ff       	.word	0xffff	; ????
  96:	ff ff       	.word	0xffff	; ????
  98:	74 75       	andi	r23, 0x54	; 84
  9a:	ff ff       	.word	0xffff	; ????
  9c:	73 ff       	sbrs	r23, 3
  9e:	ff ff       	.word	0xffff	; ????
  a0:	5d 5e       	subi	r21, 0xED	; 237
  a2:	5c ff       	.word	0xff5c	; ????
  a4:	72 5f       	subi	r23, 0xF2	; 242
  a6:	71 00       	.word	0x0071	; ????
  a8:	48 47       	sbci	r20, 0x78	; 120
  aa:	ff 44       	sbci	r31, 0x4F	; 79
  ac:	49 ff       	.word	0xff49	; ????
  ae:	ff 1d       	adc	r31, r15
  b0:	ff 46       	sbci	r31, 0x6F	; 111
  b2:	ff 45       	sbci	r31, 0x5F	; 95
  b4:	ff ff       	.word	0xffff	; ????
  b6:	23 22       	and	r2, r19
  b8:	79 ff       	.word	0xff79	; ????
  ba:	7a ff       	.word	0xff7a	; ????
  bc:	4a ff       	.word	0xff4a	; ????
  be:	ff 1e       	adc	r15, r31
  c0:	06 ff       	sbrs	r16, 6
  c2:	7b ff       	.word	0xff7b	; ????
  c4:	ff ff       	.word	0xffff	; ????
  c6:	7c 11       	cpse	r23, r12
  c8:	ff ff       	.word	0xffff	; ????
  ca:	ff 43       	sbci	r31, 0x3F	; 63
  cc:	1a ff       	.word	0xff1a	; ????
  ce:	1b 1c       	adc	r1, r11
  d0:	ff 3b       	cpi	r31, 0xBF	; 191
  d2:	ff ff       	.word	0xffff	; ????
  d4:	ff ff       	.word	0xffff	; ????
  d6:	ff 0f       	add	r31, r31
  d8:	ff ff       	.word	0xffff	; ????
  da:	ff ff       	.word	0xffff	; ????
  dc:	ff ff       	.word	0xffff	; ????
  de:	ff ff       	.word	0xffff	; ????
  e0:	05 ff       	sbrs	r16, 5
  e2:	ff ff       	.word	0xffff	; ????
  e4:	6e ff       	.word	0xff6e	; ????
  e6:	6f 10       	cpse	r6, r15
  e8:	57 54       	subi	r21, 0x47	; 71
  ea:	ff 2d       	mov	r31, r15
  ec:	56 55       	subi	r21, 0x56	; 86
  ee:	ff 32       	cpi	r31, 0x2F	; 47
  f0:	ff ff       	.word	0xffff	; ????
  f2:	ff 2e       	mov	r15, r31
  f4:	ff ff       	.word	0xffff	; ????
  f6:	ff 21       	and	r31, r15
  f8:	ff 53       	subi	r31, 0x3F	; 63
  fa:	ff 2c       	mov	r15, r15
  fc:	4b ff       	.word	0xff4b	; ????
  fe:	ff 1f       	adc	r31, r31
 100:	ff ff       	.word	0xffff	; ????
 102:	ff ff       	.word	0xffff	; ????
 104:	ff ff       	.word	0xffff	; ????
 106:	ff 20       	and	r15, r15
 108:	64 3d       	cpi	r22, 0xD4	; 212
 10a:	65 42       	sbci	r22, 0x25	; 37
 10c:	ff 3e       	cpi	r31, 0xEF	; 239
 10e:	ff 31       	cpi	r31, 0x1F	; 31
 110:	63 3c       	cpi	r22, 0xC3	; 195
 112:	ff 2f       	mov	r31, r31
 114:	ff ff       	.word	0xffff	; ????
 116:	ff 30       	cpi	r31, 0x0F	; 15
 118:	4d 52       	subi	r20, 0x2D	; 45
 11a:	4e 41       	sbci	r20, 0x1E	; 30
 11c:	4c 3f       	cpi	r20, 0xFC	; 252
 11e:	ff 40       	sbci	r31, 0x0F	; 15
 120:	62 51       	subi	r22, 0x12	; 18
 122:	4f 50       	subi	r20, 0x0F	; 15
 124:	61 60       	ori	r22, 0x01	; 1
 126:	70 ff       	sbrs	r23, 0

00000128 <__ctors_end>:
 128:	11 24       	eor	r1, r1
 12a:	1f be       	out	0x3f, r1	; 63
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	d2 e0       	ldi	r29, 0x02	; 2
 130:	de bf       	out	0x3e, r29	; 62
 132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
 134:	11 e0       	ldi	r17, 0x01	; 1
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	e2 e3       	ldi	r30, 0x32	; 50
 13c:	f6 e0       	ldi	r31, 0x06	; 6
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
 140:	05 90       	lpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	ae 31       	cpi	r26, 0x1E	; 30
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	ae e1       	ldi	r26, 0x1E	; 30
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	ab 38       	cpi	r26, 0x8B	; 139
 156:	b2 07       	cpc	r27, r18
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	ef d1       	rcall	.+990    	; 0x53a <main>
 15c:	68 c2       	rjmp	.+1232   	; 0x62e <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <isBitSet>:
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1);
	
	PORTD |= 1<<ACE_EN;
	
	return raw_val;
}
 160:	86 23       	and	r24, r22
 162:	11 f0       	breq	.+4      	; 0x168 <isBitSet+0x8>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret

0000016c <readACEQuick>:

uint8_t ACETransform(uint8_t val){
	return encoderMap[val];
}

uint8_t readACEQuick(void){
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	PORTD &= ~(1<<ACE_EN);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	8b b9       	out	0x0b, r24	; 11
	asm("nop\n\t"
 176:	00 00       	nop
 178:	00 00       	nop
 17a:	00 00       	nop
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 17c:	86 b1       	in	r24, 0x06	; 6
 17e:	60 e8       	ldi	r22, 0x80	; 128
 180:	ef df       	rcall	.-34     	; 0x160 <isBitSet>
 182:	c8 2f       	mov	r28, r24
 184:	d0 e0       	ldi	r29, 0x00	; 0
 186:	d6 95       	lsr	r29
 188:	dc 2f       	mov	r29, r28
 18a:	cc 27       	eor	r28, r28
 18c:	d7 95       	ror	r29
 18e:	c7 95       	ror	r28
 190:	86 b1       	in	r24, 0x06	; 6
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	e5 df       	rcall	.-54     	; 0x160 <isBitSet>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	00 24       	eor	r0, r0
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	07 94       	ror	r0
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	07 94       	ror	r0
 1a6:	98 2f       	mov	r25, r24
 1a8:	80 2d       	mov	r24, r0
 1aa:	c8 2b       	or	r28, r24
 1ac:	d9 2b       	or	r29, r25
 1ae:	86 b1       	in	r24, 0x06	; 6
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	d6 df       	rcall	.-84     	; 0x160 <isBitSet>
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	82 95       	swap	r24
 1bc:	92 95       	swap	r25
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	98 27       	eor	r25, r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	98 27       	eor	r25, r24
 1c6:	c8 2b       	or	r28, r24
 1c8:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 1ca:	86 b1       	in	r24, 0x06	; 6
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	c8 df       	rcall	.-112    	; 0x160 <isBitSet>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	82 95       	swap	r24
 1d4:	92 95       	swap	r25
 1d6:	90 7f       	andi	r25, 0xF0	; 240
 1d8:	98 27       	eor	r25, r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	98 27       	eor	r25, r24
uint8_t readACEQuick(void){
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 1de:	c8 2b       	or	r28, r24
 1e0:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 1e2:	89 b1       	in	r24, 0x09	; 9
 1e4:	60 e4       	ldi	r22, 0x40	; 64
 1e6:	bc df       	rcall	.-136    	; 0x160 <isBitSet>
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	c8 2b       	or	r28, r24
 1f8:	d9 2b       	or	r29, r25
 1fa:	89 b1       	in	r24, 0x09	; 9
 1fc:	60 e8       	ldi	r22, 0x80	; 128
 1fe:	b0 df       	rcall	.-160    	; 0x160 <isBitSet>
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	c8 2b       	or	r28, r24
 20c:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 20e:	83 b1       	in	r24, 0x03	; 3
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	a6 df       	rcall	.-180    	; 0x160 <isBitSet>
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 21a:	c8 2b       	or	r28, r24
 21c:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 21e:	83 b1       	in	r24, 0x03	; 3
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	9e df       	rcall	.-196    	; 0x160 <isBitSet>
 224:	fe 01       	movw	r30, r28
 226:	e8 2b       	or	r30, r24
uint8_t readACEQuick(void){
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 228:	e8 5d       	subi	r30, 0xD8	; 216
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	84 91       	lpm	r24, Z
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
	
	PORTD |= 1<<ACE_EN;
 22e:	9b b1       	in	r25, 0x0b	; 11
 230:	98 60       	ori	r25, 0x08	; 8
 232:	9b b9       	out	0x0b, r25	; 11
	return val;
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <ACEInit>:
int cnt = 0;


void ACEInit(void){
	
	DDRB &= ~(0x03); //set ace pins on portx to input
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	8c 7f       	andi	r24, 0xFC	; 252
 23e:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(0x87);
 240:	87 b1       	in	r24, 0x07	; 7
 242:	88 77       	andi	r24, 0x78	; 120
 244:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x08; //set EN to output
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= 1<<ACE_EN; 
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	8b b9       	out	0x0b, r24	; 11
	
	TCCR0A = 1<<CTC0|1<<CS02|1<<CS00; //timer enable
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	85 bd       	out	0x25, r24	; 37
	OCR0A = 78;			//10 ms delay
 254:	8e e4       	ldi	r24, 0x4E	; 78
 256:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1<<OCIE0A; //timer interrupt
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
	TCNT0 = 0;			//empty timer counter
 25e:	16 bc       	out	0x26, r1	; 38
	
	ace_val_old = readACEQuick();
 260:	85 df       	rcall	.-246    	; 0x16c <readACEQuick>
 262:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ace_val_old>
 266:	08 95       	ret

00000268 <absoluteToRelative>:
uint8_t isBitSet(uint8_t reg, uint8_t pin){
	if (reg & pin) return 0;
	else return 1;
}

void absoluteToRelative(uint8_t *old_val, uint8_t *new_val, int *save){
 268:	fb 01       	movw	r30, r22
	
	int delta = 0;
	
	if(*old_val > 117 && *new_val < 10) delta = *new_val - *old_val + 128;		//corrections for zero crossing
 26a:	dc 01       	movw	r26, r24
 26c:	6c 91       	ld	r22, X
 26e:	66 37       	cpi	r22, 0x76	; 118
 270:	48 f0       	brcs	.+18     	; 0x284 <absoluteToRelative+0x1c>
 272:	20 81       	ld	r18, Z
 274:	2a 30       	cpi	r18, 0x0A	; 10
 276:	30 f4       	brcc	.+12     	; 0x284 <absoluteToRelative+0x1c>
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	26 1b       	sub	r18, r22
 27c:	31 09       	sbc	r19, r1
 27e:	20 58       	subi	r18, 0x80	; 128
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <absoluteToRelative+0x3a>
	else if(*old_val < 15 && *new_val > 110) delta = *new_val - *old_val - 128;
 284:	6f 30       	cpi	r22, 0x0F	; 15
 286:	48 f4       	brcc	.+18     	; 0x29a <absoluteToRelative+0x32>
 288:	20 81       	ld	r18, Z
 28a:	2f 36       	cpi	r18, 0x6F	; 111
 28c:	30 f0       	brcs	.+12     	; 0x29a <absoluteToRelative+0x32>
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	26 1b       	sub	r18, r22
 292:	31 09       	sbc	r19, r1
 294:	20 58       	subi	r18, 0x80	; 128
 296:	31 09       	sbc	r19, r1
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <absoluteToRelative+0x3a>
	else delta = *new_val - *old_val;
 29a:	20 81       	ld	r18, Z
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	26 1b       	sub	r18, r22
 2a0:	31 09       	sbc	r19, r1
	
	*save = *save + delta;	
 2a2:	da 01       	movw	r26, r20
 2a4:	6d 91       	ld	r22, X+
 2a6:	7c 91       	ld	r23, X
 2a8:	11 97       	sbiw	r26, 0x01	; 1
 2aa:	26 0f       	add	r18, r22
 2ac:	37 1f       	adc	r19, r23
 2ae:	2d 93       	st	X+, r18
 2b0:	3c 93       	st	X, r19
	
	*old_val = *new_val;
 2b2:	20 81       	ld	r18, Z
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
 2b8:	08 95       	ret

000002ba <__vector_12>:
	
}


ISR(TIMER0_COMPA_vect){
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	
	if(cnt == 0){
 2e4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 2e8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	a1 f4       	brne	.+40     	; 0x318 <__stack+0x19>
		ace_val_new = readACEQuick();
 2f0:	3d df       	rcall	.-390    	; 0x16c <readACEQuick>
 2f2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ace_val_new>
		absoluteToRelative(&ace_val_old, &ace_val_new, &ace_val);
 2f6:	42 e2       	ldi	r20, 0x22	; 34
 2f8:	51 e0       	ldi	r21, 0x01	; 1
 2fa:	61 e2       	ldi	r22, 0x21	; 33
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	80 e2       	ldi	r24, 0x20	; 32
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	b2 df       	rcall	.-156    	; 0x268 <absoluteToRelative>
		cnt ++;
 304:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 308:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 312:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 316:	32 c0       	rjmp	.+100    	; 0x37c <__stack+0x7d>
	}
	
	else if(cnt == 1){
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	81 f5       	brne	.+96     	; 0x37c <__stack+0x7d>
		int led = ((ace_val>>2)*15)>>5;
 31c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ace_val>
 320:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ace_val+0x1>
 324:	95 95       	asr	r25
 326:	87 95       	ror	r24
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	8c 01       	movw	r16, r24
 32e:	02 95       	swap	r16
 330:	12 95       	swap	r17
 332:	10 7f       	andi	r17, 0xF0	; 240
 334:	10 27       	eor	r17, r16
 336:	00 7f       	andi	r16, 0xF0	; 240
 338:	10 27       	eor	r17, r16
 33a:	08 1b       	sub	r16, r24
 33c:	19 0b       	sbc	r17, r25
 33e:	15 95       	asr	r17
 340:	07 95       	ror	r16
 342:	15 95       	asr	r17
 344:	07 95       	ror	r16
 346:	15 95       	asr	r17
 348:	07 95       	ror	r16
 34a:	15 95       	asr	r17
 34c:	07 95       	ror	r16
 34e:	15 95       	asr	r17
 350:	07 95       	ror	r16
				
		for(int i = 0; i<30; i++){
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	d0 e0       	ldi	r29, 0x00	; 0
 356:	0b c0       	rjmp	.+22     	; 0x36e <__stack+0x6f>
			if(i<=led)setLED(i, 0b001100);
 358:	0c 17       	cp	r16, r28
 35a:	1d 07       	cpc	r17, r29
 35c:	24 f0       	brlt	.+8      	; 0x366 <__stack+0x67>
 35e:	6c e0       	ldi	r22, 0x0C	; 12
 360:	8c 2f       	mov	r24, r28
 362:	ac d0       	rcall	.+344    	; 0x4bc <setLED>
 364:	03 c0       	rjmp	.+6      	; 0x36c <__stack+0x6d>
			else setLED(i, 0b010000);
 366:	60 e1       	ldi	r22, 0x10	; 16
 368:	8c 2f       	mov	r24, r28
 36a:	a8 d0       	rcall	.+336    	; 0x4bc <setLED>
	}
	
	else if(cnt == 1){
		int led = ((ace_val>>2)*15)>>5;
				
		for(int i = 0; i<30; i++){
 36c:	21 96       	adiw	r28, 0x01	; 1
 36e:	ce 31       	cpi	r28, 0x1E	; 30
 370:	d1 05       	cpc	r29, r1
 372:	94 f3       	brlt	.-28     	; 0x358 <__stack+0x59>
			if(i<=led)setLED(i, 0b001100);
			else setLED(i, 0b010000);
		}
		cnt = 0;
 374:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
 378:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	}


 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <I2CInit>:
#define BITRATE 2       // Hardware I2C bitrate// 2 for 400kHz, 32 for 100kHz
#define PRESCALER 0		// SET PRESCALER TO 1


void I2CInit(void){
  TWBR = BITRATE;
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
  TWSR &= ~(0x2 & PRESCALER);
 3ac:	e9 eb       	ldi	r30, 0xB9	; 185
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 83       	st	Z, r24
 3b4:	08 95       	ret

000003b6 <I2CStart>:
}

// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
 3b6:	ec eb       	ldi	r30, 0xBC	; 188
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	90 81       	ld	r25, Z
 3bc:	94 6a       	ori	r25, 0xA4	; 164
 3be:	90 83       	st	Z, r25
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
 3c0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3c4:	99 23       	and	r25, r25
 3c6:	e4 f7       	brge	.-8      	; 0x3c0 <I2CStart+0xa>
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 3c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3cc:	98 7f       	andi	r25, 0xF8	; 248
 3ce:	98 30       	cpi	r25, 0x08	; 8
 3d0:	29 f0       	breq	.+10     	; 0x3dc <I2CStart+0x26>
 3d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3d6:	98 7f       	andi	r25, 0xF8	; 248
 3d8:	90 31       	cpi	r25, 0x10	; 16
 3da:	c9 f4       	brne	.+50     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	TWDR = address<<1 | rw;						//write adr+rw
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	86 2b       	or	r24, r22
 3e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
 3e8:	84 e8       	ldi	r24, 0x84	; 132
 3ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));				//wait for send
 3ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3f2:	88 23       	and	r24, r24
 3f4:	e4 f7       	brge	.-8      	; 0x3ee <I2CStart+0x38>
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 3f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3fa:	88 7f       	andi	r24, 0xF8	; 248
 3fc:	88 31       	cpi	r24, 0x18	; 24
 3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 400:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 404:	88 7f       	andi	r24, 0xF8	; 248
 406:	80 34       	cpi	r24, 0x40	; 64
 408:	31 f4       	brne	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	08 95       	ret
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 416:	81 e0       	ldi	r24, 0x01	; 1
	return 0;

}
 418:	08 95       	ret

0000041a <I2CStop>:

void I2CStop (void) {
	TWCR = 1<<TWINT|1<<TWSTO|1<<TWEN;	// Send STOP
 41a:	84 e9       	ldi	r24, 0x94	; 148
 41c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 420:	08 95       	ret

00000422 <I2CWrite>:
	//while (!(TWCR & (1<<TWINT)));		// Wait for bus to return to idle state
}

uint8_t I2CWrite (uint8_t data) {
  TWDR = data;
 422:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
  TWCR = 1<<TWINT | 1 << TWEN;
 426:	84 e8       	ldi	r24, 0x84	; 132
 428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
  while (!(TWCR & 1<<TWINT));
 42c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 430:	88 23       	and	r24, r24
 432:	e4 f7       	brge	.-8      	; 0x42c <I2CWrite+0xa>
  if((TWSR & 0xF8) != (1<<TWS5|1<<TWS3)) return 1;
 434:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 438:	88 7f       	andi	r24, 0xF8	; 248
 43a:	88 32       	cpi	r24, 0x28	; 40
 43c:	11 f0       	breq	.+4      	; 0x442 <I2CWrite+0x20>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	08 95       	ret
  return 0;
 442:	80 e0       	ldi	r24, 0x00	; 0
  //return (TWSR & 0xF8);
}
 444:	08 95       	ret

00000446 <LEDSetReg>:
	I2CStop();
	if(I2CStart(IS3_ADR, I2C_READ)) return 1;
	uint8_t ret = I2CRead(0);
	I2CStop();
	return ret;
}
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	c8 2f       	mov	r28, r24
 44c:	d6 2f       	mov	r29, r22
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	84 e3       	ldi	r24, 0x34	; 52
 452:	b1 df       	rcall	.-158    	; 0x3b6 <I2CStart>
 454:	81 11       	cpse	r24, r1
 456:	0b c0       	rjmp	.+22     	; 0x46e <LEDSetReg+0x28>
 458:	8c 2f       	mov	r24, r28
 45a:	e3 df       	rcall	.-58     	; 0x422 <I2CWrite>
 45c:	81 11       	cpse	r24, r1
 45e:	09 c0       	rjmp	.+18     	; 0x472 <LEDSetReg+0x2c>
 460:	8d 2f       	mov	r24, r29
 462:	df df       	rcall	.-66     	; 0x422 <I2CWrite>
 464:	c8 2f       	mov	r28, r24
 466:	81 11       	cpse	r24, r1
 468:	06 c0       	rjmp	.+12     	; 0x476 <LEDSetReg+0x30>
 46a:	d7 df       	rcall	.-82     	; 0x41a <I2CStop>
 46c:	05 c0       	rjmp	.+10     	; 0x478 <LEDSetReg+0x32>
 46e:	c1 e0       	ldi	r28, 0x01	; 1
 470:	03 c0       	rjmp	.+6      	; 0x478 <LEDSetReg+0x32>
 472:	c1 e0       	ldi	r28, 0x01	; 1
 474:	01 c0       	rjmp	.+2      	; 0x478 <LEDSetReg+0x32>
 476:	c1 e0       	ldi	r28, 0x01	; 1
 478:	8c 2f       	mov	r24, r28
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <LEDInit>:
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	6e ea       	ldi	r22, 0xAE	; 174
 486:	8f ec       	ldi	r24, 0xCF	; 207
 488:	de df       	rcall	.-68     	; 0x446 <LEDSetReg>
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	80 ea       	ldi	r24, 0xA0	; 160
 48e:	db df       	rcall	.-74     	; 0x446 <LEDSetReg>
 490:	6e e1       	ldi	r22, 0x1E	; 30
 492:	81 ea       	ldi	r24, 0xA1	; 161
 494:	d8 df       	rcall	.-80     	; 0x446 <LEDSetReg>
 496:	c0 e9       	ldi	r28, 0x90	; 144
 498:	d0 e0       	ldi	r29, 0x00	; 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <LEDInit+0x24>
 49c:	6c e3       	ldi	r22, 0x3C	; 60
 49e:	8c 2f       	mov	r24, r28
 4a0:	d2 df       	rcall	.-92     	; 0x446 <LEDSetReg>
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	cf 39       	cpi	r28, 0x9F	; 159
 4a6:	d1 05       	cpc	r29, r1
 4a8:	cc f3       	brlt	.-14     	; 0x49c <LEDInit+0x1c>
 4aa:	87 b1       	in	r24, 0x07	; 7
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	87 b9       	out	0x07, r24	; 7
 4b0:	88 b1       	in	r24, 0x08	; 8
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	88 b9       	out	0x08, r24	; 8
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <setLED>:

uint8_t setLED(uint8_t led, uint8_t rgb){
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	c6 2f       	mov	r28, r22
	uint8_t led_adr = led_adr_arr[led];
 4c2:	e8 2f       	mov	r30, r24
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	e0 50       	subi	r30, 0x00	; 0
 4c8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ca:	d0 81       	ld	r29, Z
	if(I2CStart(IS3_ADR, I2C_WRITE)) return 1;
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	84 e3       	ldi	r24, 0x34	; 52
 4d0:	72 df       	rcall	.-284    	; 0x3b6 <I2CStart>
 4d2:	81 11       	cpse	r24, r1
 4d4:	2b c0       	rjmp	.+86     	; 0x52c <setLED+0x70>
	if(I2CWrite(led_adr)) return 1;
 4d6:	8d 2f       	mov	r24, r29
 4d8:	a4 df       	rcall	.-184    	; 0x422 <I2CWrite>
 4da:	d8 2f       	mov	r29, r24
 4dc:	81 11       	cpse	r24, r1
 4de:	28 c0       	rjmp	.+80     	; 0x530 <setLED+0x74>
	
	I2CWrite(85*(0x3&rgb));
 4e0:	8c 2f       	mov	r24, r28
 4e2:	83 70       	andi	r24, 0x03	; 3
 4e4:	98 2f       	mov	r25, r24
 4e6:	99 0f       	add	r25, r25
 4e8:	99 0f       	add	r25, r25
 4ea:	89 0f       	add	r24, r25
 4ec:	98 2f       	mov	r25, r24
 4ee:	92 95       	swap	r25
 4f0:	90 7f       	andi	r25, 0xF0	; 240
 4f2:	89 0f       	add	r24, r25
 4f4:	96 df       	rcall	.-212    	; 0x422 <I2CWrite>
	I2CWrite(85*(0x3&(rgb>>2)));
 4f6:	8c 2f       	mov	r24, r28
 4f8:	86 95       	lsr	r24
 4fa:	86 95       	lsr	r24
 4fc:	83 70       	andi	r24, 0x03	; 3
 4fe:	98 2f       	mov	r25, r24
 500:	99 0f       	add	r25, r25
 502:	99 0f       	add	r25, r25
 504:	89 0f       	add	r24, r25
 506:	98 2f       	mov	r25, r24
 508:	92 95       	swap	r25
 50a:	90 7f       	andi	r25, 0xF0	; 240
 50c:	89 0f       	add	r24, r25
 50e:	89 df       	rcall	.-238    	; 0x422 <I2CWrite>
	I2CWrite(85*(0x3&(rgb>>4)));
 510:	c2 95       	swap	r28
 512:	cf 70       	andi	r28, 0x0F	; 15
 514:	c3 70       	andi	r28, 0x03	; 3
 516:	8c 2f       	mov	r24, r28
 518:	88 0f       	add	r24, r24
 51a:	88 0f       	add	r24, r24
 51c:	c8 0f       	add	r28, r24
 51e:	8c 2f       	mov	r24, r28
 520:	82 95       	swap	r24
 522:	80 7f       	andi	r24, 0xF0	; 240
 524:	8c 0f       	add	r24, r28
 526:	7d df       	rcall	.-262    	; 0x422 <I2CWrite>
	
	I2CStop();
 528:	78 df       	rcall	.-272    	; 0x41a <I2CStop>
	return 0;
 52a:	03 c0       	rjmp	.+6      	; 0x532 <setLED+0x76>
	return ret;
}

uint8_t setLED(uint8_t led, uint8_t rgb){
	uint8_t led_adr = led_adr_arr[led];
	if(I2CStart(IS3_ADR, I2C_WRITE)) return 1;
 52c:	d1 e0       	ldi	r29, 0x01	; 1
 52e:	01 c0       	rjmp	.+2      	; 0x532 <setLED+0x76>
	if(I2CWrite(led_adr)) return 1;
 530:	d1 e0       	ldi	r29, 0x01	; 1
	I2CWrite(85*(0x3&(rgb>>2)));
	I2CWrite(85*(0x3&(rgb>>4)));
	
	I2CStop();
	return 0;
 532:	8d 2f       	mov	r24, r29
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <main>:


int main(void)
{
	//softSerialBegin(9600);
	ACEInit();
 53a:	7f de       	rcall	.-770    	; 0x23a <ACEInit>
	I2CInit();
 53c:	34 df       	rcall	.-408    	; 0x3a6 <I2CInit>
	LEDInit();
 53e:	a0 df       	rcall	.-192    	; 0x480 <LEDInit>
	SPIInit();
 540:	0c d0       	rcall	.+24     	; 0x55a <SPIInit>
	bufferInit();
 542:	24 d0       	rcall	.+72     	; 0x58c <bufferInit>
	
	sei();
 544:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	89 e6       	ldi	r24, 0x69	; 105
 54a:	98 e1       	ldi	r25, 0x18	; 24
 54c:	21 50       	subi	r18, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <main+0x12>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x1c>
 556:	00 00       	nop
 558:	f6 cf       	rjmp	.-20     	; 0x546 <main+0xc>

0000055a <SPIInit>:
}


void SPIInit(void){
			
	DDRB &= ~(1<<PINB7); //set HIZ mode
 55a:	84 b1       	in	r24, 0x04	; 4
 55c:	8f 77       	andi	r24, 0x7F	; 127
 55e:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PINB7);
 560:	85 b1       	in	r24, 0x05	; 5
 562:	8f 77       	andi	r24, 0x7F	; 127
 564:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB4; //set MISO output
 566:	84 b1       	in	r24, 0x04	; 4
 568:	80 61       	ori	r24, 0x10	; 16
 56a:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= 1<< DDB6;
 56c:	84 b1       	in	r24, 0x04	; 4
 56e:	80 64       	ori	r24, 0x40	; 64
 570:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0; //interrupt for SS
 572:	e8 e6       	ldi	r30, 0x68	; 104
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	81 60       	ori	r24, 0x01	; 1
 57a:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT2;
 57c:	eb e6       	ldi	r30, 0x6B	; 107
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	84 60       	ori	r24, 0x04	; 4
 584:	80 83       	st	Z, r24
	
	SPCR = 1<<SPE; //enable SPI
 586:	80 e4       	ldi	r24, 0x40	; 64
 588:	8c bd       	out	0x2c, r24	; 44
 58a:	08 95       	ret

0000058c <bufferInit>:
}


void bufferInit(void){
	
	read_index = 0;
 58c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <read_index>
	write_index = 0;
 590:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <write_index>
	buffer_length = 0;
 594:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <buffer_length>
 598:	08 95       	ret

0000059a <writeBuffer>:
}

int writeBuffer(uint8_t val){
	
	if(buffer_length == BUFFER_SIZE) return -1;
 59a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <buffer_length>
 59e:	94 36       	cpi	r25, 0x64	; 100
 5a0:	a1 f0       	breq	.+40     	; 0x5ca <writeBuffer+0x30>
	buffer[write_index++] = val;
 5a2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <write_index>
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	2e 0f       	add	r18, r30
 5aa:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <write_index>
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	e9 5d       	subi	r30, 0xD9	; 217
 5b2:	fe 4f       	sbci	r31, 0xFE	; 254
 5b4:	80 83       	st	Z, r24
	buffer_length++;
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <buffer_length>
	if(write_index == BUFFER_SIZE) write_index = 0;
 5bc:	24 36       	cpi	r18, 0x64	; 100
 5be:	41 f4       	brne	.+16     	; 0x5d0 <writeBuffer+0x36>
 5c0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <write_index>
	return 0;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	08 95       	ret
	buffer_length = 0;
}

int writeBuffer(uint8_t val){
	
	if(buffer_length == BUFFER_SIZE) return -1;
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	08 95       	ret
	buffer[write_index++] = val;
	buffer_length++;
	if(write_index == BUFFER_SIZE) write_index = 0;
	return 0;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
}
 5d4:	08 95       	ret

000005d6 <__vector_3>:
uint8_t read_index;
uint8_t write_index;



ISR(PCINT0_vect){
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31

	if(!(PINB & 1<<PINB2)) return;
 5f8:	1a 9b       	sbis	0x03, 2	; 3
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <__vector_3+0x36>
	cli();
 5fc:	f8 94       	cli
	
	writeBuffer(SPDR);
 5fe:	8e b5       	in	r24, 0x2e	; 46
 600:	cc df       	rcall	.-104    	; 0x59a <writeBuffer>
	PORTB ^= 1<<PORTB6;
 602:	95 b1       	in	r25, 0x05	; 5
 604:	80 e4       	ldi	r24, 0x40	; 64
 606:	89 27       	eor	r24, r25
 608:	85 b9       	out	0x05, r24	; 5
	
	sei();
 60a:	78 94       	sei
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>

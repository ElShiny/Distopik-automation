
Motorised pott.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  00800100  00800100  00000c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b4  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7c  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001052  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00004fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  0000540c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001083  00000000  00000000  00005b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	00 c4       	rjmp	.+2048   	; 0x808 <__vector_3>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	2b c1       	rjmp	.+598    	; 0x270 <__vector_12>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	22 e0       	ldi	r18, 0x02	; 2
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a0 38       	cpi	r26, 0x80	; 128
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	a0 d1       	rcall	.+832    	; 0x386 <main>
  46:	d6 c5       	rjmp	.+2988   	; 0xbf4 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <ADCInit>:
#include <avr/io.h>




void ADCInit(adc_t *adc){
  4a:	fc 01       	movw	r30, r24
	
	ADMUX |= 1<<REFS0 | ADC4D;
  4c:	ac e7       	ldi	r26, 0x7C	; 124
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	9c 91       	ld	r25, X
  52:	94 64       	ori	r25, 0x44	; 68
  54:	9c 93       	st	X, r25
	ADCSRA |= 1<<ADEN | 0b111;
  56:	aa e7       	ldi	r26, 0x7A	; 122
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	9c 91       	ld	r25, X
  5c:	97 68       	ori	r25, 0x87	; 135
  5e:	9c 93       	st	X, r25
	
	DDRD |= 1<<0;//motor sleep
  60:	9a b1       	in	r25, 0x0a	; 10
  62:	91 60       	ori	r25, 0x01	; 1
  64:	9a b9       	out	0x0a, r25	; 10
	//PORTD |= 1<<PORTD0;
	
	DDRB |= 1<<DDB1;//motor en
  66:	94 b1       	in	r25, 0x04	; 4
  68:	92 60       	ori	r25, 0x02	; 2
  6a:	94 b9       	out	0x04, r25	; 4
	//PORTB |= 1<<PORTB1;
	
	DDRB |= 1<<DDB0;//motor smer
  6c:	94 b1       	in	r25, 0x04	; 4
  6e:	91 60       	ori	r25, 0x01	; 1
  70:	94 b9       	out	0x04, r25	; 4
	
	adc->spi_changed = 1;
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	82 87       	std	Z+10, r24	; 0x0a
	adc->pot_pos = 0;
  76:	11 82       	std	Z+1, r1	; 0x01
  78:	10 82       	st	Z, r1
  7a:	08 95       	ret

0000007c <ADCRead>:
}

uint16_t ADCRead(void){
	ADCSRA |= 1<<ADSC;
  7c:	ea e7       	ldi	r30, 0x7A	; 122
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	80 64       	ori	r24, 0x40	; 64
  84:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
  86:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  8a:	84 ff       	sbrs	r24, 4
  8c:	fc cf       	rjmp	.-8      	; 0x86 <ADCRead+0xa>
	ADCSRA |= 1<<ADIF;
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 61       	ori	r24, 0x10	; 16
  96:	80 83       	st	Z, r24
	ADCSRA &= ~(0<<ADIF);
  98:	80 81       	ld	r24, Z
  9a:	80 83       	st	Z, r24
	uint8_t val_low = ADCL;
  9c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
	uint16_t val = ADCH<<8 | val_low;
  a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	98 2f       	mov	r25, r24
  a8:	88 27       	eor	r24, r24
	return val;
}
  aa:	82 2b       	or	r24, r18
  ac:	08 95       	ret

000000ae <MotorRot>:

void MotorRot(uint8_t rotation){
	switch(rotation){
  ae:	88 23       	and	r24, r24
  b0:	19 f0       	breq	.+6      	; 0xb8 <MotorRot+0xa>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	29 f0       	breq	.+10     	; 0xc0 <MotorRot+0x12>
  b6:	08 95       	ret
		case LEFT:
			PORTB |= 1<<PORTB0;
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	85 b9       	out	0x05, r24	; 5
			break;
  be:	08 95       	ret
			
		case RIGHT:
			PORTB &= ~(1<<PORTB0);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <MotorEn>:
			break;
	}
}
void MotorEn(uint8_t en){
	if(!en) PORTD &= ~(1<<PORTD0);
  c8:	81 11       	cpse	r24, r1
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <MotorEn+0xc>
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret
	else PORTD |= 1<<PORTD0;
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	08 95       	ret

000000dc <MovePot>:
}


void MovePot(adc_t *adc, pwm_t *pwm, uint16_t pos){
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	7b 01       	movw	r14, r22
  ec:	8a 01       	movw	r16, r20
	
	if(adc->spi_changed == 0){
  ee:	8a 85       	ldd	r24, Y+10	; 0x0a
  f0:	81 11       	cpse	r24, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <MovePot+0x1c>
		MotorEn(0);
  f4:	e9 df       	rcall	.-46     	; 0xc8 <MotorEn>
		return;
  f6:	37 c0       	rjmp	.+110    	; 0x166 <MovePot+0x8a>
	}
	else MotorEn(1);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	e6 df       	rcall	.-52     	; 0xc8 <MotorEn>

	if(pos < adc->adc_val_new){MotorRot(LEFT);}
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	08 17       	cp	r16, r24
 102:	19 07       	cpc	r17, r25
 104:	10 f4       	brcc	.+4      	; 0x10a <MovePot+0x2e>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	d2 df       	rcall	.-92     	; 0xae <MotorRot>
	if(pos > adc->adc_val_new){MotorRot(RIGHT);}
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	9b 81       	ldd	r25, Y+3	; 0x03
 10e:	80 17       	cp	r24, r16
 110:	91 07       	cpc	r25, r17
 112:	10 f4       	brcc	.+4      	; 0x118 <MovePot+0x3c>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	cb df       	rcall	.-106    	; 0xae <MotorRot>
		
	if(abs(pos - adc->adc_val_new) < 200)OCR1A = 73;
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	98 01       	movw	r18, r16
 11e:	28 1b       	sub	r18, r24
 120:	39 0b       	sbc	r19, r25
 122:	c9 01       	movw	r24, r18
 124:	89 33       	cpi	r24, 0x39	; 57
 126:	3f ef       	ldi	r19, 0xFF	; 255
 128:	93 07       	cpc	r25, r19
 12a:	54 f0       	brlt	.+20     	; 0x140 <MovePot+0x64>
 12c:	88 3c       	cpi	r24, 0xC8	; 200
 12e:	91 05       	cpc	r25, r1
 130:	3c f4       	brge	.+14     	; 0x140 <MovePot+0x64>
 132:	89 e4       	ldi	r24, 0x49	; 73
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 13a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
 13e:	06 c0       	rjmp	.+12     	; 0x14c <MovePot+0x70>
	else OCR1A = 150;
 140:	86 e9       	ldi	r24, 0x96	; 150
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 148:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	
	if(pos == adc->adc_val_new){
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	9b 81       	ldd	r25, Y+3	; 0x03
 150:	08 17       	cp	r16, r24
 152:	19 07       	cpc	r17, r25
 154:	41 f4       	brne	.+16     	; 0x166 <MovePot+0x8a>
		if(pwm->first_time == 1){pwm->first_time = 0;}
 156:	f7 01       	movw	r30, r14
 158:	82 81       	ldd	r24, Z+2	; 0x02
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	09 f4       	brne	.+2      	; 0x160 <MovePot+0x84>
 15e:	12 82       	std	Z+2, r1	; 0x02
		MotorEn(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	b2 df       	rcall	.-156    	; 0xc8 <MotorEn>
		adc->spi_changed = 0;
 164:	1a 86       	std	Y+10, r1	; 0x0a
	}
		
	//MotorEn(1);

}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	08 95       	ret

00000174 <movingAvg>:

int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	db 01       	movw	r26, r22
	//Subtract the oldest number from the prev sum, add the new number
	*ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 182:	cd 90       	ld	r12, X+
 184:	dd 90       	ld	r13, X+
 186:	ed 90       	ld	r14, X+
 188:	fc 90       	ld	r15, X
 18a:	13 97       	sbiw	r26, 0x03	; 3
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	fc 01       	movw	r30, r24
 192:	e4 0f       	add	r30, r20
 194:	f5 1f       	adc	r31, r21
 196:	40 81       	ld	r20, Z
 198:	51 81       	ldd	r21, Z+1	; 0x01
 19a:	05 2e       	mov	r0, r21
 19c:	00 0c       	add	r0, r0
 19e:	66 0b       	sbc	r22, r22
 1a0:	77 0b       	sbc	r23, r23
 1a2:	c4 1a       	sub	r12, r20
 1a4:	d5 0a       	sbc	r13, r21
 1a6:	e6 0a       	sbc	r14, r22
 1a8:	f7 0a       	sbc	r15, r23
 1aa:	a8 01       	movw	r20, r16
 1ac:	01 2e       	mov	r0, r17
 1ae:	00 0c       	add	r0, r0
 1b0:	66 0b       	sbc	r22, r22
 1b2:	77 0b       	sbc	r23, r23
 1b4:	c4 0e       	add	r12, r20
 1b6:	d5 1e       	adc	r13, r21
 1b8:	e6 1e       	adc	r14, r22
 1ba:	f7 1e       	adc	r15, r23
 1bc:	cd 92       	st	X+, r12
 1be:	dd 92       	st	X+, r13
 1c0:	ed 92       	st	X+, r14
 1c2:	fc 92       	st	X, r15
 1c4:	13 97       	sbiw	r26, 0x03	; 3
	//Assign the nextNum to the position in the array
	ptrArrNumbers[pos] = nextNum;
 1c6:	11 83       	std	Z+1, r17	; 0x01
 1c8:	00 83       	st	Z, r16
	//return the average
	return *ptrSum / len;
 1ca:	6d 91       	ld	r22, X+
 1cc:	7d 91       	ld	r23, X+
 1ce:	8d 91       	ld	r24, X+
 1d0:	9c 91       	ld	r25, X
 1d2:	03 2e       	mov	r0, r19
 1d4:	00 0c       	add	r0, r0
 1d6:	44 0b       	sbc	r20, r20
 1d8:	55 0b       	sbc	r21, r21
 1da:	ce d4       	rcall	.+2460   	; 0xb78 <__divmodsi4>
 1dc:	c9 01       	movw	r24, r18
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

000001ec <timersInit>:
	pwm->en = 0;
}

void PWMEnable(pwm_t *pwm){
	TCCR1B |= 1<<CS10;
	pwm->en = 1;
 1ec:	2c e0       	ldi	r18, 0x0C	; 12
 1ee:	25 bd       	out	0x25, r18	; 37
 1f0:	2e e1       	ldi	r18, 0x1E	; 30
 1f2:	27 bd       	out	0x27, r18	; 39
 1f4:	22 e0       	ldi	r18, 0x02	; 2
 1f6:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
 1fa:	16 bc       	out	0x26, r1	; 38
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	fc 01       	movw	r30, r24
 200:	24 83       	std	Z+4, r18	; 0x04
 202:	08 95       	ret

00000204 <PWMInit>:
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	82 e8       	ldi	r24, 0x82	; 130
 20c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 210:	89 e1       	ldi	r24, 0x19	; 25
 212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
 216:	86 e9       	ldi	r24, 0x96	; 150
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fe087>
 21e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fe086>
 222:	8b e4       	ldi	r24, 0x4B	; 75
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 22a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	4b df       	rcall	.-362    	; 0xc8 <MotorEn>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	88 83       	st	Y, r24
 236:	8a 83       	std	Y+2, r24	; 0x02
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <enableTimer>:




void enableTimer(void){
	TIMSK0 |= 1<<OCIE0A;
 23e:	ee e6       	ldi	r30, 0x6E	; 110
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <disableTimer>:
}

void disableTimer(void){
	TIMSK0 &= ~(1<<OCIE0A);
 24a:	ee e6       	ldi	r30, 0x6E	; 110
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8d 7f       	andi	r24, 0xFD	; 253
 252:	80 83       	st	Z, r24
 254:	08 95       	ret

00000256 <enableHSKP>:
}

void enableHSKP(hskp_t *hskp){
	hskp->en = 1;
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	fc 01       	movw	r30, r24
 25a:	24 83       	std	Z+4, r18	; 0x04
 25c:	08 95       	ret

0000025e <disableHSKP>:
}

void disableHSKP(hskp_t *hskp){
	hskp->en = 0;
 25e:	fc 01       	movw	r30, r24
 260:	14 82       	std	Z+4, r1	; 0x04
 262:	08 95       	ret

00000264 <getTick>:
}

uint16_t getTick(hskp_t *hskp){
	return hskp->tick;
 264:	fc 01       	movw	r30, r24
 266:	80 81       	ld	r24, Z
 268:	91 81       	ldd	r25, Z+1	; 0x01
 26a:	a2 81       	ldd	r26, Z+2	; 0x02
 26c:	b3 81       	ldd	r27, Z+3	; 0x03
}
 26e:	08 95       	ret

00000270 <__vector_12>:



ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
 270:	78 94       	sei
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
		
	disableTimer();
 29c:	d6 df       	rcall	.-84     	; 0x24a <disableTimer>
	if(housekp.cnt == 1 && housekp.en){//reading ace values
 29e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <housekp+0x5>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	b9 f5       	brne	.+110    	; 0x314 <__stack+0x15>
 2a6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <housekp+0x4>
 2aa:	88 23       	and	r24, r24
 2ac:	99 f1       	breq	.+102    	; 0x314 <__stack+0x15>
		adc_rot.adc_val_new = ADCRead();
 2ae:	e6 de       	rcall	.-564    	; 0x7c <ADCRead>
 2b0:	cb e6       	ldi	r28, 0x6B	; 107
 2b2:	d1 e0       	ldi	r29, 0x01	; 1
 2b4:	9b 83       	std	Y+3, r25	; 0x03
 2b6:	8a 83       	std	Y+2, r24	; 0x02
		adc_rot.adc_out = movingAvg(arrNumbers, &sum, pos, AVG_LENGTH, adc_rot.adc_val_new);
 2b8:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <pos>
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	8c 01       	movw	r16, r24
 2c0:	22 e3       	ldi	r18, 0x32	; 50
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	71 e0       	ldi	r23, 0x01	; 1
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	53 df       	rcall	.-346    	; 0x174 <movingAvg>
 2ce:	ac 01       	movw	r20, r24
 2d0:	9f 83       	std	Y+7, r25	; 0x07
 2d2:	8e 83       	std	Y+6, r24	; 0x06
		pos++;
 2d4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <pos>
 2d8:	2f 5f       	subi	r18, 0xFF	; 255
 2da:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <pos>
		pos2++;
 2de:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e2:	9f 5f       	subi	r25, 0xFF	; 255
 2e4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (pos >= AVG_LENGTH) pos = 0;
 2e8:	22 33       	cpi	r18, 0x32	; 50
 2ea:	10 f0       	brcs	.+4      	; 0x2f0 <__vector_12+0x80>
 2ec:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <pos>
		if (pos2 >= 5) pos2 = 0;
 2f0:	95 30       	cpi	r25, 0x05	; 5
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <__vector_12+0x88>
 2f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if(adc_rot.adc_out != adc_rot.adc_val_old){
 2f8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <adc_rot+0x4>
 2fc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <adc_rot+0x5>
 300:	48 17       	cp	r20, r24
 302:	59 07       	cpc	r21, r25
 304:	d1 f0       	breq	.+52     	; 0x33a <__stack+0x3b>
			//if(adc_rot.spi_changed == 0)
			adc_rot.adc_changed = 1;
 306:	eb e6       	ldi	r30, 0x6B	; 107
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 87       	std	Z+8, r24	; 0x08
			adc_rot.adc_val_old = adc_rot.adc_out;
 30e:	55 83       	std	Z+5, r21	; 0x05
 310:	44 83       	std	Z+4, r20	; 0x04
 312:	13 c0       	rjmp	.+38     	; 0x33a <__stack+0x3b>
			}
	}
	
	else if(housekp.cnt >= 10 && housekp.en){//setting leds
 314:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <housekp+0x5>
 318:	8a 30       	cpi	r24, 0x0A	; 10
 31a:	78 f0       	brcs	.+30     	; 0x33a <__stack+0x3b>
 31c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <housekp+0x4>
 320:	88 23       	and	r24, r24
 322:	59 f0       	breq	.+22     	; 0x33a <__stack+0x3b>
		MovePot(&adc_rot, &pwm, adc_rot.pot_pos);
 324:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <adc_rot>
 328:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <adc_rot+0x1>
 32c:	6c e7       	ldi	r22, 0x7C	; 124
 32e:	71 e0       	ldi	r23, 0x01	; 1
 330:	8b e6       	ldi	r24, 0x6B	; 107
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	d3 de       	rcall	.-602    	; 0xdc <MovePot>
		housekp.cnt = 0;
 336:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <housekp+0x5>
	}
	enableTimer();
 33a:	81 df       	rcall	.-254    	; 0x23e <enableTimer>
	
	housekp.cnt++;
 33c:	e6 e7       	ldi	r30, 0x76	; 118
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	85 81       	ldd	r24, Z+5	; 0x05
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	85 83       	std	Z+5, r24	; 0x05
	housekp.tick++;
 346:	80 81       	ld	r24, Z
 348:	91 81       	ldd	r25, Z+1	; 0x01
 34a:	a2 81       	ldd	r26, Z+2	; 0x02
 34c:	b3 81       	ldd	r27, Z+3	; 0x03
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	a1 1d       	adc	r26, r1
 352:	b1 1d       	adc	r27, r1
 354:	80 83       	st	Z, r24
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	a2 83       	std	Z+2, r26	; 0x02
 35a:	b3 83       	std	Z+3, r27	; 0x03
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <main>:



int main(void)
{
	MCUSR = 0;//disable watchdog
 386:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	a8 95       	wdr
 38e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 392:	88 61       	ori	r24, 0x18	; 24
 394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 398:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 39c:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	ADCInit(&adc_rot);
 39e:	8b e6       	ldi	r24, 0x6B	; 107
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	53 de       	rcall	.-858    	; 0x4a <ADCInit>
	timersInit(&housekp);
 3a4:	86 e7       	ldi	r24, 0x76	; 118
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	21 df       	rcall	.-446    	; 0x1ec <timersInit>
	SPIInit();
 3aa:	e4 d1       	rcall	.+968    	; 0x774 <SPIInit>
	bufferInit(&buf);
 3ac:	83 e8       	ldi	r24, 0x83	; 131
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	fd d1       	rcall	.+1018   	; 0x7ac <bufferInit>
	PWMInit(&pwm);
 3b2:	8c e7       	ldi	r24, 0x7C	; 124
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	26 df       	rcall	.-436    	; 0x204 <PWMInit>
	
	sei();		
 3b8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	80 e7       	ldi	r24, 0x70	; 112
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x3a>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x44>
 3ca:	00 00       	nop
	
		
		
	while (1){
		
		if(buf.buffer_length){
 3cc:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <buf+0xfa>
 3d0:	88 23       	and	r24, r24
 3d2:	49 f0       	breq	.+18     	; 0x3e6 <main+0x60>
			recieveStateMachine(&spi_s, &adc_rot, &buf, &housekp);
 3d4:	26 e7       	ldi	r18, 0x76	; 118
 3d6:	31 e0       	ldi	r19, 0x01	; 1
 3d8:	43 e8       	ldi	r20, 0x83	; 131
 3da:	51 e0       	ldi	r21, 0x01	; 1
 3dc:	6b e6       	ldi	r22, 0x6B	; 107
 3de:	71 e0       	ldi	r23, 0x01	; 1
 3e0:	8f e7       	ldi	r24, 0x7F	; 127
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	77 d1       	rcall	.+750    	; 0x6d4 <recieveStateMachine>
		}
		
		if(adc_rot.adc_changed && !pwm.first_time){
 3e6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <adc_rot+0x8>
 3ea:	88 23       	and	r24, r24
 3ec:	79 f3       	breq	.-34     	; 0x3cc <main+0x46>
 3ee:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <pwm+0x2>
 3f2:	81 11       	cpse	r24, r1
 3f4:	eb cf       	rjmp	.-42     	; 0x3cc <main+0x46>
			writeSpi(&spi_s, &housekp, 1, adc_rot.adc_out, MAX_TIMEOUT);
 3f6:	cb e6       	ldi	r28, 0x6B	; 107
 3f8:	d1 e0       	ldi	r29, 0x01	; 1
 3fa:	2e 81       	ldd	r18, Y+6	; 0x06
 3fc:	3f 81       	ldd	r19, Y+7	; 0x07
 3fe:	04 ef       	ldi	r16, 0xF4	; 244
 400:	11 e0       	ldi	r17, 0x01	; 1
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	66 e7       	ldi	r22, 0x76	; 118
 406:	71 e0       	ldi	r23, 0x01	; 1
 408:	8f e7       	ldi	r24, 0x7F	; 127
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	74 d2       	rcall	.+1256   	; 0x8f6 <writeSpi>
			adc_rot.adc_changed = 0;
 40e:	18 86       	std	Y+8, r1	; 0x08
 410:	dd cf       	rjmp	.-70     	; 0x3cc <main+0x46>

00000412 <uint4TOuint16>:
			
	return 0;
}

uint16_t uint4TOuint16(uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3){
	return ((uint16_t)data3<<12)|((uint16_t)data2<<8)|((uint16_t)data1<<4)|(uint16_t)data0;
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	32 2f       	mov	r19, r18
 416:	22 27       	eor	r18, r18
 418:	32 95       	swap	r19
 41a:	30 7f       	andi	r19, 0xF0	; 240
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	54 2f       	mov	r21, r20
 420:	44 27       	eor	r20, r20
 422:	24 2b       	or	r18, r20
 424:	35 2b       	or	r19, r21
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	62 95       	swap	r22
 42a:	72 95       	swap	r23
 42c:	70 7f       	andi	r23, 0xF0	; 240
 42e:	76 27       	eor	r23, r22
 430:	60 7f       	andi	r22, 0xF0	; 240
 432:	76 27       	eor	r23, r22
 434:	62 2b       	or	r22, r18
 436:	73 2b       	or	r23, r19
}
 438:	9b 01       	movw	r18, r22
 43a:	28 2b       	or	r18, r24
 43c:	c9 01       	movw	r24, r18
 43e:	08 95       	ret

00000440 <assembleU16>:

int32_t assembleU16(buffer_t *buffer, hskp_t *hskp, int tick ){
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	ec 01       	movw	r28, r24
 44e:	7b 01       	movw	r14, r22
 450:	8a 01       	movw	r16, r20
	uint8_t data0,data1,data2,data3;
	
	while(readBufferLength(buffer) < 5){if(getTick(hskp)>(tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 452:	0e c0       	rjmp	.+28     	; 0x470 <assembleU16+0x30>
 454:	c7 01       	movw	r24, r14
 456:	06 df       	rcall	.-500    	; 0x264 <getTick>
 458:	98 01       	movw	r18, r16
 45a:	2c 50       	subi	r18, 0x0C	; 12
 45c:	3e 4f       	sbci	r19, 0xFE	; 254
 45e:	28 17       	cp	r18, r24
 460:	39 07       	cpc	r19, r25
 462:	30 f4       	brcc	.+12     	; 0x470 <assembleU16+0x30>
 464:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 468:	6f ef       	ldi	r22, 0xFF	; 255
 46a:	7f ef       	ldi	r23, 0xFF	; 255
 46c:	cb 01       	movw	r24, r22
 46e:	24 c0       	rjmp	.+72     	; 0x4b8 <assembleU16+0x78>
 470:	ce 01       	movw	r24, r28
 472:	3b d2       	rcall	.+1142   	; 0x8ea <readBufferLength>
 474:	05 97       	sbiw	r24, 0x05	; 5
 476:	74 f3       	brlt	.-36     	; 0x454 <assembleU16+0x14>
	data0 = readBuffer(buffer);
 478:	ce 01       	movw	r24, r28
 47a:	14 d2       	rcall	.+1064   	; 0x8a4 <readBuffer>
 47c:	18 2f       	mov	r17, r24
	data1 = readBuffer(buffer);
 47e:	ce 01       	movw	r24, r28
 480:	11 d2       	rcall	.+1058   	; 0x8a4 <readBuffer>
 482:	08 2f       	mov	r16, r24
	data2 = readBuffer(buffer);
 484:	ce 01       	movw	r24, r28
 486:	0e d2       	rcall	.+1052   	; 0x8a4 <readBuffer>
 488:	f8 2e       	mov	r15, r24
	data3 = readBuffer(buffer);
 48a:	ce 01       	movw	r24, r28
 48c:	0b d2       	rcall	.+1046   	; 0x8a4 <readBuffer>
 48e:	e8 2e       	mov	r14, r24
	if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 490:	ce 01       	movw	r24, r28
 492:	08 d2       	rcall	.+1040   	; 0x8a4 <readBuffer>
 494:	81 3a       	cpi	r24, 0xA1	; 161
 496:	91 05       	cpc	r25, r1
 498:	39 f0       	breq	.+14     	; 0x4a8 <assembleU16+0x68>
 49a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 49e:	6e ef       	ldi	r22, 0xFE	; 254
 4a0:	7f ef       	ldi	r23, 0xFF	; 255
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <assembleU16+0x78>
	return uint4TOuint16(data0, data1, data2, data3);
 4a8:	2e 2d       	mov	r18, r14
 4aa:	4f 2d       	mov	r20, r15
 4ac:	60 2f       	mov	r22, r16
 4ae:	81 2f       	mov	r24, r17
 4b0:	b0 df       	rcall	.-160    	; 0x412 <uint4TOuint16>
 4b2:	bc 01       	movw	r22, r24
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	08 95       	ret

000004c6 <parseData>:


int parse_tick;
enum setting_states_e current_state = 0;

int parseData(spi_t *spi, adc_t *adc, buffer_t *buffer, hskp_t *hskp, uint8_t cmd){
 4c6:	af 92       	push	r10
 4c8:	bf 92       	push	r11
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	5b 01       	movw	r10, r22
 4dc:	ea 01       	movw	r28, r20
 4de:	79 01       	movw	r14, r18
	
	int start_tick = getTick(hskp);
 4e0:	c9 01       	movw	r24, r18
 4e2:	c0 de       	rcall	.-640    	; 0x264 <getTick>
 4e4:	6c 01       	movw	r12, r24
	uint32_t data;
	
	switch(cmd){
 4e6:	04 36       	cpi	r16, 0x64	; 100
 4e8:	09 f4       	brne	.+2      	; 0x4ec <parseData+0x26>
 4ea:	57 c0       	rjmp	.+174    	; 0x59a <parseData+0xd4>
 4ec:	28 f4       	brcc	.+10     	; 0x4f8 <parseData+0x32>
 4ee:	01 30       	cpi	r16, 0x01	; 1
 4f0:	c9 f0       	breq	.+50     	; 0x524 <parseData+0x5e>
 4f2:	02 30       	cpi	r16, 0x02	; 2
 4f4:	b1 f1       	breq	.+108    	; 0x562 <parseData+0x9c>
 4f6:	e1 c0       	rjmp	.+450    	; 0x6ba <parseData+0x1f4>
 4f8:	06 36       	cpi	r16, 0x66	; 102
 4fa:	09 f4       	brne	.+2      	; 0x4fe <parseData+0x38>
 4fc:	92 c0       	rjmp	.+292    	; 0x622 <parseData+0x15c>
 4fe:	08 f4       	brcc	.+2      	; 0x502 <parseData+0x3c>
 500:	64 c0       	rjmp	.+200    	; 0x5ca <parseData+0x104>
 502:	0f 37       	cpi	r16, 0x7F	; 127
 504:	09 f4       	brne	.+2      	; 0x508 <parseData+0x42>
 506:	bb c0       	rjmp	.+374    	; 0x67e <parseData+0x1b8>
 508:	d8 c0       	rjmp	.+432    	; 0x6ba <parseData+0x1f4>
		
		case 1: //send potentiometer position
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 50a:	c7 01       	movw	r24, r14
 50c:	ab de       	rcall	.-682    	; 0x264 <getTick>
 50e:	96 01       	movw	r18, r12
 510:	2c 50       	subi	r18, 0x0C	; 12
 512:	3e 4f       	sbci	r19, 0xFE	; 254
 514:	28 17       	cp	r18, r24
 516:	39 07       	cpc	r19, r25
 518:	28 f4       	brcc	.+10     	; 0x524 <parseData+0x5e>
 51a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	9f ef       	ldi	r25, 0xFF	; 255
 522:	cd c0       	rjmp	.+410    	; 0x6be <parseData+0x1f8>
 524:	ce 01       	movw	r24, r28
 526:	e1 d1       	rcall	.+962    	; 0x8ea <readBufferLength>
 528:	89 2b       	or	r24, r25
 52a:	79 f3       	breq	.-34     	; 0x50a <parseData+0x44>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 52c:	ce 01       	movw	r24, r28
 52e:	ba d1       	rcall	.+884    	; 0x8a4 <readBuffer>
 530:	81 3a       	cpi	r24, 0xA1	; 161
 532:	91 05       	cpc	r25, r1
 534:	29 f0       	breq	.+10     	; 0x540 <parseData+0x7a>
 536:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 53a:	8e ef       	ldi	r24, 0xFE	; 254
 53c:	9f ef       	ldi	r25, 0xFF	; 255
 53e:	bf c0       	rjmp	.+382    	; 0x6be <parseData+0x1f8>
			writeSpi(&spi_s, &housekp, 1, adc->pot_pos, 10);
 540:	f5 01       	movw	r30, r10
 542:	20 81       	ld	r18, Z
 544:	31 81       	ldd	r19, Z+1	; 0x01
 546:	0a e0       	ldi	r16, 0x0A	; 10
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	66 e7       	ldi	r22, 0x76	; 118
 54e:	71 e0       	ldi	r23, 0x01	; 1
 550:	8f e7       	ldi	r24, 0x7F	; 127
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	d0 d1       	rcall	.+928    	; 0x8f6 <writeSpi>
			current_state = FINISHED_INSTR;
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;	
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
		case 1: //send potentiometer position
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpi(&spi_s, &housekp, 1, adc->pot_pos, 10);
			current_state = FINISHED_INSTR;
			break;
 560:	ae c0       	rjmp	.+348    	; 0x6be <parseData+0x1f8>
		
		case 2: //get new position
			data = assembleU16(buffer, hskp, start_tick);
 562:	ac 01       	movw	r20, r24
 564:	b7 01       	movw	r22, r14
 566:	ce 01       	movw	r24, r28
 568:	6b df       	rcall	.-298    	; 0x440 <assembleU16>
 56a:	6b 01       	movw	r12, r22
 56c:	7c 01       	movw	r14, r24
			if(data < 0)return -1;
			writeSpi(&spi_s, &housekp, 2, adc->pot_pos, 50);
 56e:	f5 01       	movw	r30, r10
 570:	20 81       	ld	r18, Z
 572:	31 81       	ldd	r19, Z+1	; 0x01
 574:	02 e3       	ldi	r16, 0x32	; 50
 576:	10 e0       	ldi	r17, 0x00	; 0
 578:	42 e0       	ldi	r20, 0x02	; 2
 57a:	66 e7       	ldi	r22, 0x76	; 118
 57c:	71 e0       	ldi	r23, 0x01	; 1
 57e:	8f e7       	ldi	r24, 0x7F	; 127
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	b9 d1       	rcall	.+882    	; 0x8f6 <writeSpi>
			adc->pot_pos = data;
 584:	f5 01       	movw	r30, r10
 586:	d1 82       	std	Z+1, r13	; 0x01
 588:	c0 82       	st	Z, r12
			adc->spi_changed = 1;
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	82 87       	std	Z+10, r24	; 0x0a
			current_state = FINISHED_INSTR;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;	
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
			if(data < 0)return -1;
			writeSpi(&spi_s, &housekp, 2, adc->pot_pos, 50);
			adc->pot_pos = data;
			adc->spi_changed = 1;
			current_state = FINISHED_INSTR;
			break;
 598:	92 c0       	rjmp	.+292    	; 0x6be <parseData+0x1f8>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 59a:	98 e0       	ldi	r25, 0x08	; 8
 59c:	88 e1       	ldi	r24, 0x18	; 24
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	a8 95       	wdr
 5a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <parseData+0xe8>
		case 100://reset machine
			soft_reset();
			break;
			
		case 101://report current buffer length
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 5b0:	c7 01       	movw	r24, r14
 5b2:	58 de       	rcall	.-848    	; 0x264 <getTick>
 5b4:	96 01       	movw	r18, r12
 5b6:	2c 50       	subi	r18, 0x0C	; 12
 5b8:	3e 4f       	sbci	r19, 0xFE	; 254
 5ba:	28 17       	cp	r18, r24
 5bc:	39 07       	cpc	r19, r25
 5be:	28 f4       	brcc	.+10     	; 0x5ca <parseData+0x104>
 5c0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	9f ef       	ldi	r25, 0xFF	; 255
 5c8:	7a c0       	rjmp	.+244    	; 0x6be <parseData+0x1f8>
 5ca:	ce 01       	movw	r24, r28
 5cc:	8e d1       	rcall	.+796    	; 0x8ea <readBufferLength>
 5ce:	89 2b       	or	r24, r25
 5d0:	79 f3       	breq	.-34     	; 0x5b0 <parseData+0xea>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 5d2:	ce 01       	movw	r24, r28
 5d4:	67 d1       	rcall	.+718    	; 0x8a4 <readBuffer>
 5d6:	81 3a       	cpi	r24, 0xA1	; 161
 5d8:	91 05       	cpc	r25, r1
 5da:	29 f0       	breq	.+10     	; 0x5e6 <parseData+0x120>
 5dc:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 5e0:	8e ef       	ldi	r24, 0xFE	; 254
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
 5e4:	6c c0       	rjmp	.+216    	; 0x6be <parseData+0x1f8>
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
 5e6:	ce 01       	movw	r24, r28
 5e8:	80 d1       	rcall	.+768    	; 0x8ea <readBufferLength>
 5ea:	04 e6       	ldi	r16, 0x64	; 100
 5ec:	10 e0       	ldi	r17, 0x00	; 0
 5ee:	9c 01       	movw	r18, r24
 5f0:	4d ef       	ldi	r20, 0xFD	; 253
 5f2:	66 e7       	ldi	r22, 0x76	; 118
 5f4:	71 e0       	ldi	r23, 0x01	; 1
 5f6:	8f e7       	ldi	r24, 0x7F	; 127
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	7d d1       	rcall	.+762    	; 0x8f6 <writeSpi>
			current_state = FINISHED_INSTR;
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;	
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	90 e0       	ldi	r25, 0x00	; 0
		case 101://report current buffer length
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
			current_state = FINISHED_INSTR;
			break;
 606:	5b c0       	rjmp	.+182    	; 0x6be <parseData+0x1f8>
		
		case 102://report current buffer
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 608:	c7 01       	movw	r24, r14
 60a:	2c de       	rcall	.-936    	; 0x264 <getTick>
 60c:	96 01       	movw	r18, r12
 60e:	2c 50       	subi	r18, 0x0C	; 12
 610:	3e 4f       	sbci	r19, 0xFE	; 254
 612:	28 17       	cp	r18, r24
 614:	39 07       	cpc	r19, r25
 616:	28 f4       	brcc	.+10     	; 0x622 <parseData+0x15c>
 618:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 61c:	8f ef       	ldi	r24, 0xFF	; 255
 61e:	9f ef       	ldi	r25, 0xFF	; 255
 620:	4e c0       	rjmp	.+156    	; 0x6be <parseData+0x1f8>
 622:	ce 01       	movw	r24, r28
 624:	62 d1       	rcall	.+708    	; 0x8ea <readBufferLength>
 626:	89 2b       	or	r24, r25
 628:	79 f3       	breq	.-34     	; 0x608 <parseData+0x142>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 62a:	ce 01       	movw	r24, r28
 62c:	3b d1       	rcall	.+630    	; 0x8a4 <readBuffer>
 62e:	81 3a       	cpi	r24, 0xA1	; 161
 630:	91 05       	cpc	r25, r1
 632:	29 f0       	breq	.+10     	; 0x63e <parseData+0x178>
 634:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 638:	8e ef       	ldi	r24, 0xFE	; 254
 63a:	9f ef       	ldi	r25, 0xFF	; 255
 63c:	40 c0       	rjmp	.+128    	; 0x6be <parseData+0x1f8>
			writeSpiBuffer(&spi_s, &housekp, 254, buffer->buffer, BUFFER_SIZE, 100);
 63e:	0f 2e       	mov	r0, r31
 640:	f4 e6       	ldi	r31, 0x64	; 100
 642:	ef 2e       	mov	r14, r31
 644:	f1 2c       	mov	r15, r1
 646:	f0 2d       	mov	r31, r0
 648:	0a ef       	ldi	r16, 0xFA	; 250
 64a:	9e 01       	movw	r18, r28
 64c:	4e ef       	ldi	r20, 0xFE	; 254
 64e:	66 e7       	ldi	r22, 0x76	; 118
 650:	71 e0       	ldi	r23, 0x01	; 1
 652:	8f e7       	ldi	r24, 0x7F	; 127
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	e7 d1       	rcall	.+974    	; 0xa26 <writeSpiBuffer>
			current_state = FINISHED_INSTR;
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;	
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	90 e0       	ldi	r25, 0x00	; 0
		case 102://report current buffer
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpiBuffer(&spi_s, &housekp, 254, buffer->buffer, BUFFER_SIZE, 100);
			current_state = FINISHED_INSTR;
			break;
 662:	2d c0       	rjmp	.+90     	; 0x6be <parseData+0x1f8>
					
		case 127://send machine type
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 664:	c7 01       	movw	r24, r14
 666:	fe dd       	rcall	.-1028   	; 0x264 <getTick>
 668:	96 01       	movw	r18, r12
 66a:	2c 50       	subi	r18, 0x0C	; 12
 66c:	3e 4f       	sbci	r19, 0xFE	; 254
 66e:	28 17       	cp	r18, r24
 670:	39 07       	cpc	r19, r25
 672:	28 f4       	brcc	.+10     	; 0x67e <parseData+0x1b8>
 674:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f ef       	ldi	r25, 0xFF	; 255
 67c:	20 c0       	rjmp	.+64     	; 0x6be <parseData+0x1f8>
 67e:	ce 01       	movw	r24, r28
 680:	34 d1       	rcall	.+616    	; 0x8ea <readBufferLength>
 682:	89 2b       	or	r24, r25
 684:	79 f3       	breq	.-34     	; 0x664 <parseData+0x19e>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 686:	ce 01       	movw	r24, r28
 688:	0d d1       	rcall	.+538    	; 0x8a4 <readBuffer>
 68a:	81 3a       	cpi	r24, 0xA1	; 161
 68c:	91 05       	cpc	r25, r1
 68e:	29 f0       	breq	.+10     	; 0x69a <parseData+0x1d4>
 690:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 694:	8e ef       	ldi	r24, 0xFE	; 254
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	12 c0       	rjmp	.+36     	; 0x6be <parseData+0x1f8>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
 69a:	04 e6       	ldi	r16, 0x64	; 100
 69c:	10 e0       	ldi	r17, 0x00	; 0
 69e:	22 e0       	ldi	r18, 0x02	; 2
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	4f ef       	ldi	r20, 0xFF	; 255
 6a4:	66 e7       	ldi	r22, 0x76	; 118
 6a6:	71 e0       	ldi	r23, 0x01	; 1
 6a8:	8f e7       	ldi	r24, 0x7F	; 127
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	24 d1       	rcall	.+584    	; 0x8f6 <writeSpi>
			current_state = FINISHED_INSTR;
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			break;
		default: return 0;
		
	}
	return 0;	
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
		case 127://send machine type
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			current_state = FINISHED_INSTR;
			break;
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <parseData+0x1f8>
		default: return 0;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
		
	}
	return 0;	
}
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	bf 90       	pop	r11
 6d0:	af 90       	pop	r10
 6d2:	08 95       	ret

000006d4 <recieveStateMachine>:

int recieveStateMachine(spi_t *spi, adc_t *adc, buffer_t *buffer, hskp_t *hskp){
 6d4:	af 92       	push	r10
 6d6:	bf 92       	push	r11
 6d8:	cf 92       	push	r12
 6da:	df 92       	push	r13
 6dc:	ef 92       	push	r14
 6de:	ff 92       	push	r15
 6e0:	0f 93       	push	r16
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	7c 01       	movw	r14, r24
 6e8:	6b 01       	movw	r12, r22
 6ea:	ea 01       	movw	r28, r20
 6ec:	59 01       	movw	r10, r18
	uint8_t data = 0;
	switch(current_state){
 6ee:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <current_state>
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	79 f0       	breq	.+30     	; 0x714 <recieveStateMachine+0x40>
 6f6:	28 f0       	brcs	.+10     	; 0x702 <recieveStateMachine+0x2e>
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	41 f1       	breq	.+80     	; 0x74c <recieveStateMachine+0x78>
 6fc:	83 30       	cpi	r24, 0x03	; 3
 6fe:	41 f1       	breq	.+80     	; 0x750 <recieveStateMachine+0x7c>
 700:	2d c0       	rjmp	.+90     	; 0x75c <recieveStateMachine+0x88>
		
		case WAIT_BLOCK:
			if(readBuffer(buffer) == BLOCK_SPI){current_state = WAIT_INSTR;}
 702:	ca 01       	movw	r24, r20
 704:	cf d0       	rcall	.+414    	; 0x8a4 <readBuffer>
 706:	80 38       	cpi	r24, 0x80	; 128
 708:	91 05       	cpc	r25, r1
 70a:	41 f5       	brne	.+80     	; 0x75c <recieveStateMachine+0x88>
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
 712:	24 c0       	rjmp	.+72     	; 0x75c <recieveStateMachine+0x88>
			break;
		case WAIT_INSTR:
			data = readBuffer(buffer);
 714:	ca 01       	movw	r24, r20
 716:	c6 d0       	rcall	.+396    	; 0x8a4 <readBuffer>
			if(data == 0 || data == BLOCK_SPI) break;
 718:	88 23       	and	r24, r24
 71a:	01 f1       	breq	.+64     	; 0x75c <recieveStateMachine+0x88>
 71c:	80 38       	cpi	r24, 0x80	; 128
 71e:	f1 f0       	breq	.+60     	; 0x75c <recieveStateMachine+0x88>
			if(data == UNBLOCK_SPI){current_state = WAIT_BLOCK; break;}
 720:	81 38       	cpi	r24, 0x81	; 129
 722:	19 f4       	brne	.+6      	; 0x72a <recieveStateMachine+0x56>
 724:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 728:	19 c0       	rjmp	.+50     	; 0x75c <recieveStateMachine+0x88>
			if(data > 127){current_state = WAIT_BLOCK; break;}
 72a:	88 23       	and	r24, r24
 72c:	1c f4       	brge	.+6      	; 0x734 <recieveStateMachine+0x60>
 72e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 732:	14 c0       	rjmp	.+40     	; 0x75c <recieveStateMachine+0x88>
			if(parseData(spi, adc, buffer, hskp, data)<0){current_state = STATE_ERROR; break;}
 734:	08 2f       	mov	r16, r24
 736:	95 01       	movw	r18, r10
 738:	ae 01       	movw	r20, r28
 73a:	b6 01       	movw	r22, r12
 73c:	c7 01       	movw	r24, r14
 73e:	c3 de       	rcall	.-634    	; 0x4c6 <parseData>
 740:	99 23       	and	r25, r25
 742:	64 f4       	brge	.+24     	; 0x75c <recieveStateMachine+0x88>
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
 74a:	08 c0       	rjmp	.+16     	; 0x75c <recieveStateMachine+0x88>
			break;
		case FINISHED_INSTR: 
			current_state = WAIT_BLOCK;
 74c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
		case STATE_ERROR:
			PORTB^=1<<PINB6;
 750:	95 b1       	in	r25, 0x05	; 5
 752:	80 e4       	ldi	r24, 0x40	; 64
 754:	89 27       	eor	r24, r25
 756:	85 b9       	out	0x05, r24	; 5
			current_state = WAIT_BLOCK;
 758:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
	}
			
			
			
	return 0;
}
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	08 95       	ret

00000774 <SPIInit>:



void SPIInit(void){
			
	DDRB &= ~(1<<DDB7); //set HIZ mode
 774:	84 b1       	in	r24, 0x04	; 4
 776:	8f 77       	andi	r24, 0x7F	; 127
 778:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB7);
 77a:	85 b1       	in	r24, 0x05	; 5
 77c:	8f 77       	andi	r24, 0x7F	; 127
 77e:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB4; //set MISO output
 780:	84 b1       	in	r24, 0x04	; 4
 782:	80 61       	ori	r24, 0x10	; 16
 784:	84 b9       	out	0x04, r24	; 4
	DDRB|=1<<DDB6;
 786:	84 b1       	in	r24, 0x04	; 4
 788:	80 64       	ori	r24, 0x40	; 64
 78a:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= 1<< DDB6;
 78c:	84 b1       	in	r24, 0x04	; 4
 78e:	80 64       	ori	r24, 0x40	; 64
 790:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0; //interrupt for SS
 792:	e8 e6       	ldi	r30, 0x68	; 104
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	81 60       	ori	r24, 0x01	; 1
 79a:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT2;
 79c:	eb e6       	ldi	r30, 0x6B	; 107
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	84 60       	ori	r24, 0x04	; 4
 7a4:	80 83       	st	Z, r24
	
	SPCR = 1<<SPE;// | 1<<SPIE; //enable SPI
 7a6:	80 e4       	ldi	r24, 0x40	; 64
 7a8:	8c bd       	out	0x2c, r24	; 44
 7aa:	08 95       	ret

000007ac <bufferInit>:
}


void bufferInit(buffer_t *buffer){
	
	buffer->read_index = 0;
 7ac:	fc 01       	movw	r30, r24
 7ae:	e5 50       	subi	r30, 0x05	; 5
 7b0:	ff 4f       	sbci	r31, 0xFF	; 255
 7b2:	10 82       	st	Z, r1
	buffer->write_index = 0;
 7b4:	31 96       	adiw	r30, 0x01	; 1
 7b6:	10 82       	st	Z, r1
	buffer->buffer_length = 0;
 7b8:	32 97       	sbiw	r30, 0x02	; 2
 7ba:	10 82       	st	Z, r1
	buffer->buffer[0] = 0;
 7bc:	fc 01       	movw	r30, r24
 7be:	10 82       	st	Z, r1
	buffer->buffer[1] = 0;
 7c0:	11 82       	std	Z+1, r1	; 0x01
 7c2:	08 95       	ret

000007c4 <writeBuffer>:
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 7c4:	fc 01       	movw	r30, r24
 7c6:	e6 50       	subi	r30, 0x06	; 6
 7c8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ca:	20 81       	ld	r18, Z
 7cc:	29 3f       	cpi	r18, 0xF9	; 249
 7ce:	b1 f0       	breq	.+44     	; 0x7fc <writeBuffer+0x38>
	buffer->buffer[buffer->write_index] = val;
 7d0:	32 96       	adiw	r30, 0x02	; 2
 7d2:	20 81       	ld	r18, Z
 7d4:	dc 01       	movw	r26, r24
 7d6:	a2 0f       	add	r26, r18
 7d8:	b1 1d       	adc	r27, r1
 7da:	6c 93       	st	X, r22
	buffer->write_index++;
 7dc:	20 81       	ld	r18, Z
 7de:	2f 5f       	subi	r18, 0xFF	; 255
 7e0:	20 83       	st	Z, r18
	buffer->buffer_length++;
 7e2:	dc 01       	movw	r26, r24
 7e4:	a6 50       	subi	r26, 0x06	; 6
 7e6:	bf 4f       	sbci	r27, 0xFF	; 255
 7e8:	2c 91       	ld	r18, X
 7ea:	2f 5f       	subi	r18, 0xFF	; 255
 7ec:	2c 93       	st	X, r18
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
 7ee:	20 81       	ld	r18, Z
 7f0:	29 3f       	cpi	r18, 0xF9	; 249
 7f2:	39 f4       	brne	.+14     	; 0x802 <writeBuffer+0x3e>
 7f4:	10 82       	st	Z, r1
	return 0;
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	08 95       	ret
	buffer->buffer[1] = 0;
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	08 95       	ret
	buffer->buffer[buffer->write_index] = val;
	buffer->write_index++;
	buffer->buffer_length++;
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
	return 0;
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
}
 806:	08 95       	ret

00000808 <__vector_3>:
#include <avr/interrupt.h>
#include <util/delay.h>



 ISR(PCINT0_vect){
 808:	1f 92       	push	r1
 80a:	0f 92       	push	r0
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	0f 92       	push	r0
 810:	11 24       	eor	r1, r1
 812:	2f 93       	push	r18
 814:	3f 93       	push	r19
 816:	4f 93       	push	r20
 818:	5f 93       	push	r21
 81a:	6f 93       	push	r22
 81c:	7f 93       	push	r23
 81e:	8f 93       	push	r24
 820:	9f 93       	push	r25
 822:	af 93       	push	r26
 824:	bf 93       	push	r27
 826:	ef 93       	push	r30
 828:	ff 93       	push	r31
	if(!(PINB & 1<<PINB2))return;//if cs is low then ignore
 82a:	1a 9b       	sbis	0x03, 2	; 3
 82c:	2a c0       	rjmp	.+84     	; 0x882 <__vector_3+0x7a>
	spi_s.one_transfer = 1;
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <spi_s+0x3>
	
	if(SPDR && spi_s.send_block == 0 && spi_s.spi_send_mode){ spi_s.is_master_dumb = 1; return;}
 834:	8e b5       	in	r24, 0x2e	; 46
 836:	88 23       	and	r24, r24
 838:	61 f0       	breq	.+24     	; 0x852 <__vector_3+0x4a>
 83a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <spi_s+0x1>
 83e:	81 11       	cpse	r24, r1
 840:	08 c0       	rjmp	.+16     	; 0x852 <__vector_3+0x4a>
 842:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <spi_s>
 846:	88 23       	and	r24, r24
 848:	21 f0       	breq	.+8      	; 0x852 <__vector_3+0x4a>
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <spi_s+0x2>
 850:	18 c0       	rjmp	.+48     	; 0x882 <__vector_3+0x7a>
	else {spi_s.is_master_dumb = 0;}
 852:	ef e7       	ldi	r30, 0x7F	; 127
 854:	f1 e0       	ldi	r31, 0x01	; 1
 856:	12 82       	std	Z+2, r1	; 0x02
	if(spi_s.spi_send_mode)return;
 858:	80 81       	ld	r24, Z
 85a:	81 11       	cpse	r24, r1
 85c:	12 c0       	rjmp	.+36     	; 0x882 <__vector_3+0x7a>
	
	if(SPDR == BLOCK_SPI){spi_s.send_block=1;}//block sending
 85e:	8e b5       	in	r24, 0x2e	; 46
 860:	80 38       	cpi	r24, 0x80	; 128
 862:	21 f4       	brne	.+8      	; 0x86c <__vector_3+0x64>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <spi_s+0x1>
 86a:	06 c0       	rjmp	.+12     	; 0x878 <__vector_3+0x70>
	else if(SPDR == UNBLOCK_SPI){spi_s.send_block=0; return;}//unblock sending
 86c:	8e b5       	in	r24, 0x2e	; 46
 86e:	81 38       	cpi	r24, 0x81	; 129
 870:	19 f4       	brne	.+6      	; 0x878 <__vector_3+0x70>
 872:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <spi_s+0x1>
 876:	05 c0       	rjmp	.+10     	; 0x882 <__vector_3+0x7a>


	
	writeBuffer(&buf, SPDR);
 878:	6e b5       	in	r22, 0x2e	; 46
 87a:	83 e8       	ldi	r24, 0x83	; 131
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	a2 df       	rcall	.-188    	; 0x7c4 <writeBuffer>
	SPDR = 0;
 880:	1e bc       	out	0x2e, r1	; 46
	//spi_s.one_transfer = 0;
	//DDRB|=1<<DDB6;
	//PORTB|=1<<PINB6;
} 
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <readBuffer>:
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 8a4:	fc 01       	movw	r30, r24
 8a6:	e6 50       	subi	r30, 0x06	; 6
 8a8:	ff 4f       	sbci	r31, 0xFF	; 255
 8aa:	20 81       	ld	r18, Z
 8ac:	22 23       	and	r18, r18
 8ae:	b9 f0       	breq	.+46     	; 0x8de <readBuffer+0x3a>
	int buf = buffer->buffer[buffer->read_index];
 8b0:	31 96       	adiw	r30, 0x01	; 1
 8b2:	20 81       	ld	r18, Z
 8b4:	dc 01       	movw	r26, r24
 8b6:	a2 0f       	add	r26, r18
 8b8:	b1 1d       	adc	r27, r1
 8ba:	2c 91       	ld	r18, X
 8bc:	30 e0       	ldi	r19, 0x00	; 0
	buffer->read_index++;
 8be:	40 81       	ld	r20, Z
 8c0:	4f 5f       	subi	r20, 0xFF	; 255
 8c2:	40 83       	st	Z, r20
	buffer->buffer_length--;
 8c4:	dc 01       	movw	r26, r24
 8c6:	a6 50       	subi	r26, 0x06	; 6
 8c8:	bf 4f       	sbci	r27, 0xFF	; 255
 8ca:	4c 91       	ld	r20, X
 8cc:	41 50       	subi	r20, 0x01	; 1
 8ce:	4c 93       	st	X, r20
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
 8d0:	40 81       	ld	r20, Z
 8d2:	49 3f       	cpi	r20, 0xF9	; 249
 8d4:	39 f4       	brne	.+14     	; 0x8e4 <readBuffer+0x40>
 8d6:	10 82       	st	Z, r1
	return buf;
 8d8:	82 2f       	mov	r24, r18
 8da:	93 2f       	mov	r25, r19
 8dc:	08 95       	ret
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	9f ef       	ldi	r25, 0xFF	; 255
 8e2:	08 95       	ret
	int buf = buffer->buffer[buffer->read_index];
	buffer->read_index++;
	buffer->buffer_length--;
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
	return buf;
 8e4:	82 2f       	mov	r24, r18
 8e6:	93 2f       	mov	r25, r19
}
 8e8:	08 95       	ret

000008ea <readBufferLength>:

int readBufferLength(buffer_t *buffer){
	return buffer->buffer_length;
 8ea:	86 50       	subi	r24, 0x06	; 6
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	fc 01       	movw	r30, r24
 8f0:	80 81       	ld	r24, Z
}
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	08 95       	ret

000008f6 <writeSpi>:

void writeSpi(spi_t *spi, hskp_t *hskp, uint8_t instr, uint16_t data, uint16_t timeout){
 8f6:	7f 92       	push	r7
 8f8:	8f 92       	push	r8
 8fa:	9f 92       	push	r9
 8fc:	af 92       	push	r10
 8fe:	bf 92       	push	r11
 900:	cf 92       	push	r12
 902:	df 92       	push	r13
 904:	ef 92       	push	r14
 906:	ff 92       	push	r15
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	ec 01       	movw	r28, r24
 912:	5b 01       	movw	r10, r22
 914:	74 2e       	mov	r7, r20
 916:	82 2e       	mov	r8, r18
 918:	93 2e       	mov	r9, r19
	
	uint32_t start_tick = getTick(hskp);//start counting ms
 91a:	cb 01       	movw	r24, r22
 91c:	a3 dc       	rcall	.-1722   	; 0x264 <getTick>
 91e:	6c 01       	movw	r12, r24
 920:	e1 2c       	mov	r14, r1
 922:	f1 2c       	mov	r15, r1
	while(!(PINB & 1<<PINB2)|| spi->send_block){}			//wait for CS high and send blocking
 924:	1a 9b       	sbis	0x03, 2	; 3
 926:	fe cf       	rjmp	.-4      	; 0x924 <writeSpi+0x2e>
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	81 11       	cpse	r24, r1
 92c:	fb cf       	rjmp	.-10     	; 0x924 <writeSpi+0x2e>
	spi->spi_send_mode = 1;					//set transmission flag
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	88 83       	st	Y, r24
	disableHSKP(&housekp);					//disable led updating
 932:	86 e7       	ldi	r24, 0x76	; 118
 934:	91 e0       	ldi	r25, 0x01	; 1
 936:	93 dc       	rcall	.-1754   	; 0x25e <disableHSKP>
	spi->one_transfer = 0;					//clear SPI ISR flag
 938:	1b 82       	std	Y+3, r1	; 0x03

	while(1){

		SPDR = TRANSMIT_KEYWORD;			//set transmit keyword
 93a:	8f ed       	ldi	r24, 0xDF	; 223
 93c:	8e bd       	out	0x2e, r24	; 46
		
		DDRB |= 1<<DDB7;
 93e:	84 b1       	in	r24, 0x04	; 4
 940:	80 68       	ori	r24, 0x80	; 128
 942:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~(1<<PORTB7);				//set INT low
 944:	85 b1       	in	r24, 0x05	; 5
 946:	8f 77       	andi	r24, 0x7F	; 127
 948:	85 b9       	out	0x05, r24	; 5


		while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 94a:	0f c0       	rjmp	.+30     	; 0x96a <writeSpi+0x74>
 94c:	c5 01       	movw	r24, r10
 94e:	8a dc       	rcall	.-1772   	; 0x264 <getTick>
 950:	a0 e0       	ldi	r26, 0x00	; 0
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	b7 01       	movw	r22, r14
 956:	a6 01       	movw	r20, r12
 958:	40 0f       	add	r20, r16
 95a:	51 1f       	adc	r21, r17
 95c:	61 1d       	adc	r22, r1
 95e:	71 1d       	adc	r23, r1
 960:	48 17       	cp	r20, r24
 962:	59 07       	cpc	r21, r25
 964:	6a 07       	cpc	r22, r26
 966:	7b 07       	cpc	r23, r27
 968:	18 f0       	brcs	.+6      	; 0x970 <writeSpi+0x7a>
 96a:	8b 81       	ldd	r24, Y+3	; 0x03
 96c:	88 23       	and	r24, r24
 96e:	71 f3       	breq	.-36     	; 0x94c <writeSpi+0x56>
											//wait for transmission or timeout
		spi->one_transfer = 0;
 970:	1b 82       	std	Y+3, r1	; 0x03
		if(!spi->is_master_dumb){ break;}	//if master is not reading then retry
 972:	8a 81       	ldd	r24, Y+2	; 0x02
 974:	81 11       	cpse	r24, r1
 976:	e1 cf       	rjmp	.-62     	; 0x93a <writeSpi+0x44>
	}
	
	SPDR = instr;
 978:	7e bc       	out	0x2e, r7	; 46
	
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 97a:	0f c0       	rjmp	.+30     	; 0x99a <writeSpi+0xa4>
 97c:	c5 01       	movw	r24, r10
 97e:	72 dc       	rcall	.-1820   	; 0x264 <getTick>
 980:	a0 e0       	ldi	r26, 0x00	; 0
 982:	b0 e0       	ldi	r27, 0x00	; 0
 984:	b7 01       	movw	r22, r14
 986:	a6 01       	movw	r20, r12
 988:	40 0f       	add	r20, r16
 98a:	51 1f       	adc	r21, r17
 98c:	61 1d       	adc	r22, r1
 98e:	71 1d       	adc	r23, r1
 990:	48 17       	cp	r20, r24
 992:	59 07       	cpc	r21, r25
 994:	6a 07       	cpc	r22, r26
 996:	7b 07       	cpc	r23, r27
 998:	18 f0       	brcs	.+6      	; 0x9a0 <writeSpi+0xaa>
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	88 23       	and	r24, r24
 99e:	71 f3       	breq	.-36     	; 0x97c <writeSpi+0x86>
		spi->one_transfer = 0;
 9a0:	1b 82       	std	Y+3, r1	; 0x03

	SPDR = (uint8_t)data;
 9a2:	8e bc       	out	0x2e, r8	; 46
	
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <writeSpi+0xce>
 9a6:	c5 01       	movw	r24, r10
 9a8:	5d dc       	rcall	.-1862   	; 0x264 <getTick>
 9aa:	a0 e0       	ldi	r26, 0x00	; 0
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	b7 01       	movw	r22, r14
 9b0:	a6 01       	movw	r20, r12
 9b2:	40 0f       	add	r20, r16
 9b4:	51 1f       	adc	r21, r17
 9b6:	61 1d       	adc	r22, r1
 9b8:	71 1d       	adc	r23, r1
 9ba:	48 17       	cp	r20, r24
 9bc:	59 07       	cpc	r21, r25
 9be:	6a 07       	cpc	r22, r26
 9c0:	7b 07       	cpc	r23, r27
 9c2:	18 f0       	brcs	.+6      	; 0x9ca <writeSpi+0xd4>
 9c4:	8b 81       	ldd	r24, Y+3	; 0x03
 9c6:	88 23       	and	r24, r24
 9c8:	71 f3       	breq	.-36     	; 0x9a6 <writeSpi+0xb0>
		spi->one_transfer = 0;
 9ca:	1b 82       	std	Y+3, r1	; 0x03

	SPDR = (uint8_t)(data>>8);
 9cc:	9e bc       	out	0x2e, r9	; 46
		
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 9ce:	0f c0       	rjmp	.+30     	; 0x9ee <writeSpi+0xf8>
 9d0:	c5 01       	movw	r24, r10
 9d2:	48 dc       	rcall	.-1904   	; 0x264 <getTick>
 9d4:	a0 e0       	ldi	r26, 0x00	; 0
 9d6:	b0 e0       	ldi	r27, 0x00	; 0
 9d8:	b7 01       	movw	r22, r14
 9da:	a6 01       	movw	r20, r12
 9dc:	40 0f       	add	r20, r16
 9de:	51 1f       	adc	r21, r17
 9e0:	61 1d       	adc	r22, r1
 9e2:	71 1d       	adc	r23, r1
 9e4:	48 17       	cp	r20, r24
 9e6:	59 07       	cpc	r21, r25
 9e8:	6a 07       	cpc	r22, r26
 9ea:	7b 07       	cpc	r23, r27
 9ec:	18 f0       	brcs	.+6      	; 0x9f4 <writeSpi+0xfe>
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	88 23       	and	r24, r24
 9f2:	71 f3       	breq	.-36     	; 0x9d0 <writeSpi+0xda>
		spi->one_transfer = 0;
 9f4:	1b 82       	std	Y+3, r1	; 0x03
	
	PORTB &= ~(1<<PORTB7); //set INT high
 9f6:	85 b1       	in	r24, 0x05	; 5
 9f8:	8f 77       	andi	r24, 0x7F	; 127
 9fa:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 9fc:	84 b1       	in	r24, 0x04	; 4
 9fe:	8f 77       	andi	r24, 0x7F	; 127
 a00:	84 b9       	out	0x04, r24	; 4
	
	//PCICR |= 1<< PCIE0;
	enableHSKP(&housekp);
 a02:	86 e7       	ldi	r24, 0x76	; 118
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	27 dc       	rcall	.-1970   	; 0x256 <enableHSKP>
	spi->spi_send_mode = 0;	
 a08:	18 82       	st	Y, r1
}
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	1f 91       	pop	r17
 a10:	0f 91       	pop	r16
 a12:	ff 90       	pop	r15
 a14:	ef 90       	pop	r14
 a16:	df 90       	pop	r13
 a18:	cf 90       	pop	r12
 a1a:	bf 90       	pop	r11
 a1c:	af 90       	pop	r10
 a1e:	9f 90       	pop	r9
 a20:	8f 90       	pop	r8
 a22:	7f 90       	pop	r7
 a24:	08 95       	ret

00000a26 <writeSpiBuffer>:

void writeSpiBuffer(spi_t *spi, hskp_t *hskp, uint8_t instr, uint8_t* data, uint8_t length, uint16_t timeout){
 a26:	4f 92       	push	r4
 a28:	5f 92       	push	r5
 a2a:	6f 92       	push	r6
 a2c:	7f 92       	push	r7
 a2e:	8f 92       	push	r8
 a30:	9f 92       	push	r9
 a32:	af 92       	push	r10
 a34:	bf 92       	push	r11
 a36:	cf 92       	push	r12
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	0f 93       	push	r16
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	4c 01       	movw	r8, r24
 a46:	eb 01       	movw	r28, r22
 a48:	d4 2e       	mov	r13, r20
 a4a:	59 01       	movw	r10, r18
	
	uint32_t start_tick = getTick(hskp);
 a4c:	cb 01       	movw	r24, r22
 a4e:	0a dc       	rcall	.-2028   	; 0x264 <getTick>
 a50:	2c 01       	movw	r4, r24
 a52:	61 2c       	mov	r6, r1
 a54:	71 2c       	mov	r7, r1
	while(!(PINB & 1<<PINB2)){}
 a56:	1a 9b       	sbis	0x03, 2	; 3
 a58:	fe cf       	rjmp	.-4      	; 0xa56 <writeSpiBuffer+0x30>
	disableHSKP(&housekp);
 a5a:	86 e7       	ldi	r24, 0x76	; 118
 a5c:	91 e0       	ldi	r25, 0x01	; 1
 a5e:	ff db       	rcall	.-2050   	; 0x25e <disableHSKP>
	spi->spi_send_mode = 1;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	f4 01       	movw	r30, r8
 a64:	80 83       	st	Z, r24
	
	SPSR;		//clearing spif flag
 a66:	8d b5       	in	r24, 0x2d	; 45
	SPDR = TRANSMIT_KEYWORD;		//set instr
 a68:	8f ed       	ldi	r24, 0xDF	; 223
 a6a:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);	//set INT low
 a6c:	85 b1       	in	r24, 0x05	; 5
 a6e:	8f 77       	andi	r24, 0x7F	; 127
 a70:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 a72:	84 b1       	in	r24, 0x04	; 4
 a74:	80 68       	ori	r24, 0x80	; 128
 a76:	84 b9       	out	0x04, r24	; 4

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 a78:	0f c0       	rjmp	.+30     	; 0xa98 <writeSpiBuffer+0x72>
 a7a:	ce 01       	movw	r24, r28
 a7c:	f3 db       	rcall	.-2074   	; 0x264 <getTick>
 a7e:	a0 e0       	ldi	r26, 0x00	; 0
 a80:	b0 e0       	ldi	r27, 0x00	; 0
 a82:	b3 01       	movw	r22, r6
 a84:	a2 01       	movw	r20, r4
 a86:	4e 0d       	add	r20, r14
 a88:	5f 1d       	adc	r21, r15
 a8a:	61 1d       	adc	r22, r1
 a8c:	71 1d       	adc	r23, r1
 a8e:	48 17       	cp	r20, r24
 a90:	59 07       	cpc	r21, r25
 a92:	6a 07       	cpc	r22, r26
 a94:	7b 07       	cpc	r23, r27
 a96:	28 f0       	brcs	.+10     	; 0xaa2 <writeSpiBuffer+0x7c>
 a98:	0d b4       	in	r0, 0x2d	; 45
 a9a:	07 fe       	sbrs	r0, 7
 a9c:	ee cf       	rjmp	.-36     	; 0xa7a <writeSpiBuffer+0x54>
 a9e:	1a 9b       	sbis	0x03, 2	; 3
 aa0:	ec cf       	rjmp	.-40     	; 0xa7a <writeSpiBuffer+0x54>
	
	SPDR = instr;
 aa2:	de bc       	out	0x2e, r13	; 46
		
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 aa4:	0f c0       	rjmp	.+30     	; 0xac4 <writeSpiBuffer+0x9e>
 aa6:	ce 01       	movw	r24, r28
 aa8:	dd db       	rcall	.-2118   	; 0x264 <getTick>
 aaa:	a0 e0       	ldi	r26, 0x00	; 0
 aac:	b0 e0       	ldi	r27, 0x00	; 0
 aae:	b3 01       	movw	r22, r6
 ab0:	a2 01       	movw	r20, r4
 ab2:	4e 0d       	add	r20, r14
 ab4:	5f 1d       	adc	r21, r15
 ab6:	61 1d       	adc	r22, r1
 ab8:	71 1d       	adc	r23, r1
 aba:	48 17       	cp	r20, r24
 abc:	59 07       	cpc	r21, r25
 abe:	6a 07       	cpc	r22, r26
 ac0:	7b 07       	cpc	r23, r27
 ac2:	28 f0       	brcs	.+10     	; 0xace <writeSpiBuffer+0xa8>
 ac4:	0d b4       	in	r0, 0x2d	; 45
 ac6:	07 fe       	sbrs	r0, 7
 ac8:	ee cf       	rjmp	.-36     	; 0xaa6 <writeSpiBuffer+0x80>
 aca:	1a 9b       	sbis	0x03, 2	; 3
 acc:	ec cf       	rjmp	.-40     	; 0xaa6 <writeSpiBuffer+0x80>
		
	SPDR = length;
 ace:	0e bd       	out	0x2e, r16	; 46
	
	for(int i=0; i<length; i++){
 ad0:	c1 2c       	mov	r12, r1
 ad2:	d1 2c       	mov	r13, r1
 ad4:	1c c0       	rjmp	.+56     	; 0xb0e <writeSpiBuffer+0xe8>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 ad6:	ce 01       	movw	r24, r28
 ad8:	c5 db       	rcall	.-2166   	; 0x264 <getTick>
 ada:	a0 e0       	ldi	r26, 0x00	; 0
 adc:	b0 e0       	ldi	r27, 0x00	; 0
 ade:	b3 01       	movw	r22, r6
 ae0:	a2 01       	movw	r20, r4
 ae2:	4e 0d       	add	r20, r14
 ae4:	5f 1d       	adc	r21, r15
 ae6:	61 1d       	adc	r22, r1
 ae8:	71 1d       	adc	r23, r1
 aea:	48 17       	cp	r20, r24
 aec:	59 07       	cpc	r21, r25
 aee:	6a 07       	cpc	r22, r26
 af0:	7b 07       	cpc	r23, r27
 af2:	28 f0       	brcs	.+10     	; 0xafe <writeSpiBuffer+0xd8>
 af4:	0d b4       	in	r0, 0x2d	; 45
 af6:	07 fe       	sbrs	r0, 7
 af8:	ee cf       	rjmp	.-36     	; 0xad6 <writeSpiBuffer+0xb0>
 afa:	1a 9b       	sbis	0x03, 2	; 3
 afc:	ec cf       	rjmp	.-40     	; 0xad6 <writeSpiBuffer+0xb0>
		SPDR = data[i];
 afe:	f5 01       	movw	r30, r10
 b00:	ec 0d       	add	r30, r12
 b02:	fd 1d       	adc	r31, r13
 b04:	80 81       	ld	r24, Z
 b06:	8e bd       	out	0x2e, r24	; 46
		
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
		
	SPDR = length;
	
	for(int i=0; i<length; i++){
 b08:	ff ef       	ldi	r31, 0xFF	; 255
 b0a:	cf 1a       	sub	r12, r31
 b0c:	df 0a       	sbc	r13, r31
 b0e:	80 2f       	mov	r24, r16
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	c8 16       	cp	r12, r24
 b14:	d9 06       	cpc	r13, r25
 b16:	74 f3       	brlt	.-36     	; 0xaf4 <writeSpiBuffer+0xce>
 b18:	0f c0       	rjmp	.+30     	; 0xb38 <writeSpiBuffer+0x112>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
		SPDR = data[i];
	}
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout) break;}
 b1a:	ce 01       	movw	r24, r28
 b1c:	a3 db       	rcall	.-2234   	; 0x264 <getTick>
 b1e:	a0 e0       	ldi	r26, 0x00	; 0
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	b3 01       	movw	r22, r6
 b24:	a2 01       	movw	r20, r4
 b26:	4e 0d       	add	r20, r14
 b28:	5f 1d       	adc	r21, r15
 b2a:	61 1d       	adc	r22, r1
 b2c:	71 1d       	adc	r23, r1
 b2e:	48 17       	cp	r20, r24
 b30:	59 07       	cpc	r21, r25
 b32:	6a 07       	cpc	r22, r26
 b34:	7b 07       	cpc	r23, r27
 b36:	28 f0       	brcs	.+10     	; 0xb42 <writeSpiBuffer+0x11c>
 b38:	0d b4       	in	r0, 0x2d	; 45
 b3a:	07 fe       	sbrs	r0, 7
 b3c:	ee cf       	rjmp	.-36     	; 0xb1a <writeSpiBuffer+0xf4>
 b3e:	1a 9b       	sbis	0x03, 2	; 3
 b40:	ec cf       	rjmp	.-40     	; 0xb1a <writeSpiBuffer+0xf4>
	PORTB &= ~(1<<PORTB7); //set INT high
 b42:	85 b1       	in	r24, 0x05	; 5
 b44:	8f 77       	andi	r24, 0x7F	; 127
 b46:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 b48:	84 b1       	in	r24, 0x04	; 4
 b4a:	8f 77       	andi	r24, 0x7F	; 127
 b4c:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	enableHSKP(&housekp);
 b4e:	86 e7       	ldi	r24, 0x76	; 118
 b50:	91 e0       	ldi	r25, 0x01	; 1
 b52:	81 db       	rcall	.-2302   	; 0x256 <enableHSKP>
	spi->spi_send_mode = 0;
 b54:	f4 01       	movw	r30, r8
 b56:	10 82       	st	Z, r1
	//if(getTick()>start_tick+timeout)errorHandler();
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	0f 91       	pop	r16
 b5e:	ff 90       	pop	r15
 b60:	ef 90       	pop	r14
 b62:	df 90       	pop	r13
 b64:	cf 90       	pop	r12
 b66:	bf 90       	pop	r11
 b68:	af 90       	pop	r10
 b6a:	9f 90       	pop	r9
 b6c:	8f 90       	pop	r8
 b6e:	7f 90       	pop	r7
 b70:	6f 90       	pop	r6
 b72:	5f 90       	pop	r5
 b74:	4f 90       	pop	r4
 b76:	08 95       	ret

00000b78 <__divmodsi4>:
 b78:	05 2e       	mov	r0, r21
 b7a:	97 fb       	bst	r25, 7
 b7c:	16 f4       	brtc	.+4      	; 0xb82 <__divmodsi4+0xa>
 b7e:	00 94       	com	r0
 b80:	0f d0       	rcall	.+30     	; 0xba0 <__negsi2>
 b82:	57 fd       	sbrc	r21, 7
 b84:	05 d0       	rcall	.+10     	; 0xb90 <__divmodsi4_neg2>
 b86:	14 d0       	rcall	.+40     	; 0xbb0 <__udivmodsi4>
 b88:	07 fc       	sbrc	r0, 7
 b8a:	02 d0       	rcall	.+4      	; 0xb90 <__divmodsi4_neg2>
 b8c:	46 f4       	brtc	.+16     	; 0xb9e <__divmodsi4_exit>
 b8e:	08 c0       	rjmp	.+16     	; 0xba0 <__negsi2>

00000b90 <__divmodsi4_neg2>:
 b90:	50 95       	com	r21
 b92:	40 95       	com	r20
 b94:	30 95       	com	r19
 b96:	21 95       	neg	r18
 b98:	3f 4f       	sbci	r19, 0xFF	; 255
 b9a:	4f 4f       	sbci	r20, 0xFF	; 255
 b9c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b9e <__divmodsi4_exit>:
 b9e:	08 95       	ret

00000ba0 <__negsi2>:
 ba0:	90 95       	com	r25
 ba2:	80 95       	com	r24
 ba4:	70 95       	com	r23
 ba6:	61 95       	neg	r22
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	8f 4f       	sbci	r24, 0xFF	; 255
 bac:	9f 4f       	sbci	r25, 0xFF	; 255
 bae:	08 95       	ret

00000bb0 <__udivmodsi4>:
 bb0:	a1 e2       	ldi	r26, 0x21	; 33
 bb2:	1a 2e       	mov	r1, r26
 bb4:	aa 1b       	sub	r26, r26
 bb6:	bb 1b       	sub	r27, r27
 bb8:	fd 01       	movw	r30, r26
 bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__udivmodsi4_ep>

00000bbc <__udivmodsi4_loop>:
 bbc:	aa 1f       	adc	r26, r26
 bbe:	bb 1f       	adc	r27, r27
 bc0:	ee 1f       	adc	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	a2 17       	cp	r26, r18
 bc6:	b3 07       	cpc	r27, r19
 bc8:	e4 07       	cpc	r30, r20
 bca:	f5 07       	cpc	r31, r21
 bcc:	20 f0       	brcs	.+8      	; 0xbd6 <__udivmodsi4_ep>
 bce:	a2 1b       	sub	r26, r18
 bd0:	b3 0b       	sbc	r27, r19
 bd2:	e4 0b       	sbc	r30, r20
 bd4:	f5 0b       	sbc	r31, r21

00000bd6 <__udivmodsi4_ep>:
 bd6:	66 1f       	adc	r22, r22
 bd8:	77 1f       	adc	r23, r23
 bda:	88 1f       	adc	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	1a 94       	dec	r1
 be0:	69 f7       	brne	.-38     	; 0xbbc <__udivmodsi4_loop>
 be2:	60 95       	com	r22
 be4:	70 95       	com	r23
 be6:	80 95       	com	r24
 be8:	90 95       	com	r25
 bea:	9b 01       	movw	r18, r22
 bec:	ac 01       	movw	r20, r24
 bee:	bd 01       	movw	r22, r26
 bf0:	cf 01       	movw	r24, r30
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>


Motorised pott.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800100  00800100  000006c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b9  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b24  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c29  00000000  00000000  0000262d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c5  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000040b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	ec c1       	rjmp	.+984    	; 0x3e0 <__vector_3>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	91 c0       	rjmp	.+290    	; 0x13c <__vector_12>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a1 37       	cpi	r26, 0x71	; 113
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	ce d0       	rcall	.+412    	; 0x1e2 <main>
  46:	01 c3       	rjmp	.+1538   	; 0x64a <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <ADCInit>:

uint8_t pot_pos = 0;

void ADCInit(void){
	
	ADMUX |= 1<<REFS0 | ADC4D;
  4a:	ec e7       	ldi	r30, 0x7C	; 124
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	84 64       	ori	r24, 0x44	; 68
  52:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN | 0b111;
  54:	ea e7       	ldi	r30, 0x7A	; 122
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	87 68       	ori	r24, 0x87	; 135
  5c:	80 83       	st	Z, r24
	
	DDRD |= 1<<0;//motor sleep
  5e:	8a b1       	in	r24, 0x0a	; 10
  60:	81 60       	ori	r24, 0x01	; 1
  62:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= 1<<PORTD0;
	
	DDRB |= 1<<DDB1;//motor en
  64:	84 b1       	in	r24, 0x04	; 4
  66:	82 60       	ori	r24, 0x02	; 2
  68:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<PORTB1;
  6a:	85 b1       	in	r24, 0x05	; 5
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB0;//motor smer
  70:	84 b1       	in	r24, 0x04	; 4
  72:	81 60       	ori	r24, 0x01	; 1
  74:	84 b9       	out	0x04, r24	; 4
  76:	08 95       	ret

00000078 <ADCRead>:
	
	//adc_val_old = ADCRead();
}

uint8_t ADCRead(void){
	ADCSRA |= 1<<ADSC;
  78:	ea e7       	ldi	r30, 0x7A	; 122
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
  82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  86:	84 ff       	sbrs	r24, 4
  88:	fc cf       	rjmp	.-8      	; 0x82 <ADCRead+0xa>
	ADCSRA |= 1<<ADIF;
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 61       	ori	r24, 0x10	; 16
  92:	80 83       	st	Z, r24
	ADCSRA &= ~(0<<ADIF);
  94:	80 81       	ld	r24, Z
  96:	80 83       	st	Z, r24
	uint8_t val_low = ADCL;
  98:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
	uint16_t val = ADCH<<8 | val_low;
  9c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	98 2f       	mov	r25, r24
  a4:	88 27       	eor	r24, r24
  a6:	82 2b       	or	r24, r18
	return (uint8_t)(val>>2);
  a8:	96 95       	lsr	r25
  aa:	87 95       	ror	r24
  ac:	96 95       	lsr	r25
  ae:	87 95       	ror	r24
}
  b0:	08 95       	ret

000000b2 <MovePot>:

void MovePot(uint8_t pos){
	//if(old_pos == pos) break;
	
	if(pos < adc_val_new){
  b2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <adc_val_new>
  b6:	89 17       	cp	r24, r25
  b8:	18 f4       	brcc	.+6      	; 0xc0 <MovePot+0xe>
		PORTB |= 1<<PORTB0;
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	91 60       	ori	r25, 0x01	; 1
  be:	95 b9       	out	0x05, r25	; 5
	}
	if(pos > adc_val_new){
  c0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <adc_val_new>
  c4:	98 17       	cp	r25, r24
  c6:	18 f4       	brcc	.+6      	; 0xce <MovePot+0x1c>
		PORTB &= ~(1<<PORTB0);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	9e 7f       	andi	r25, 0xFE	; 254
  cc:	95 b9       	out	0x05, r25	; 5
	}
	if(((pos-5) < adc_val_new) && ((pos+5) > adc_val_new)){
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	ac 01       	movw	r20, r24
  d2:	45 50       	subi	r20, 0x05	; 5
  d4:	51 09       	sbc	r21, r1
  d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <adc_val_new>
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	42 17       	cp	r20, r18
  de:	53 07       	cpc	r21, r19
  e0:	44 f4       	brge	.+16     	; 0xf2 <MovePot+0x40>
  e2:	05 96       	adiw	r24, 0x05	; 5
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	24 f4       	brge	.+8      	; 0xf2 <MovePot+0x40>
		PORTD &= ~(1<<PORTD0);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	08 95       	ret
	}
	else PORTD |= 1<<PORTD0;
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	08 95       	ret

000000fa <timersInit>:
void enableHSKP(void){
	hskp_en = 1;
}

void disableHSKP(void){
	hskp_en = 0;
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	85 bd       	out	0x25, r24	; 37
  fe:	8e e1       	ldi	r24, 0x1E	; 30
 100:	87 bd       	out	0x27, r24	; 39
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
 108:	16 bc       	out	0x26, r1	; 38
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hskp_en>
 110:	08 95       	ret

00000112 <enableTimer>:
 112:	ee e6       	ldi	r30, 0x6E	; 110
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <disableTimer>:
 11e:	ee e6       	ldi	r30, 0x6E	; 110
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <enableHSKP>:
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hskp_en>
 130:	08 95       	ret

00000132 <getTick>:
}

uint16_t getTick(void){
	return tick;
 132:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 136:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
}
 13a:	08 95       	ret

0000013c <__vector_12>:


ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
 13c:	78 94       	sei
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
		
	disableTimer();
 160:	de df       	rcall	.-68     	; 0x11e <disableTimer>
	if(cnt == 1 && hskp_en){//reading ace values
 162:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	89 f4       	brne	.+34     	; 0x18c <__vector_12+0x50>
 16a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <hskp_en>
 16e:	99 23       	and	r25, r25
 170:	69 f0       	breq	.+26     	; 0x18c <__vector_12+0x50>
		adc_val_new = ADCRead();
 172:	82 df       	rcall	.-252    	; 0x78 <ADCRead>
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_val_new>
		if(adc_val_new != adc_val_old){
 178:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <adc_val_old>
 17c:	89 17       	cp	r24, r25
 17e:	89 f0       	breq	.+34     	; 0x1a2 <__vector_12+0x66>
			adc_changed = 1;
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_changed>
			adc_val_old = adc_val_new;
 186:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_val_old>
 18a:	0b c0       	rjmp	.+22     	; 0x1a2 <__vector_12+0x66>
			}
	}
	
	else if(cnt >= 10 && hskp_en){//setting leds
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	48 f0       	brcs	.+18     	; 0x1a2 <__vector_12+0x66>
 190:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hskp_en>
 194:	88 23       	and	r24, r24
 196:	29 f0       	breq	.+10     	; 0x1a2 <__vector_12+0x66>
		MovePot(pot_pos);
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19c:	8a df       	rcall	.-236    	; 0xb2 <MovePot>
		cnt = 0;
 19e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt>
	}
	enableTimer();
 1a2:	b7 df       	rcall	.-146    	; 0x112 <enableTimer>
	
	cnt++;
 1a4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cnt>
	tick++;
 1ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 1b2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tick+0x1>
 1bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tick>
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <main>:



int main(void)
{
	MCUSR = 0;//disable watchdog
 1e2:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	a8 95       	wdr
 1ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 1ee:	88 61       	ori	r24, 0x18	; 24
 1f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 1f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 1f8:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	ADCInit();
 1fa:	27 df       	rcall	.-434    	; 0x4a <ADCInit>
	timersInit();
 1fc:	7e df       	rcall	.-260    	; 0xfa <timersInit>
	SPIInit();
 1fe:	a9 d0       	rcall	.+338    	; 0x352 <SPIInit>
	bufferInit();
 200:	c1 d0       	rcall	.+386    	; 0x384 <bufferInit>
	
	sei();		
 202:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	80 e7       	ldi	r24, 0x70	; 112
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <__DATA_REGION_LENGTH__+0xa>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
 214:	00 00       	nop
	
		
		
	while (1){
		
		parseSPI();
 216:	0c d0       	rcall	.+24     	; 0x230 <parseSPI>
		
		if(adc_changed){
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adc_changed>
 21c:	88 23       	and	r24, r24
 21e:	d9 f3       	breq	.-10     	; 0x216 <__DATA_REGION_LENGTH__+0x16>
			writeSpi(1, adc_val_new, 10);
 220:	4a e0       	ldi	r20, 0x0A	; 10
 222:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <adc_val_new>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	2e d1       	rcall	.+604    	; 0x486 <writeSpi>
			adc_changed = 0;
 22a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <adc_changed>
 22e:	f3 cf       	rjmp	.-26     	; 0x216 <__DATA_REGION_LENGTH__+0x16>

00000230 <parseSPI>:





int parseSPI(void){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	
	if(buffer_length == 0)return 0;
 234:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buffer_length>
 238:	88 23       	and	r24, r24
 23a:	09 f4       	brne	.+2      	; 0x23e <parseSPI+0xe>
 23c:	7c c0       	rjmp	.+248    	; 0x336 <__stack+0x37>

	//PORTB ^= 1<<PORTB6;
	//disableHSKP();
	int start_tick = getTick();
 23e:	79 df       	rcall	.-270    	; 0x132 <getTick>
 240:	ec 01       	movw	r28, r24
	
	parsing_state = PARSING_INSTR;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <parsing_state>
	int cmd = readBuffer();
 248:	f6 d0       	rcall	.+492    	; 0x436 <readBuffer>
	
	switch(cmd){
 24a:	87 31       	cpi	r24, 0x17	; 23
 24c:	91 05       	cpc	r25, r1
 24e:	a4 f4       	brge	.+40     	; 0x278 <parseSPI+0x48>
 250:	85 31       	cpi	r24, 0x15	; 21
 252:	91 05       	cpc	r25, r1
 254:	0c f0       	brlt	.+2      	; 0x258 <parseSPI+0x28>
 256:	6b c0       	rjmp	.+214    	; 0x32e <__stack+0x2f>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	91 05       	cpc	r25, r1
 25c:	69 f1       	breq	.+90     	; 0x2b8 <parseSPI+0x88>
 25e:	34 f4       	brge	.+12     	; 0x26c <parseSPI+0x3c>
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	09 f4       	brne	.+2      	; 0x266 <parseSPI+0x36>
 264:	64 c0       	rjmp	.+200    	; 0x32e <__stack+0x2f>
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	c9 f0       	breq	.+50     	; 0x29c <parseSPI+0x6c>
 26a:	60 c0       	rjmp	.+192    	; 0x32c <__stack+0x2d>
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	91 05       	cpc	r25, r1
 270:	89 f1       	breq	.+98     	; 0x2d4 <parseSPI+0xa4>
 272:	44 97       	sbiw	r24, 0x14	; 20
 274:	d1 f1       	breq	.+116    	; 0x2ea <parseSPI+0xba>
 276:	5a c0       	rjmp	.+180    	; 0x32c <__stack+0x2d>
 278:	8d 3f       	cpi	r24, 0xFD	; 253
 27a:	91 05       	cpc	r25, r1
 27c:	09 f4       	brne	.+2      	; 0x280 <parseSPI+0x50>
 27e:	44 c0       	rjmp	.+136    	; 0x308 <__stack+0x9>
 280:	24 f4       	brge	.+8      	; 0x28a <parseSPI+0x5a>
 282:	8c 3f       	cpi	r24, 0xFC	; 252
 284:	91 05       	cpc	r25, r1
 286:	a9 f1       	breq	.+106    	; 0x2f2 <parseSPI+0xc2>
 288:	51 c0       	rjmp	.+162    	; 0x32c <__stack+0x2d>
 28a:	8e 3f       	cpi	r24, 0xFE	; 254
 28c:	91 05       	cpc	r25, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <parseSPI+0x62>
 290:	41 c0       	rjmp	.+130    	; 0x314 <__stack+0x15>
 292:	8f 3f       	cpi	r24, 0xFF	; 255
 294:	91 05       	cpc	r25, r1
 296:	09 f4       	brne	.+2      	; 0x29a <parseSPI+0x6a>
 298:	44 c0       	rjmp	.+136    	; 0x322 <__stack+0x23>
 29a:	48 c0       	rjmp	.+144    	; 0x32c <__stack+0x2d>
		
		case 0: //do nothing
			break;
		
		case 1: //write ace value
			writeSpi(1, pot_pos, 10);
 29c:	4a e0       	ldi	r20, 0x0A	; 10
 29e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	f0 d0       	rcall	.+480    	; 0x486 <writeSpi>
			break;
 2a6:	43 c0       	rjmp	.+134    	; 0x32e <__stack+0x2f>
		
		case 2: //get ace value
			while(readBufferLength() == 0){if(getTick()>(start_tick+MAX_TIMEOUT))return -1;}
 2a8:	44 df       	rcall	.-376    	; 0x132 <getTick>
 2aa:	9e 01       	movw	r18, r28
 2ac:	28 57       	subi	r18, 0x78	; 120
 2ae:	3c 4e       	sbci	r19, 0xEC	; 236
 2b0:	28 17       	cp	r18, r24
 2b2:	39 07       	cpc	r19, r25
 2b4:	08 f4       	brcc	.+2      	; 0x2b8 <parseSPI+0x88>
 2b6:	42 c0       	rjmp	.+132    	; 0x33c <__stack+0x3d>
 2b8:	e2 d0       	rcall	.+452    	; 0x47e <readBufferLength>
 2ba:	89 2b       	or	r24, r25
 2bc:	a9 f3       	breq	.-22     	; 0x2a8 <parseSPI+0x78>
			pot_pos = readBuffer();
 2be:	bb d0       	rcall	.+374    	; 0x436 <readBuffer>
 2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 2c4:	34 c0       	rjmp	.+104    	; 0x32e <__stack+0x2f>
		
		case 3: //get ace value
			while(readBufferLength() == 0){if(getTick()>(start_tick+MAX_TIMEOUT))return -1;}
 2c6:	35 df       	rcall	.-406    	; 0x132 <getTick>
 2c8:	9e 01       	movw	r18, r28
 2ca:	28 57       	subi	r18, 0x78	; 120
 2cc:	3c 4e       	sbci	r19, 0xEC	; 236
 2ce:	28 17       	cp	r18, r24
 2d0:	39 07       	cpc	r19, r25
 2d2:	b8 f1       	brcs	.+110    	; 0x342 <__stack+0x43>
 2d4:	d4 d0       	rcall	.+424    	; 0x47e <readBufferLength>
 2d6:	89 2b       	or	r24, r25
 2d8:	b1 f3       	breq	.-20     	; 0x2c6 <parseSPI+0x96>
 2da:	29 c0       	rjmp	.+82     	; 0x32e <__stack+0x2f>
			//led_settings.ace_en = readBuffer();
			break;
			
		case 20:// LED mode
			while(readBufferLength() == 0){if(getTick()>(start_tick+MAX_TIMEOUT))return -1;}
 2dc:	2a df       	rcall	.-428    	; 0x132 <getTick>
 2de:	9e 01       	movw	r18, r28
 2e0:	28 57       	subi	r18, 0x78	; 120
 2e2:	3c 4e       	sbci	r19, 0xEC	; 236
 2e4:	28 17       	cp	r18, r24
 2e6:	39 07       	cpc	r19, r25
 2e8:	78 f1       	brcs	.+94     	; 0x348 <__stack+0x49>
 2ea:	c9 d0       	rcall	.+402    	; 0x47e <readBufferLength>
 2ec:	89 2b       	or	r24, r25
 2ee:	b1 f3       	breq	.-20     	; 0x2dc <parseSPI+0xac>
 2f0:	1e c0       	rjmp	.+60     	; 0x32e <__stack+0x2f>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 2f2:	98 e0       	ldi	r25, 0x08	; 8
 2f4:	88 e1       	ldi	r24, 0x18	; 24
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	a8 95       	wdr
 2fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 300:	0f be       	out	0x3f, r0	; 63
 302:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stack+0x7>
			
		case 252://report current buffer
			soft_reset();
			break;
		case 253://report current buffer
			writeSpi(253, readBufferLength(), 100);
 308:	ba d0       	rcall	.+372    	; 0x47e <readBufferLength>
 30a:	44 e6       	ldi	r20, 0x64	; 100
 30c:	68 2f       	mov	r22, r24
 30e:	8d ef       	ldi	r24, 0xFD	; 253
 310:	ba d0       	rcall	.+372    	; 0x486 <writeSpi>
			break;
 312:	0d c0       	rjmp	.+26     	; 0x32e <__stack+0x2f>
		
		case 254://report current buffer
			writeSpiBuffer(254, buffer, BUFFER_SIZE, 100);
 314:	24 e6       	ldi	r18, 0x64	; 100
 316:	44 e6       	ldi	r20, 0x64	; 100
 318:	6d e0       	ldi	r22, 0x0D	; 13
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	8e ef       	ldi	r24, 0xFE	; 254
 31e:	10 d1       	rcall	.+544    	; 0x540 <writeSpiBuffer>
			break;
 320:	06 c0       	rjmp	.+12     	; 0x32e <__stack+0x2f>
					
		case 255:
			writeSpi(255, MOTORISED_POTT, 100);
 322:	44 e6       	ldi	r20, 0x64	; 100
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	ae d0       	rcall	.+348    	; 0x486 <writeSpi>
			break;
 32a:	01 c0       	rjmp	.+2      	; 0x32e <__stack+0x2f>
		default: bufferInit();
 32c:	2b d0       	rcall	.+86     	; 0x384 <bufferInit>
		
	}
	bufferInit();
 32e:	2a d0       	rcall	.+84     	; 0x384 <bufferInit>
	//PORTB ^= 1<<PORTB6;
	return 0;	
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0b c0       	rjmp	.+22     	; 0x34c <__stack+0x4d>



int parseSPI(void){
	
	if(buffer_length == 0)return 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 c0       	rjmp	.+16     	; 0x34c <__stack+0x4d>
		case 1: //write ace value
			writeSpi(1, pot_pos, 10);
			break;
		
		case 2: //get ace value
			while(readBufferLength() == 0){if(getTick()>(start_tick+MAX_TIMEOUT))return -1;}
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	9f ef       	ldi	r25, 0xFF	; 255
 340:	05 c0       	rjmp	.+10     	; 0x34c <__stack+0x4d>
			pot_pos = readBuffer();
			break;
		
		case 3: //get ace value
			while(readBufferLength() == 0){if(getTick()>(start_tick+MAX_TIMEOUT))return -1;}
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	02 c0       	rjmp	.+4      	; 0x34c <__stack+0x4d>
			//led_settings.ace_en = readBuffer();
			break;
			
		case 20:// LED mode
			while(readBufferLength() == 0){if(getTick()>(start_tick+MAX_TIMEOUT))return -1;}
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9f ef       	ldi	r25, 0xFF	; 255
		
	}
	bufferInit();
	//PORTB ^= 1<<PORTB6;
	return 0;	
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <SPIInit>:



void SPIInit(void){
			
	DDRB &= ~(1<<DDB7); //set HIZ mode
 352:	84 b1       	in	r24, 0x04	; 4
 354:	8f 77       	andi	r24, 0x7F	; 127
 356:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB7);
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	8f 77       	andi	r24, 0x7F	; 127
 35c:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB4; //set MISO output
 35e:	84 b1       	in	r24, 0x04	; 4
 360:	80 61       	ori	r24, 0x10	; 16
 362:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= 1<< DDB6;
 364:	84 b1       	in	r24, 0x04	; 4
 366:	80 64       	ori	r24, 0x40	; 64
 368:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0; //interrupt for SS
 36a:	e8 e6       	ldi	r30, 0x68	; 104
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT2;
 374:	eb e6       	ldi	r30, 0x6B	; 107
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	80 83       	st	Z, r24
	
	SPCR = 1<<SPE;// | 1<<SPIE; //enable SPI
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	8c bd       	out	0x2c, r24	; 44
 382:	08 95       	ret

00000384 <bufferInit>:
}


void bufferInit(void){
	
	read_index = 0;
 384:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <read_index>
	write_index = 0;
 388:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <write_index>
	buffer_length = 0;
 38c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buffer_length>
	buffer[0] = 0;
 390:	ed e0       	ldi	r30, 0x0D	; 13
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	10 82       	st	Z, r1
	buffer[1] = 0;
 396:	11 82       	std	Z+1, r1	; 0x01
 398:	08 95       	ret

0000039a <writeBuffer>:
}

int writeBuffer(uint8_t val){
	
	if(buffer_length == BUFFER_SIZE - 1) return -1;
 39a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buffer_length>
 39e:	93 36       	cpi	r25, 0x63	; 99
 3a0:	c9 f0       	breq	.+50     	; 0x3d4 <writeBuffer+0x3a>
	buffer[write_index] = val;
 3a2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <write_index>
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e3 5f       	subi	r30, 0xF3	; 243
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	80 83       	st	Z, r24
	write_index++;
 3ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <write_index>
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <write_index>
	buffer_length++;
 3b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buffer_length>
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buffer_length>
	if(write_index == BUFFER_SIZE - 1) write_index = 0;
 3c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <write_index>
 3c6:	83 36       	cpi	r24, 0x63	; 99
 3c8:	41 f4       	brne	.+16     	; 0x3da <writeBuffer+0x40>
 3ca:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <write_index>
	return 0;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret
	buffer[1] = 0;
}

int writeBuffer(uint8_t val){
	
	if(buffer_length == BUFFER_SIZE - 1) return -1;
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
 3d8:	08 95       	ret
	buffer[write_index] = val;
	write_index++;
	buffer_length++;
	if(write_index == BUFFER_SIZE - 1) write_index = 0;
	return 0;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
}
 3de:	08 95       	ret

000003e0 <__vector_3>:
uint8_t volatile write_index = 0;
uint8_t volatile spi_busy = 0;



 ISR(PCINT0_vect){
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
	if(!(PINB & 1<<PINB2) ||/* !(PINB & 1<<PINB7)*/ spi_busy)return;
 402:	1a 9b       	sbis	0x03, 2	; 3
 404:	07 c0       	rjmp	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 406:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <spi_busy>
 40a:	81 11       	cpse	r24, r1
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	
	writeBuffer(SPDR);
 40e:	8e b5       	in	r24, 0x2e	; 46
 410:	c4 df       	rcall	.-120    	; 0x39a <writeBuffer>
	SPDR = 0;
 412:	1e bc       	out	0x2e, r1	; 46
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <readBuffer>:
	return 0;
}

int readBuffer(void){
	
	if(buffer_length == 0) return -1;
 436:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buffer_length>
 43a:	88 23       	and	r24, r24
 43c:	d1 f0       	breq	.+52     	; 0x472 <readBuffer+0x3c>
	int buf = buffer[read_index];
 43e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <read_index>
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	e3 5f       	subi	r30, 0xF3	; 243
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	20 81       	ld	r18, Z
 44a:	30 e0       	ldi	r19, 0x00	; 0
	read_index++;
 44c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <read_index>
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <read_index>
	buffer_length--;
 456:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buffer_length>
 45a:	81 50       	subi	r24, 0x01	; 1
 45c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buffer_length>
	if(read_index == BUFFER_SIZE - 1) read_index = 0;
 460:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <read_index>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	41 f4       	brne	.+16     	; 0x478 <readBuffer+0x42>
 468:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <read_index>
	return buf;
 46c:	82 2f       	mov	r24, r18
 46e:	93 2f       	mov	r25, r19
 470:	08 95       	ret
	return 0;
}

int readBuffer(void){
	
	if(buffer_length == 0) return -1;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	08 95       	ret
	int buf = buffer[read_index];
	read_index++;
	buffer_length--;
	if(read_index == BUFFER_SIZE - 1) read_index = 0;
	return buf;
 478:	82 2f       	mov	r24, r18
 47a:	93 2f       	mov	r25, r19
}
 47c:	08 95       	ret

0000047e <readBufferLength>:

int readBufferLength(void){
	return buffer_length;
 47e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buffer_length>
}
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	08 95       	ret

00000486 <writeSpi>:

void writeSpi(uint8_t instr, uint8_t data, uint8_t timeout){
 486:	cf 92       	push	r12
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	18 2f       	mov	r17, r24
 496:	d6 2f       	mov	r29, r22
 498:	c4 2f       	mov	r28, r20
	
	while(!(PINB & 1<<PINB7) && !(PINB & 1<<PINB2));
 49a:	1f 99       	sbic	0x03, 7	; 3
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <writeSpi+0x1c>
 49e:	1a 9b       	sbis	0x03, 2	; 3
 4a0:	fc cf       	rjmp	.-8      	; 0x49a <writeSpi+0x14>
	disableTimer();
 4a2:	3d de       	rcall	.-902    	; 0x11e <disableTimer>
	spi_busy = 1;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <spi_busy>
	uint32_t start_tick = getTick();
 4aa:	43 de       	rcall	.-890    	; 0x132 <getTick>
 4ac:	6c 01       	movw	r12, r24
 4ae:	e1 2c       	mov	r14, r1
 4b0:	f1 2c       	mov	r15, r1

	SPSR;
 4b2:	8d b5       	in	r24, 0x2d	; 45
	SPDR = instr;
 4b4:	1e bd       	out	0x2e, r17	; 46
	
	PORTB &= ~(1<<PORTB7);//set INT low
 4b6:	85 b1       	in	r24, 0x05	; 5
 4b8:	8f 77       	andi	r24, 0x7F	; 127
 4ba:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 4bc:	84 b1       	in	r24, 0x04	; 4
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	84 b9       	out	0x04, r24	; 4
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout)break;}
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <writeSpi+0x5a>
 4c4:	36 de       	rcall	.-916    	; 0x132 <getTick>
 4c6:	a0 e0       	ldi	r26, 0x00	; 0
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	b7 01       	movw	r22, r14
 4cc:	a6 01       	movw	r20, r12
 4ce:	4c 0f       	add	r20, r28
 4d0:	51 1d       	adc	r21, r1
 4d2:	61 1d       	adc	r22, r1
 4d4:	71 1d       	adc	r23, r1
 4d6:	48 17       	cp	r20, r24
 4d8:	59 07       	cpc	r21, r25
 4da:	6a 07       	cpc	r22, r26
 4dc:	7b 07       	cpc	r23, r27
 4de:	28 f0       	brcs	.+10     	; 0x4ea <writeSpi+0x64>
 4e0:	0d b4       	in	r0, 0x2d	; 45
 4e2:	07 fe       	sbrs	r0, 7
 4e4:	ef cf       	rjmp	.-34     	; 0x4c4 <writeSpi+0x3e>
 4e6:	1a 9b       	sbis	0x03, 2	; 3
 4e8:	ed cf       	rjmp	.-38     	; 0x4c4 <writeSpi+0x3e>
	
	SPDR = data;
 4ea:	de bd       	out	0x2e, r29	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout)break;}
 4ec:	0e c0       	rjmp	.+28     	; 0x50a <writeSpi+0x84>
 4ee:	21 de       	rcall	.-958    	; 0x132 <getTick>
 4f0:	a0 e0       	ldi	r26, 0x00	; 0
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	b7 01       	movw	r22, r14
 4f6:	a6 01       	movw	r20, r12
 4f8:	4c 0f       	add	r20, r28
 4fa:	51 1d       	adc	r21, r1
 4fc:	61 1d       	adc	r22, r1
 4fe:	71 1d       	adc	r23, r1
 500:	48 17       	cp	r20, r24
 502:	59 07       	cpc	r21, r25
 504:	6a 07       	cpc	r22, r26
 506:	7b 07       	cpc	r23, r27
 508:	28 f0       	brcs	.+10     	; 0x514 <writeSpi+0x8e>
 50a:	0d b4       	in	r0, 0x2d	; 45
 50c:	07 fe       	sbrs	r0, 7
 50e:	ef cf       	rjmp	.-34     	; 0x4ee <writeSpi+0x68>
 510:	1a 9b       	sbis	0x03, 2	; 3
 512:	ed cf       	rjmp	.-38     	; 0x4ee <writeSpi+0x68>
	
	PORTB &= ~(1<<PORTB7); //set INT high
 514:	85 b1       	in	r24, 0x05	; 5
 516:	8f 77       	andi	r24, 0x7F	; 127
 518:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 51a:	84 b1       	in	r24, 0x04	; 4
 51c:	8f 77       	andi	r24, 0x7F	; 127
 51e:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0;
 520:	e8 e6       	ldi	r30, 0x68	; 104
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	81 60       	ori	r24, 0x01	; 1
 528:	80 83       	st	Z, r24
	enableTimer();
 52a:	f3 dd       	rcall	.-1050   	; 0x112 <enableTimer>
	spi_busy = 0;
 52c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <spi_busy>
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	08 95       	ret

00000540 <writeSpiBuffer>:

void writeSpiBuffer(uint8_t instr, uint8_t* data, uint8_t length, uint8_t timeout){
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	c8 2f       	mov	r28, r24
 556:	8b 01       	movw	r16, r22
 558:	a4 2e       	mov	r10, r20
 55a:	b2 2e       	mov	r11, r18
	
	while(!(PINB & 1<<PINB7) && !(PINB & 1<<PINB2));
 55c:	1f 99       	sbic	0x03, 7	; 3
 55e:	02 c0       	rjmp	.+4      	; 0x564 <writeSpiBuffer+0x24>
 560:	1a 9b       	sbis	0x03, 2	; 3
 562:	fc cf       	rjmp	.-8      	; 0x55c <writeSpiBuffer+0x1c>
	disableTimer();
 564:	dc dd       	rcall	.-1096   	; 0x11e <disableTimer>
	spi_busy = 1;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <spi_busy>
	uint32_t start_tick = getTick();
 56c:	e2 dd       	rcall	.-1084   	; 0x132 <getTick>
 56e:	6c 01       	movw	r12, r24
 570:	e1 2c       	mov	r14, r1
 572:	f1 2c       	mov	r15, r1

	
	SPSR;		//clearing spif flag
 574:	8d b5       	in	r24, 0x2d	; 45
	SPDR = instr;		//set instr
 576:	ce bd       	out	0x2e, r28	; 46
	
	PORTB &= ~(1<<PORTB7);	//set INT low
 578:	85 b1       	in	r24, 0x05	; 5
 57a:	8f 77       	andi	r24, 0x7F	; 127
 57c:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 57e:	84 b1       	in	r24, 0x04	; 4
 580:	80 68       	ori	r24, 0x80	; 128
 582:	84 b9       	out	0x04, r24	; 4

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout)break;}
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <writeSpiBuffer+0x62>
 586:	d5 dd       	rcall	.-1110   	; 0x132 <getTick>
 588:	a0 e0       	ldi	r26, 0x00	; 0
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	b7 01       	movw	r22, r14
 58e:	a6 01       	movw	r20, r12
 590:	4b 0d       	add	r20, r11
 592:	51 1d       	adc	r21, r1
 594:	61 1d       	adc	r22, r1
 596:	71 1d       	adc	r23, r1
 598:	48 17       	cp	r20, r24
 59a:	59 07       	cpc	r21, r25
 59c:	6a 07       	cpc	r22, r26
 59e:	7b 07       	cpc	r23, r27
 5a0:	28 f0       	brcs	.+10     	; 0x5ac <writeSpiBuffer+0x6c>
 5a2:	0d b4       	in	r0, 0x2d	; 45
 5a4:	07 fe       	sbrs	r0, 7
 5a6:	ef cf       	rjmp	.-34     	; 0x586 <writeSpiBuffer+0x46>
 5a8:	1a 9b       	sbis	0x03, 2	; 3
 5aa:	ed cf       	rjmp	.-38     	; 0x586 <writeSpiBuffer+0x46>
	SPDR = length;
 5ac:	ae bc       	out	0x2e, r10	; 46
	
	for(int i=0; i<length; i++){
 5ae:	c0 e0       	ldi	r28, 0x00	; 0
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	19 c0       	rjmp	.+50     	; 0x5e6 <writeSpiBuffer+0xa6>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout)break;}
 5b4:	be dd       	rcall	.-1156   	; 0x132 <getTick>
 5b6:	a0 e0       	ldi	r26, 0x00	; 0
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	b7 01       	movw	r22, r14
 5bc:	a6 01       	movw	r20, r12
 5be:	4b 0d       	add	r20, r11
 5c0:	51 1d       	adc	r21, r1
 5c2:	61 1d       	adc	r22, r1
 5c4:	71 1d       	adc	r23, r1
 5c6:	48 17       	cp	r20, r24
 5c8:	59 07       	cpc	r21, r25
 5ca:	6a 07       	cpc	r22, r26
 5cc:	7b 07       	cpc	r23, r27
 5ce:	28 f0       	brcs	.+10     	; 0x5da <writeSpiBuffer+0x9a>
 5d0:	0d b4       	in	r0, 0x2d	; 45
 5d2:	07 fe       	sbrs	r0, 7
 5d4:	ef cf       	rjmp	.-34     	; 0x5b4 <writeSpiBuffer+0x74>
 5d6:	1a 9b       	sbis	0x03, 2	; 3
 5d8:	ed cf       	rjmp	.-38     	; 0x5b4 <writeSpiBuffer+0x74>
		SPDR = data[i];
 5da:	f8 01       	movw	r30, r16
 5dc:	ec 0f       	add	r30, r28
 5de:	fd 1f       	adc	r31, r29
 5e0:	80 81       	ld	r24, Z
 5e2:	8e bd       	out	0x2e, r24	; 46

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout)break;}
	SPDR = length;
	
	for(int i=0; i<length; i++){
 5e4:	21 96       	adiw	r28, 0x01	; 1
 5e6:	8a 2d       	mov	r24, r10
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	c8 17       	cp	r28, r24
 5ec:	d9 07       	cpc	r29, r25
 5ee:	84 f3       	brlt	.-32     	; 0x5d0 <writeSpiBuffer+0x90>
 5f0:	0e c0       	rjmp	.+28     	; 0x60e <writeSpiBuffer+0xce>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout)break;}
		SPDR = data[i];
	}
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick()>start_tick+timeout) break;}
 5f2:	9f dd       	rcall	.-1218   	; 0x132 <getTick>
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	b7 01       	movw	r22, r14
 5fa:	a6 01       	movw	r20, r12
 5fc:	4b 0d       	add	r20, r11
 5fe:	51 1d       	adc	r21, r1
 600:	61 1d       	adc	r22, r1
 602:	71 1d       	adc	r23, r1
 604:	48 17       	cp	r20, r24
 606:	59 07       	cpc	r21, r25
 608:	6a 07       	cpc	r22, r26
 60a:	7b 07       	cpc	r23, r27
 60c:	28 f0       	brcs	.+10     	; 0x618 <writeSpiBuffer+0xd8>
 60e:	0d b4       	in	r0, 0x2d	; 45
 610:	07 fe       	sbrs	r0, 7
 612:	ef cf       	rjmp	.-34     	; 0x5f2 <writeSpiBuffer+0xb2>
 614:	1a 9b       	sbis	0x03, 2	; 3
 616:	ed cf       	rjmp	.-38     	; 0x5f2 <writeSpiBuffer+0xb2>
	PORTB &= ~(1<<PORTB7); //set INT high
 618:	85 b1       	in	r24, 0x05	; 5
 61a:	8f 77       	andi	r24, 0x7F	; 127
 61c:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 61e:	84 b1       	in	r24, 0x04	; 4
 620:	8f 77       	andi	r24, 0x7F	; 127
 622:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	PCICR |= 1<< PCIE0;
 624:	e8 e6       	ldi	r30, 0x68	; 104
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	80 83       	st	Z, r24
	enableHSKP();
 62e:	7d dd       	rcall	.-1286   	; 0x12a <enableHSKP>
	spi_busy = 0;
 630:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <spi_busy>
	//if(getTick()>start_tick+timeout)errorHandler();
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	bf 90       	pop	r11
 646:	af 90       	pop	r10
 648:	08 95       	ret

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>

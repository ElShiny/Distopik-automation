
Motorised pott.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  00800100  00800100  00000c84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002440  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de4  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010cb  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  00005590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c9  00000000  00000000  00005c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006d5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	0c c4       	rjmp	.+2072   	; 0x820 <__vector_3>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	37 c1       	rjmp	.+622    	; 0x288 <__vector_12>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	22 e0       	ldi	r18, 0x02	; 2
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a0 38       	cpi	r26, 0x80	; 128
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	ac d1       	rcall	.+856    	; 0x39e <main>
  46:	e2 c5       	rjmp	.+3012   	; 0xc0c <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <ADCInit>:





void ADCInit(adc_t *adc){
  4a:	fc 01       	movw	r30, r24
	
	ADMUX |= 1<<REFS0 | ADC4D;
  4c:	ac e7       	ldi	r26, 0x7C	; 124
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	9c 91       	ld	r25, X
  52:	94 64       	ori	r25, 0x44	; 68
  54:	9c 93       	st	X, r25
	ADCSRA |= 1<<ADEN | 0b111;
  56:	aa e7       	ldi	r26, 0x7A	; 122
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	9c 91       	ld	r25, X
  5c:	97 68       	ori	r25, 0x87	; 135
  5e:	9c 93       	st	X, r25
	
	DDRD |= 1<<0;//motor sleep
  60:	9a b1       	in	r25, 0x0a	; 10
  62:	91 60       	ori	r25, 0x01	; 1
  64:	9a b9       	out	0x0a, r25	; 10
	//PORTD |= 1<<PORTD0;
	
	DDRB |= 1<<DDB1;//motor en
  66:	94 b1       	in	r25, 0x04	; 4
  68:	92 60       	ori	r25, 0x02	; 2
  6a:	94 b9       	out	0x04, r25	; 4
	//PORTB |= 1<<PORTB1;
	
	DDRB |= 1<<DDB0;//motor smer
  6c:	94 b1       	in	r25, 0x04	; 4
  6e:	91 60       	ori	r25, 0x01	; 1
  70:	94 b9       	out	0x04, r25	; 4
	
	adc->spi_changed = 1;
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	82 87       	std	Z+10, r24	; 0x0a
	adc->pot_pos = 0;
  76:	11 82       	std	Z+1, r1	; 0x01
  78:	10 82       	st	Z, r1
  7a:	08 95       	ret

0000007c <ADCRead>:
}

uint16_t ADCRead(void){
	ADCSRA |= 1<<ADSC;
  7c:	ea e7       	ldi	r30, 0x7A	; 122
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	80 64       	ori	r24, 0x40	; 64
  84:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
  86:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  8a:	84 ff       	sbrs	r24, 4
  8c:	fc cf       	rjmp	.-8      	; 0x86 <ADCRead+0xa>
	ADCSRA |= 1<<ADIF;
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 61       	ori	r24, 0x10	; 16
  96:	80 83       	st	Z, r24
	ADCSRA &= ~(0<<ADIF);
  98:	80 81       	ld	r24, Z
  9a:	80 83       	st	Z, r24
	uint8_t val_low = ADCL;
  9c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
	uint16_t val = ADCH<<8 | val_low;
  a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	98 2f       	mov	r25, r24
  a8:	88 27       	eor	r24, r24
	return val;
}
  aa:	82 2b       	or	r24, r18
  ac:	08 95       	ret

000000ae <MotorRot>:

void MotorRot(uint8_t rotation){
	switch(rotation){
  ae:	88 23       	and	r24, r24
  b0:	19 f0       	breq	.+6      	; 0xb8 <MotorRot+0xa>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	29 f0       	breq	.+10     	; 0xc0 <MotorRot+0x12>
  b6:	08 95       	ret
		case LEFT:
			PORTB |= 1<<PORTB0;
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	85 b9       	out	0x05, r24	; 5
			break;
  be:	08 95       	ret
			
		case RIGHT:
			PORTB &= ~(1<<PORTB0);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <MotorEn>:
			break;
	}
}
void MotorEn(uint8_t en){
	if(!en) PORTD &= ~(1<<PORTD0);
  c8:	81 11       	cpse	r24, r1
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <MotorEn+0xc>
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret
	else PORTD |= 1<<PORTD0;
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	08 95       	ret

000000dc <MovePot>:
}


void MovePot(adc_t *adc, pwm_t *pwm, uint16_t pos){
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	7b 01       	movw	r14, r22
  ec:	8a 01       	movw	r16, r20
	
	if(adc->spi_changed == 0){
  ee:	8a 85       	ldd	r24, Y+10	; 0x0a
  f0:	81 11       	cpse	r24, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <MovePot+0x1c>
		MotorEn(0);
  f4:	e9 df       	rcall	.-46     	; 0xc8 <MotorEn>
		return;
  f6:	43 c0       	rjmp	.+134    	; 0x17e <MovePot+0xa2>
	}
	else MotorEn(1);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	e6 df       	rcall	.-52     	; 0xc8 <MotorEn>

	if(pos < adc->adc_val_new){MotorRot(LEFT);}
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	08 17       	cp	r16, r24
 102:	19 07       	cpc	r17, r25
 104:	10 f4       	brcc	.+4      	; 0x10a <MovePot+0x2e>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	d2 df       	rcall	.-92     	; 0xae <MotorRot>
	if(pos > adc->adc_val_new){MotorRot(RIGHT);}
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	9b 81       	ldd	r25, Y+3	; 0x03
 10e:	80 17       	cp	r24, r16
 110:	91 07       	cpc	r25, r17
 112:	10 f4       	brcc	.+4      	; 0x118 <MovePot+0x3c>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	cb df       	rcall	.-106    	; 0xae <MotorRot>
		
	if(abs(pos - adc->adc_val_new) < 200)OCR1A = 100;
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	98 01       	movw	r18, r16
 11e:	28 1b       	sub	r18, r24
 120:	39 0b       	sbc	r19, r25
 122:	c9 01       	movw	r24, r18
 124:	89 33       	cpi	r24, 0x39	; 57
 126:	3f ef       	ldi	r19, 0xFF	; 255
 128:	93 07       	cpc	r25, r19
 12a:	54 f0       	brlt	.+20     	; 0x140 <MovePot+0x64>
 12c:	88 3c       	cpi	r24, 0xC8	; 200
 12e:	91 05       	cpc	r25, r1
 130:	3c f4       	brge	.+14     	; 0x140 <MovePot+0x64>
 132:	84 e6       	ldi	r24, 0x64	; 100
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 13a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
 13e:	06 c0       	rjmp	.+12     	; 0x14c <MovePot+0x70>
	else OCR1A = 150;
 140:	86 e9       	ldi	r24, 0x96	; 150
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 148:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	
	if(pos == adc->adc_val_new){
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	9b 81       	ldd	r25, Y+3	; 0x03
 150:	08 17       	cp	r16, r24
 152:	19 07       	cpc	r17, r25
 154:	a1 f4       	brne	.+40     	; 0x17e <MovePot+0xa2>
		if(pwm->first_time == 1){
 156:	f7 01       	movw	r30, r14
 158:	82 81       	ldd	r24, Z+2	; 0x02
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	69 f4       	brne	.+26     	; 0x178 <MovePot+0x9c>
			MotorRot(LEFT);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	a6 df       	rcall	.-180    	; 0xae <MotorRot>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	ff ef       	ldi	r31, 0xFF	; 255
 164:	20 e7       	ldi	r18, 0x70	; 112
 166:	32 e0       	ldi	r19, 0x02	; 2
 168:	f1 50       	subi	r31, 0x01	; 1
 16a:	20 40       	sbci	r18, 0x00	; 0
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <MovePot+0x8c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <MovePot+0x96>
 172:	00 00       	nop
			_delay_ms(100);
			pwm->first_time = 0;
 174:	f7 01       	movw	r30, r14
 176:	12 82       	std	Z+2, r1	; 0x02
			}
		MotorEn(0);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	a6 df       	rcall	.-180    	; 0xc8 <MotorEn>
		adc->spi_changed = 0;
 17c:	1a 86       	std	Y+10, r1	; 0x0a
	}
		
	//MotorEn(1);

}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

0000018c <movingAvg>:

int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	db 01       	movw	r26, r22
	//Subtract the oldest number from the prev sum, add the new number
	*ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 19a:	cd 90       	ld	r12, X+
 19c:	dd 90       	ld	r13, X+
 19e:	ed 90       	ld	r14, X+
 1a0:	fc 90       	ld	r15, X
 1a2:	13 97       	sbiw	r26, 0x03	; 3
 1a4:	44 0f       	add	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	fc 01       	movw	r30, r24
 1aa:	e4 0f       	add	r30, r20
 1ac:	f5 1f       	adc	r31, r21
 1ae:	40 81       	ld	r20, Z
 1b0:	51 81       	ldd	r21, Z+1	; 0x01
 1b2:	05 2e       	mov	r0, r21
 1b4:	00 0c       	add	r0, r0
 1b6:	66 0b       	sbc	r22, r22
 1b8:	77 0b       	sbc	r23, r23
 1ba:	c4 1a       	sub	r12, r20
 1bc:	d5 0a       	sbc	r13, r21
 1be:	e6 0a       	sbc	r14, r22
 1c0:	f7 0a       	sbc	r15, r23
 1c2:	a8 01       	movw	r20, r16
 1c4:	01 2e       	mov	r0, r17
 1c6:	00 0c       	add	r0, r0
 1c8:	66 0b       	sbc	r22, r22
 1ca:	77 0b       	sbc	r23, r23
 1cc:	c4 0e       	add	r12, r20
 1ce:	d5 1e       	adc	r13, r21
 1d0:	e6 1e       	adc	r14, r22
 1d2:	f7 1e       	adc	r15, r23
 1d4:	cd 92       	st	X+, r12
 1d6:	dd 92       	st	X+, r13
 1d8:	ed 92       	st	X+, r14
 1da:	fc 92       	st	X, r15
 1dc:	13 97       	sbiw	r26, 0x03	; 3
	//Assign the nextNum to the position in the array
	ptrArrNumbers[pos] = nextNum;
 1de:	11 83       	std	Z+1, r17	; 0x01
 1e0:	00 83       	st	Z, r16
	//return the average
	return *ptrSum / len;
 1e2:	6d 91       	ld	r22, X+
 1e4:	7d 91       	ld	r23, X+
 1e6:	8d 91       	ld	r24, X+
 1e8:	9c 91       	ld	r25, X
 1ea:	03 2e       	mov	r0, r19
 1ec:	00 0c       	add	r0, r0
 1ee:	44 0b       	sbc	r20, r20
 1f0:	55 0b       	sbc	r21, r21
 1f2:	ce d4       	rcall	.+2460   	; 0xb90 <__divmodsi4>
 1f4:	c9 01       	movw	r24, r18
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

00000204 <timersInit>:
	pwm->en = 0;
}

void PWMEnable(pwm_t *pwm){
	TCCR1B |= 1<<CS10;
	pwm->en = 1;
 204:	2c e0       	ldi	r18, 0x0C	; 12
 206:	25 bd       	out	0x25, r18	; 37
 208:	2e e1       	ldi	r18, 0x1E	; 30
 20a:	27 bd       	out	0x27, r18	; 39
 20c:	22 e0       	ldi	r18, 0x02	; 2
 20e:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
 212:	16 bc       	out	0x26, r1	; 38
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	fc 01       	movw	r30, r24
 218:	24 83       	std	Z+4, r18	; 0x04
 21a:	08 95       	ret

0000021c <PWMInit>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
 222:	82 e8       	ldi	r24, 0x82	; 130
 224:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 228:	89 e1       	ldi	r24, 0x19	; 25
 22a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
 22e:	86 e9       	ldi	r24, 0x96	; 150
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fe087>
 236:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fe086>
 23a:	8b e4       	ldi	r24, 0x4B	; 75
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 242:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	3f df       	rcall	.-386    	; 0xc8 <MotorEn>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	88 83       	st	Y, r24
 24e:	8a 83       	std	Y+2, r24	; 0x02
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <enableTimer>:




void enableTimer(void){
	TIMSK0 |= 1<<OCIE0A;
 256:	ee e6       	ldi	r30, 0x6E	; 110
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret

00000262 <disableTimer>:
}

void disableTimer(void){
	TIMSK0 &= ~(1<<OCIE0A);
 262:	ee e6       	ldi	r30, 0x6E	; 110
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <enableHSKP>:
}

void enableHSKP(hskp_t *hskp){
	hskp->en = 1;
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	fc 01       	movw	r30, r24
 272:	24 83       	std	Z+4, r18	; 0x04
 274:	08 95       	ret

00000276 <disableHSKP>:
}

void disableHSKP(hskp_t *hskp){
	hskp->en = 0;
 276:	fc 01       	movw	r30, r24
 278:	14 82       	std	Z+4, r1	; 0x04
 27a:	08 95       	ret

0000027c <getTick>:
}

uint16_t getTick(hskp_t *hskp){
	return hskp->tick;
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	a2 81       	ldd	r26, Z+2	; 0x02
 284:	b3 81       	ldd	r27, Z+3	; 0x03
}
 286:	08 95       	ret

00000288 <__vector_12>:



ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
 288:	78 94       	sei
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
		
	disableTimer();
 2b4:	d6 df       	rcall	.-84     	; 0x262 <disableTimer>
	if(housekp.cnt == 1 && housekp.en){//reading ace values
 2b6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <housekp+0x5>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	b9 f5       	brne	.+110    	; 0x32c <__stack+0x2d>
 2be:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <housekp+0x4>
 2c2:	88 23       	and	r24, r24
 2c4:	99 f1       	breq	.+102    	; 0x32c <__stack+0x2d>
		adc_rot.adc_val_new = ADCRead();
 2c6:	da de       	rcall	.-588    	; 0x7c <ADCRead>
 2c8:	cb e6       	ldi	r28, 0x6B	; 107
 2ca:	d1 e0       	ldi	r29, 0x01	; 1
 2cc:	9b 83       	std	Y+3, r25	; 0x03
 2ce:	8a 83       	std	Y+2, r24	; 0x02
		adc_rot.adc_out = movingAvg(arrNumbers, &sum, pos, AVG_LENGTH, adc_rot.adc_val_new);
 2d0:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <pos>
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	8c 01       	movw	r16, r24
 2d8:	22 e3       	ldi	r18, 0x32	; 50
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	53 df       	rcall	.-346    	; 0x18c <movingAvg>
 2e6:	ac 01       	movw	r20, r24
 2e8:	9f 83       	std	Y+7, r25	; 0x07
 2ea:	8e 83       	std	Y+6, r24	; 0x06
		pos++;
 2ec:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <pos>
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <pos>
		pos2++;
 2f6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fa:	9f 5f       	subi	r25, 0xFF	; 255
 2fc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (pos >= AVG_LENGTH) pos = 0;
 300:	22 33       	cpi	r18, 0x32	; 50
 302:	10 f0       	brcs	.+4      	; 0x308 <__stack+0x9>
 304:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <pos>
		if (pos2 >= 5) pos2 = 0;
 308:	95 30       	cpi	r25, 0x05	; 5
 30a:	10 f0       	brcs	.+4      	; 0x310 <__stack+0x11>
 30c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if(adc_rot.adc_out != adc_rot.adc_val_old){
 310:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <adc_rot+0x4>
 314:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <adc_rot+0x5>
 318:	48 17       	cp	r20, r24
 31a:	59 07       	cpc	r21, r25
 31c:	d1 f0       	breq	.+52     	; 0x352 <__stack+0x53>
			//if(adc_rot.spi_changed == 0)
			adc_rot.adc_changed = 1;
 31e:	eb e6       	ldi	r30, 0x6B	; 107
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 87       	std	Z+8, r24	; 0x08
			adc_rot.adc_val_old = adc_rot.adc_out;
 326:	55 83       	std	Z+5, r21	; 0x05
 328:	44 83       	std	Z+4, r20	; 0x04
 32a:	13 c0       	rjmp	.+38     	; 0x352 <__stack+0x53>
			}
	}
	
	else if(housekp.cnt >= 10 && housekp.en){//setting leds
 32c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <housekp+0x5>
 330:	8a 30       	cpi	r24, 0x0A	; 10
 332:	78 f0       	brcs	.+30     	; 0x352 <__stack+0x53>
 334:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <housekp+0x4>
 338:	88 23       	and	r24, r24
 33a:	59 f0       	breq	.+22     	; 0x352 <__stack+0x53>
		MovePot(&adc_rot, &pwm, adc_rot.pot_pos);
 33c:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <adc_rot>
 340:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <adc_rot+0x1>
 344:	6c e7       	ldi	r22, 0x7C	; 124
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	8b e6       	ldi	r24, 0x6B	; 107
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	c7 de       	rcall	.-626    	; 0xdc <MovePot>
		housekp.cnt = 0;
 34e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <housekp+0x5>
	}
	enableTimer();
 352:	81 df       	rcall	.-254    	; 0x256 <enableTimer>
	
	housekp.cnt++;
 354:	e6 e7       	ldi	r30, 0x76	; 118
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	85 81       	ldd	r24, Z+5	; 0x05
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	85 83       	std	Z+5, r24	; 0x05
	housekp.tick++;
 35e:	80 81       	ld	r24, Z
 360:	91 81       	ldd	r25, Z+1	; 0x01
 362:	a2 81       	ldd	r26, Z+2	; 0x02
 364:	b3 81       	ldd	r27, Z+3	; 0x03
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
 36c:	80 83       	st	Z, r24
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	a2 83       	std	Z+2, r26	; 0x02
 372:	b3 83       	std	Z+3, r27	; 0x03
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <main>:



int main(void)
{
	MCUSR = 0;//disable watchdog
 39e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	a8 95       	wdr
 3a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 3aa:	88 61       	ori	r24, 0x18	; 24
 3ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 3b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 3b4:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	SPIInit();
 3b6:	ea d1       	rcall	.+980    	; 0x78c <SPIInit>
	ADCInit(&adc_rot);
 3b8:	8b e6       	ldi	r24, 0x6B	; 107
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	46 de       	rcall	.-884    	; 0x4a <ADCInit>
	timersInit(&housekp);
 3be:	86 e7       	ldi	r24, 0x76	; 118
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	20 df       	rcall	.-448    	; 0x204 <timersInit>
	bufferInit(&buf);
 3c4:	83 e8       	ldi	r24, 0x83	; 131
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	fd d1       	rcall	.+1018   	; 0x7c4 <bufferInit>
	PWMInit(&pwm);
 3ca:	8c e7       	ldi	r24, 0x7C	; 124
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	26 df       	rcall	.-436    	; 0x21c <PWMInit>
	
	sei();		
 3d0:	78 94       	sei
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	80 e7       	ldi	r24, 0x70	; 112
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x3a>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x44>
 3e2:	00 00       	nop
	
		
		
	while (1){
		
		if(buf.buffer_length){
 3e4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <buf+0xfa>
 3e8:	88 23       	and	r24, r24
 3ea:	49 f0       	breq	.+18     	; 0x3fe <main+0x60>
			recieveStateMachine(&spi_s, &adc_rot, &buf, &housekp);
 3ec:	26 e7       	ldi	r18, 0x76	; 118
 3ee:	31 e0       	ldi	r19, 0x01	; 1
 3f0:	43 e8       	ldi	r20, 0x83	; 131
 3f2:	51 e0       	ldi	r21, 0x01	; 1
 3f4:	6b e6       	ldi	r22, 0x6B	; 107
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	8f e7       	ldi	r24, 0x7F	; 127
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	77 d1       	rcall	.+750    	; 0x6ec <recieveStateMachine>
		}
		
		if(adc_rot.adc_changed && !pwm.first_time){
 3fe:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <adc_rot+0x8>
 402:	88 23       	and	r24, r24
 404:	79 f3       	breq	.-34     	; 0x3e4 <main+0x46>
 406:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <pwm+0x2>
 40a:	81 11       	cpse	r24, r1
 40c:	eb cf       	rjmp	.-42     	; 0x3e4 <main+0x46>
			writeSpi(&spi_s, &housekp, 1, adc_rot.adc_out, MAX_TIMEOUT);
 40e:	cb e6       	ldi	r28, 0x6B	; 107
 410:	d1 e0       	ldi	r29, 0x01	; 1
 412:	2e 81       	ldd	r18, Y+6	; 0x06
 414:	3f 81       	ldd	r19, Y+7	; 0x07
 416:	04 ef       	ldi	r16, 0xF4	; 244
 418:	11 e0       	ldi	r17, 0x01	; 1
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	66 e7       	ldi	r22, 0x76	; 118
 41e:	71 e0       	ldi	r23, 0x01	; 1
 420:	8f e7       	ldi	r24, 0x7F	; 127
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	74 d2       	rcall	.+1256   	; 0x90e <writeSpi>
			adc_rot.adc_changed = 0;
 426:	18 86       	std	Y+8, r1	; 0x08
 428:	dd cf       	rjmp	.-70     	; 0x3e4 <main+0x46>

0000042a <uint4TOuint16>:
			
	return 0;
}

uint16_t uint4TOuint16(uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3){
	return ((uint16_t)data3<<12)|((uint16_t)data2<<8)|((uint16_t)data1<<4)|(uint16_t)data0;
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	32 2f       	mov	r19, r18
 42e:	22 27       	eor	r18, r18
 430:	32 95       	swap	r19
 432:	30 7f       	andi	r19, 0xF0	; 240
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	54 2f       	mov	r21, r20
 438:	44 27       	eor	r20, r20
 43a:	24 2b       	or	r18, r20
 43c:	35 2b       	or	r19, r21
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	62 95       	swap	r22
 442:	72 95       	swap	r23
 444:	70 7f       	andi	r23, 0xF0	; 240
 446:	76 27       	eor	r23, r22
 448:	60 7f       	andi	r22, 0xF0	; 240
 44a:	76 27       	eor	r23, r22
 44c:	62 2b       	or	r22, r18
 44e:	73 2b       	or	r23, r19
}
 450:	9b 01       	movw	r18, r22
 452:	28 2b       	or	r18, r24
 454:	c9 01       	movw	r24, r18
 456:	08 95       	ret

00000458 <assembleU16>:

int32_t assembleU16(buffer_t *buffer, hskp_t *hskp, int tick ){
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
 466:	7b 01       	movw	r14, r22
 468:	8a 01       	movw	r16, r20
	uint8_t data0,data1,data2,data3;
	
	while(readBufferLength(buffer) < 5){if(getTick(hskp)>(tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 46a:	0e c0       	rjmp	.+28     	; 0x488 <assembleU16+0x30>
 46c:	c7 01       	movw	r24, r14
 46e:	06 df       	rcall	.-500    	; 0x27c <getTick>
 470:	98 01       	movw	r18, r16
 472:	2c 50       	subi	r18, 0x0C	; 12
 474:	3e 4f       	sbci	r19, 0xFE	; 254
 476:	28 17       	cp	r18, r24
 478:	39 07       	cpc	r19, r25
 47a:	30 f4       	brcc	.+12     	; 0x488 <assembleU16+0x30>
 47c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 480:	6f ef       	ldi	r22, 0xFF	; 255
 482:	7f ef       	ldi	r23, 0xFF	; 255
 484:	cb 01       	movw	r24, r22
 486:	24 c0       	rjmp	.+72     	; 0x4d0 <assembleU16+0x78>
 488:	ce 01       	movw	r24, r28
 48a:	3b d2       	rcall	.+1142   	; 0x902 <readBufferLength>
 48c:	05 97       	sbiw	r24, 0x05	; 5
 48e:	74 f3       	brlt	.-36     	; 0x46c <assembleU16+0x14>
	data0 = readBuffer(buffer);
 490:	ce 01       	movw	r24, r28
 492:	14 d2       	rcall	.+1064   	; 0x8bc <readBuffer>
 494:	18 2f       	mov	r17, r24
	data1 = readBuffer(buffer);
 496:	ce 01       	movw	r24, r28
 498:	11 d2       	rcall	.+1058   	; 0x8bc <readBuffer>
 49a:	08 2f       	mov	r16, r24
	data2 = readBuffer(buffer);
 49c:	ce 01       	movw	r24, r28
 49e:	0e d2       	rcall	.+1052   	; 0x8bc <readBuffer>
 4a0:	f8 2e       	mov	r15, r24
	data3 = readBuffer(buffer);
 4a2:	ce 01       	movw	r24, r28
 4a4:	0b d2       	rcall	.+1046   	; 0x8bc <readBuffer>
 4a6:	e8 2e       	mov	r14, r24
	if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 4a8:	ce 01       	movw	r24, r28
 4aa:	08 d2       	rcall	.+1040   	; 0x8bc <readBuffer>
 4ac:	81 3a       	cpi	r24, 0xA1	; 161
 4ae:	91 05       	cpc	r25, r1
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <assembleU16+0x68>
 4b2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 4b6:	6e ef       	ldi	r22, 0xFE	; 254
 4b8:	7f ef       	ldi	r23, 0xFF	; 255
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	9f ef       	ldi	r25, 0xFF	; 255
 4be:	08 c0       	rjmp	.+16     	; 0x4d0 <assembleU16+0x78>
	return uint4TOuint16(data0, data1, data2, data3);
 4c0:	2e 2d       	mov	r18, r14
 4c2:	4f 2d       	mov	r20, r15
 4c4:	60 2f       	mov	r22, r16
 4c6:	81 2f       	mov	r24, r17
 4c8:	b0 df       	rcall	.-160    	; 0x42a <uint4TOuint16>
 4ca:	bc 01       	movw	r22, r24
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	08 95       	ret

000004de <parseData>:


int parse_tick;
enum setting_states_e current_state = 0;

int parseData(spi_t *spi, adc_t *adc, buffer_t *buffer, hskp_t *hskp, uint8_t cmd){
 4de:	af 92       	push	r10
 4e0:	bf 92       	push	r11
 4e2:	cf 92       	push	r12
 4e4:	df 92       	push	r13
 4e6:	ef 92       	push	r14
 4e8:	ff 92       	push	r15
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	5b 01       	movw	r10, r22
 4f4:	ea 01       	movw	r28, r20
 4f6:	79 01       	movw	r14, r18
	
	int start_tick = getTick(hskp);
 4f8:	c9 01       	movw	r24, r18
 4fa:	c0 de       	rcall	.-640    	; 0x27c <getTick>
 4fc:	6c 01       	movw	r12, r24
	uint32_t data;
	
	switch(cmd){
 4fe:	04 36       	cpi	r16, 0x64	; 100
 500:	09 f4       	brne	.+2      	; 0x504 <parseData+0x26>
 502:	57 c0       	rjmp	.+174    	; 0x5b2 <parseData+0xd4>
 504:	28 f4       	brcc	.+10     	; 0x510 <parseData+0x32>
 506:	01 30       	cpi	r16, 0x01	; 1
 508:	c9 f0       	breq	.+50     	; 0x53c <parseData+0x5e>
 50a:	02 30       	cpi	r16, 0x02	; 2
 50c:	b1 f1       	breq	.+108    	; 0x57a <parseData+0x9c>
 50e:	e1 c0       	rjmp	.+450    	; 0x6d2 <parseData+0x1f4>
 510:	06 36       	cpi	r16, 0x66	; 102
 512:	09 f4       	brne	.+2      	; 0x516 <parseData+0x38>
 514:	92 c0       	rjmp	.+292    	; 0x63a <parseData+0x15c>
 516:	08 f4       	brcc	.+2      	; 0x51a <parseData+0x3c>
 518:	64 c0       	rjmp	.+200    	; 0x5e2 <parseData+0x104>
 51a:	0f 37       	cpi	r16, 0x7F	; 127
 51c:	09 f4       	brne	.+2      	; 0x520 <parseData+0x42>
 51e:	bb c0       	rjmp	.+374    	; 0x696 <parseData+0x1b8>
 520:	d8 c0       	rjmp	.+432    	; 0x6d2 <parseData+0x1f4>
		
		case 1: //send potentiometer position
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 522:	c7 01       	movw	r24, r14
 524:	ab de       	rcall	.-682    	; 0x27c <getTick>
 526:	96 01       	movw	r18, r12
 528:	2c 50       	subi	r18, 0x0C	; 12
 52a:	3e 4f       	sbci	r19, 0xFE	; 254
 52c:	28 17       	cp	r18, r24
 52e:	39 07       	cpc	r19, r25
 530:	28 f4       	brcc	.+10     	; 0x53c <parseData+0x5e>
 532:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	cd c0       	rjmp	.+410    	; 0x6d6 <parseData+0x1f8>
 53c:	ce 01       	movw	r24, r28
 53e:	e1 d1       	rcall	.+962    	; 0x902 <readBufferLength>
 540:	89 2b       	or	r24, r25
 542:	79 f3       	breq	.-34     	; 0x522 <parseData+0x44>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 544:	ce 01       	movw	r24, r28
 546:	ba d1       	rcall	.+884    	; 0x8bc <readBuffer>
 548:	81 3a       	cpi	r24, 0xA1	; 161
 54a:	91 05       	cpc	r25, r1
 54c:	29 f0       	breq	.+10     	; 0x558 <parseData+0x7a>
 54e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 552:	8e ef       	ldi	r24, 0xFE	; 254
 554:	9f ef       	ldi	r25, 0xFF	; 255
 556:	bf c0       	rjmp	.+382    	; 0x6d6 <parseData+0x1f8>
			writeSpi(&spi_s, &housekp, 1, adc->pot_pos, 50);
 558:	f5 01       	movw	r30, r10
 55a:	20 81       	ld	r18, Z
 55c:	31 81       	ldd	r19, Z+1	; 0x01
 55e:	02 e3       	ldi	r16, 0x32	; 50
 560:	10 e0       	ldi	r17, 0x00	; 0
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	66 e7       	ldi	r22, 0x76	; 118
 566:	71 e0       	ldi	r23, 0x01	; 1
 568:	8f e7       	ldi	r24, 0x7F	; 127
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	d0 d1       	rcall	.+928    	; 0x90e <writeSpi>
			current_state = FINISHED_INSTR;
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
		case 1: //send potentiometer position
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpi(&spi_s, &housekp, 1, adc->pot_pos, 50);
			current_state = FINISHED_INSTR;
			break;
 578:	ae c0       	rjmp	.+348    	; 0x6d6 <parseData+0x1f8>
		
		case 2: //get new position
			data = assembleU16(buffer, hskp, start_tick);
 57a:	ac 01       	movw	r20, r24
 57c:	b7 01       	movw	r22, r14
 57e:	ce 01       	movw	r24, r28
 580:	6b df       	rcall	.-298    	; 0x458 <assembleU16>
 582:	6b 01       	movw	r12, r22
 584:	7c 01       	movw	r14, r24
			if(data < 0)return -1;
			writeSpi(&spi_s, &housekp, 2, adc->pot_pos, 50);
 586:	f5 01       	movw	r30, r10
 588:	20 81       	ld	r18, Z
 58a:	31 81       	ldd	r19, Z+1	; 0x01
 58c:	02 e3       	ldi	r16, 0x32	; 50
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	42 e0       	ldi	r20, 0x02	; 2
 592:	66 e7       	ldi	r22, 0x76	; 118
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	8f e7       	ldi	r24, 0x7F	; 127
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	b9 d1       	rcall	.+882    	; 0x90e <writeSpi>
			adc->pot_pos = data;
 59c:	f5 01       	movw	r30, r10
 59e:	d1 82       	std	Z+1, r13	; 0x01
 5a0:	c0 82       	st	Z, r12
			adc->spi_changed = 1;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	82 87       	std	Z+10, r24	; 0x0a
			current_state = FINISHED_INSTR;
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
			if(data < 0)return -1;
			writeSpi(&spi_s, &housekp, 2, adc->pot_pos, 50);
			adc->pot_pos = data;
			adc->spi_changed = 1;
			current_state = FINISHED_INSTR;
			break;
 5b0:	92 c0       	rjmp	.+292    	; 0x6d6 <parseData+0x1f8>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 5b2:	98 e0       	ldi	r25, 0x08	; 8
 5b4:	88 e1       	ldi	r24, 0x18	; 24
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	a8 95       	wdr
 5bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <parseData+0xe8>
		case 100://reset machine
			soft_reset();
			break;
			
		case 101://report current buffer length
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 5c8:	c7 01       	movw	r24, r14
 5ca:	58 de       	rcall	.-848    	; 0x27c <getTick>
 5cc:	96 01       	movw	r18, r12
 5ce:	2c 50       	subi	r18, 0x0C	; 12
 5d0:	3e 4f       	sbci	r19, 0xFE	; 254
 5d2:	28 17       	cp	r18, r24
 5d4:	39 07       	cpc	r19, r25
 5d6:	28 f4       	brcc	.+10     	; 0x5e2 <parseData+0x104>
 5d8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	7a c0       	rjmp	.+244    	; 0x6d6 <parseData+0x1f8>
 5e2:	ce 01       	movw	r24, r28
 5e4:	8e d1       	rcall	.+796    	; 0x902 <readBufferLength>
 5e6:	89 2b       	or	r24, r25
 5e8:	79 f3       	breq	.-34     	; 0x5c8 <parseData+0xea>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 5ea:	ce 01       	movw	r24, r28
 5ec:	67 d1       	rcall	.+718    	; 0x8bc <readBuffer>
 5ee:	81 3a       	cpi	r24, 0xA1	; 161
 5f0:	91 05       	cpc	r25, r1
 5f2:	29 f0       	breq	.+10     	; 0x5fe <parseData+0x120>
 5f4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 5f8:	8e ef       	ldi	r24, 0xFE	; 254
 5fa:	9f ef       	ldi	r25, 0xFF	; 255
 5fc:	6c c0       	rjmp	.+216    	; 0x6d6 <parseData+0x1f8>
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
 5fe:	ce 01       	movw	r24, r28
 600:	80 d1       	rcall	.+768    	; 0x902 <readBufferLength>
 602:	04 e6       	ldi	r16, 0x64	; 100
 604:	10 e0       	ldi	r17, 0x00	; 0
 606:	9c 01       	movw	r18, r24
 608:	4d ef       	ldi	r20, 0xFD	; 253
 60a:	66 e7       	ldi	r22, 0x76	; 118
 60c:	71 e0       	ldi	r23, 0x01	; 1
 60e:	8f e7       	ldi	r24, 0x7F	; 127
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	7d d1       	rcall	.+762    	; 0x90e <writeSpi>
			current_state = FINISHED_INSTR;
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
		case 101://report current buffer length
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
			current_state = FINISHED_INSTR;
			break;
 61e:	5b c0       	rjmp	.+182    	; 0x6d6 <parseData+0x1f8>
		
		case 102://report current buffer
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 620:	c7 01       	movw	r24, r14
 622:	2c de       	rcall	.-936    	; 0x27c <getTick>
 624:	96 01       	movw	r18, r12
 626:	2c 50       	subi	r18, 0x0C	; 12
 628:	3e 4f       	sbci	r19, 0xFE	; 254
 62a:	28 17       	cp	r18, r24
 62c:	39 07       	cpc	r19, r25
 62e:	28 f4       	brcc	.+10     	; 0x63a <parseData+0x15c>
 630:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	4e c0       	rjmp	.+156    	; 0x6d6 <parseData+0x1f8>
 63a:	ce 01       	movw	r24, r28
 63c:	62 d1       	rcall	.+708    	; 0x902 <readBufferLength>
 63e:	89 2b       	or	r24, r25
 640:	79 f3       	breq	.-34     	; 0x620 <parseData+0x142>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 642:	ce 01       	movw	r24, r28
 644:	3b d1       	rcall	.+630    	; 0x8bc <readBuffer>
 646:	81 3a       	cpi	r24, 0xA1	; 161
 648:	91 05       	cpc	r25, r1
 64a:	29 f0       	breq	.+10     	; 0x656 <parseData+0x178>
 64c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 650:	8e ef       	ldi	r24, 0xFE	; 254
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	40 c0       	rjmp	.+128    	; 0x6d6 <parseData+0x1f8>
			writeSpiBuffer(&spi_s, &housekp, 254, buffer->buffer, BUFFER_SIZE, 100);
 656:	0f 2e       	mov	r0, r31
 658:	f4 e6       	ldi	r31, 0x64	; 100
 65a:	ef 2e       	mov	r14, r31
 65c:	f1 2c       	mov	r15, r1
 65e:	f0 2d       	mov	r31, r0
 660:	0a ef       	ldi	r16, 0xFA	; 250
 662:	9e 01       	movw	r18, r28
 664:	4e ef       	ldi	r20, 0xFE	; 254
 666:	66 e7       	ldi	r22, 0x76	; 118
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	8f e7       	ldi	r24, 0x7F	; 127
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	e7 d1       	rcall	.+974    	; 0xa3e <writeSpiBuffer>
			current_state = FINISHED_INSTR;
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			current_state = FINISHED_INSTR;
			break;
		default: return 0;
		
	}
	return 0;
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
		case 102://report current buffer
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpiBuffer(&spi_s, &housekp, 254, buffer->buffer, BUFFER_SIZE, 100);
			current_state = FINISHED_INSTR;
			break;
 67a:	2d c0       	rjmp	.+90     	; 0x6d6 <parseData+0x1f8>
					
		case 127://send machine type
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
 67c:	c7 01       	movw	r24, r14
 67e:	fe dd       	rcall	.-1028   	; 0x27c <getTick>
 680:	96 01       	movw	r18, r12
 682:	2c 50       	subi	r18, 0x0C	; 12
 684:	3e 4f       	sbci	r19, 0xFE	; 254
 686:	28 17       	cp	r18, r24
 688:	39 07       	cpc	r19, r25
 68a:	28 f4       	brcc	.+10     	; 0x696 <parseData+0x1b8>
 68c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	20 c0       	rjmp	.+64     	; 0x6d6 <parseData+0x1f8>
 696:	ce 01       	movw	r24, r28
 698:	34 d1       	rcall	.+616    	; 0x902 <readBufferLength>
 69a:	89 2b       	or	r24, r25
 69c:	79 f3       	breq	.-34     	; 0x67c <parseData+0x19e>
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
 69e:	ce 01       	movw	r24, r28
 6a0:	0d d1       	rcall	.+538    	; 0x8bc <readBuffer>
 6a2:	81 3a       	cpi	r24, 0xA1	; 161
 6a4:	91 05       	cpc	r25, r1
 6a6:	29 f0       	breq	.+10     	; 0x6b2 <parseData+0x1d4>
 6a8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 6ac:	8e ef       	ldi	r24, 0xFE	; 254
 6ae:	9f ef       	ldi	r25, 0xFF	; 255
 6b0:	12 c0       	rjmp	.+36     	; 0x6d6 <parseData+0x1f8>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 1000);
 6b2:	08 ee       	ldi	r16, 0xE8	; 232
 6b4:	13 e0       	ldi	r17, 0x03	; 3
 6b6:	22 e0       	ldi	r18, 0x02	; 2
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	4f ef       	ldi	r20, 0xFF	; 255
 6bc:	66 e7       	ldi	r22, 0x76	; 118
 6be:	71 e0       	ldi	r23, 0x01	; 1
 6c0:	8f e7       	ldi	r24, 0x7F	; 127
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	24 d1       	rcall	.+584    	; 0x90e <writeSpi>
			current_state = FINISHED_INSTR;
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
			break;
		default: return 0;
		
	}
	return 0;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
		case 127://send machine type
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT)){current_state = WAIT_BLOCK; return -1;}}
			if(readBuffer(buffer) != END_DATA){current_state = WAIT_BLOCK; return -2;}
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 1000);
			current_state = FINISHED_INSTR;
			break;
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <parseData+0x1f8>
		default: return 0;
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
		
	}
	return 0;
}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	df 90       	pop	r13
 6e4:	cf 90       	pop	r12
 6e6:	bf 90       	pop	r11
 6e8:	af 90       	pop	r10
 6ea:	08 95       	ret

000006ec <recieveStateMachine>:

int recieveStateMachine(spi_t *spi, adc_t *adc, buffer_t *buffer, hskp_t *hskp){
 6ec:	af 92       	push	r10
 6ee:	bf 92       	push	r11
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	7c 01       	movw	r14, r24
 700:	6b 01       	movw	r12, r22
 702:	ea 01       	movw	r28, r20
 704:	59 01       	movw	r10, r18
	uint8_t data = 0;
	switch(current_state){
 706:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <current_state>
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	79 f0       	breq	.+30     	; 0x72c <recieveStateMachine+0x40>
 70e:	28 f0       	brcs	.+10     	; 0x71a <recieveStateMachine+0x2e>
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	41 f1       	breq	.+80     	; 0x764 <recieveStateMachine+0x78>
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	41 f1       	breq	.+80     	; 0x768 <recieveStateMachine+0x7c>
 718:	2d c0       	rjmp	.+90     	; 0x774 <recieveStateMachine+0x88>
		
		case WAIT_BLOCK:
			if(readBuffer(buffer) == BLOCK_SPI){current_state = WAIT_INSTR;}
 71a:	ca 01       	movw	r24, r20
 71c:	cf d0       	rcall	.+414    	; 0x8bc <readBuffer>
 71e:	80 38       	cpi	r24, 0x80	; 128
 720:	91 05       	cpc	r25, r1
 722:	41 f5       	brne	.+80     	; 0x774 <recieveStateMachine+0x88>
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
 72a:	24 c0       	rjmp	.+72     	; 0x774 <recieveStateMachine+0x88>
			break;
		case WAIT_INSTR:
			data = readBuffer(buffer);
 72c:	ca 01       	movw	r24, r20
 72e:	c6 d0       	rcall	.+396    	; 0x8bc <readBuffer>
			if(data == 0 || data == BLOCK_SPI) break;
 730:	88 23       	and	r24, r24
 732:	01 f1       	breq	.+64     	; 0x774 <recieveStateMachine+0x88>
 734:	80 38       	cpi	r24, 0x80	; 128
 736:	f1 f0       	breq	.+60     	; 0x774 <recieveStateMachine+0x88>
			if(data == UNBLOCK_SPI){current_state = WAIT_BLOCK; break;}
 738:	81 38       	cpi	r24, 0x81	; 129
 73a:	19 f4       	brne	.+6      	; 0x742 <recieveStateMachine+0x56>
 73c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 740:	19 c0       	rjmp	.+50     	; 0x774 <recieveStateMachine+0x88>
			if(data > 127){current_state = WAIT_BLOCK; break;}
 742:	88 23       	and	r24, r24
 744:	1c f4       	brge	.+6      	; 0x74c <recieveStateMachine+0x60>
 746:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
 74a:	14 c0       	rjmp	.+40     	; 0x774 <recieveStateMachine+0x88>
			if(parseData(spi, adc, buffer, hskp, data)<0){current_state = STATE_ERROR; break;}
 74c:	08 2f       	mov	r16, r24
 74e:	95 01       	movw	r18, r10
 750:	ae 01       	movw	r20, r28
 752:	b6 01       	movw	r22, r12
 754:	c7 01       	movw	r24, r14
 756:	c3 de       	rcall	.-634    	; 0x4de <parseData>
 758:	99 23       	and	r25, r25
 75a:	64 f4       	brge	.+24     	; 0x774 <recieveStateMachine+0x88>
 75c:	83 e0       	ldi	r24, 0x03	; 3
 75e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <current_state>
 762:	08 c0       	rjmp	.+16     	; 0x774 <recieveStateMachine+0x88>
			break;
		case FINISHED_INSTR: 
			current_state = WAIT_BLOCK;
 764:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
		case STATE_ERROR:
			PORTB^=1<<PINB6;
 768:	95 b1       	in	r25, 0x05	; 5
 76a:	80 e4       	ldi	r24, 0x40	; 64
 76c:	89 27       	eor	r24, r25
 76e:	85 b9       	out	0x05, r24	; 5
			current_state = WAIT_BLOCK;
 770:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <current_state>
	}
			
			
			
	return 0;
}
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	0f 91       	pop	r16
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	df 90       	pop	r13
 784:	cf 90       	pop	r12
 786:	bf 90       	pop	r11
 788:	af 90       	pop	r10
 78a:	08 95       	ret

0000078c <SPIInit>:



void SPIInit(void){
			
	DDRB &= ~(1<<DDB7); //set HIZ mode
 78c:	84 b1       	in	r24, 0x04	; 4
 78e:	8f 77       	andi	r24, 0x7F	; 127
 790:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB7);
 792:	85 b1       	in	r24, 0x05	; 5
 794:	8f 77       	andi	r24, 0x7F	; 127
 796:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB4; //set MISO output
 798:	84 b1       	in	r24, 0x04	; 4
 79a:	80 61       	ori	r24, 0x10	; 16
 79c:	84 b9       	out	0x04, r24	; 4
	DDRB|=1<<DDB6;
 79e:	84 b1       	in	r24, 0x04	; 4
 7a0:	80 64       	ori	r24, 0x40	; 64
 7a2:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= 1<< DDB6;
 7a4:	84 b1       	in	r24, 0x04	; 4
 7a6:	80 64       	ori	r24, 0x40	; 64
 7a8:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0; //interrupt for SS
 7aa:	e8 e6       	ldi	r30, 0x68	; 104
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT2;
 7b4:	eb e6       	ldi	r30, 0x6B	; 107
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	84 60       	ori	r24, 0x04	; 4
 7bc:	80 83       	st	Z, r24
	
	SPCR = 1<<SPE;// | 1<<SPIE; //enable SPI
 7be:	80 e4       	ldi	r24, 0x40	; 64
 7c0:	8c bd       	out	0x2c, r24	; 44
 7c2:	08 95       	ret

000007c4 <bufferInit>:
}

void bufferInit(buffer_t *buffer){
	
	buffer->read_index = 0;
 7c4:	fc 01       	movw	r30, r24
 7c6:	e5 50       	subi	r30, 0x05	; 5
 7c8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ca:	10 82       	st	Z, r1
	buffer->write_index = 0;
 7cc:	31 96       	adiw	r30, 0x01	; 1
 7ce:	10 82       	st	Z, r1
	buffer->buffer_length = 0;
 7d0:	32 97       	sbiw	r30, 0x02	; 2
 7d2:	10 82       	st	Z, r1
	buffer->buffer[0] = 0;
 7d4:	fc 01       	movw	r30, r24
 7d6:	10 82       	st	Z, r1
	buffer->buffer[1] = 0;
 7d8:	11 82       	std	Z+1, r1	; 0x01
 7da:	08 95       	ret

000007dc <writeBuffer>:
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 7dc:	fc 01       	movw	r30, r24
 7de:	e6 50       	subi	r30, 0x06	; 6
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	20 81       	ld	r18, Z
 7e4:	29 3f       	cpi	r18, 0xF9	; 249
 7e6:	b1 f0       	breq	.+44     	; 0x814 <writeBuffer+0x38>
	buffer->buffer[buffer->write_index] = val;
 7e8:	32 96       	adiw	r30, 0x02	; 2
 7ea:	20 81       	ld	r18, Z
 7ec:	dc 01       	movw	r26, r24
 7ee:	a2 0f       	add	r26, r18
 7f0:	b1 1d       	adc	r27, r1
 7f2:	6c 93       	st	X, r22
	buffer->write_index++;
 7f4:	20 81       	ld	r18, Z
 7f6:	2f 5f       	subi	r18, 0xFF	; 255
 7f8:	20 83       	st	Z, r18
	buffer->buffer_length++;
 7fa:	dc 01       	movw	r26, r24
 7fc:	a6 50       	subi	r26, 0x06	; 6
 7fe:	bf 4f       	sbci	r27, 0xFF	; 255
 800:	2c 91       	ld	r18, X
 802:	2f 5f       	subi	r18, 0xFF	; 255
 804:	2c 93       	st	X, r18
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
 806:	20 81       	ld	r18, Z
 808:	29 3f       	cpi	r18, 0xF9	; 249
 80a:	39 f4       	brne	.+14     	; 0x81a <writeBuffer+0x3e>
 80c:	10 82       	st	Z, r1
	return 0;
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	08 95       	ret
	buffer->buffer[1] = 0;
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	9f ef       	ldi	r25, 0xFF	; 255
 818:	08 95       	ret
	buffer->buffer[buffer->write_index] = val;
	buffer->write_index++;
	buffer->buffer_length++;
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
	return 0;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
}
 81e:	08 95       	ret

00000820 <__vector_3>:
#include <avr/interrupt.h>
#include <util/delay.h>



 ISR(PCINT0_vect){
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	2f 93       	push	r18
 82c:	3f 93       	push	r19
 82e:	4f 93       	push	r20
 830:	5f 93       	push	r21
 832:	6f 93       	push	r22
 834:	7f 93       	push	r23
 836:	8f 93       	push	r24
 838:	9f 93       	push	r25
 83a:	af 93       	push	r26
 83c:	bf 93       	push	r27
 83e:	ef 93       	push	r30
 840:	ff 93       	push	r31
	if(!(PINB & 1<<PINB2))return;//if cs is low then ignore
 842:	1a 9b       	sbis	0x03, 2	; 3
 844:	2a c0       	rjmp	.+84     	; 0x89a <__vector_3+0x7a>
	spi_s.one_transfer = 1;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <spi_s+0x3>
	
	if(SPDR && spi_s.send_block == 0 && spi_s.spi_send_mode){ spi_s.is_master_dumb = 1; return;}
 84c:	8e b5       	in	r24, 0x2e	; 46
 84e:	88 23       	and	r24, r24
 850:	61 f0       	breq	.+24     	; 0x86a <__vector_3+0x4a>
 852:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <spi_s+0x1>
 856:	81 11       	cpse	r24, r1
 858:	08 c0       	rjmp	.+16     	; 0x86a <__vector_3+0x4a>
 85a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <spi_s>
 85e:	88 23       	and	r24, r24
 860:	21 f0       	breq	.+8      	; 0x86a <__vector_3+0x4a>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <spi_s+0x2>
 868:	18 c0       	rjmp	.+48     	; 0x89a <__vector_3+0x7a>
	else {spi_s.is_master_dumb = 0;}
 86a:	ef e7       	ldi	r30, 0x7F	; 127
 86c:	f1 e0       	ldi	r31, 0x01	; 1
 86e:	12 82       	std	Z+2, r1	; 0x02
	if(spi_s.spi_send_mode)return;
 870:	80 81       	ld	r24, Z
 872:	81 11       	cpse	r24, r1
 874:	12 c0       	rjmp	.+36     	; 0x89a <__vector_3+0x7a>
	
	if(SPDR == BLOCK_SPI){spi_s.send_block=1;}//block sending
 876:	8e b5       	in	r24, 0x2e	; 46
 878:	80 38       	cpi	r24, 0x80	; 128
 87a:	21 f4       	brne	.+8      	; 0x884 <__vector_3+0x64>
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <spi_s+0x1>
 882:	06 c0       	rjmp	.+12     	; 0x890 <__vector_3+0x70>
	else if(SPDR == UNBLOCK_SPI){spi_s.send_block=0; return;}//unblock sending
 884:	8e b5       	in	r24, 0x2e	; 46
 886:	81 38       	cpi	r24, 0x81	; 129
 888:	19 f4       	brne	.+6      	; 0x890 <__vector_3+0x70>
 88a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <spi_s+0x1>
 88e:	05 c0       	rjmp	.+10     	; 0x89a <__vector_3+0x7a>


	
	writeBuffer(&buf, SPDR);
 890:	6e b5       	in	r22, 0x2e	; 46
 892:	83 e8       	ldi	r24, 0x83	; 131
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	a2 df       	rcall	.-188    	; 0x7dc <writeBuffer>
	SPDR = 0;
 898:	1e bc       	out	0x2e, r1	; 46
	//spi_s.one_transfer = 0;
	//DDRB|=1<<DDB6;
	//PORTB|=1<<PINB6;
} 
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	0f 90       	pop	r0
 8b8:	1f 90       	pop	r1
 8ba:	18 95       	reti

000008bc <readBuffer>:
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 8bc:	fc 01       	movw	r30, r24
 8be:	e6 50       	subi	r30, 0x06	; 6
 8c0:	ff 4f       	sbci	r31, 0xFF	; 255
 8c2:	20 81       	ld	r18, Z
 8c4:	22 23       	and	r18, r18
 8c6:	b9 f0       	breq	.+46     	; 0x8f6 <readBuffer+0x3a>
	int buf = buffer->buffer[buffer->read_index];
 8c8:	31 96       	adiw	r30, 0x01	; 1
 8ca:	20 81       	ld	r18, Z
 8cc:	dc 01       	movw	r26, r24
 8ce:	a2 0f       	add	r26, r18
 8d0:	b1 1d       	adc	r27, r1
 8d2:	2c 91       	ld	r18, X
 8d4:	30 e0       	ldi	r19, 0x00	; 0
	buffer->read_index++;
 8d6:	40 81       	ld	r20, Z
 8d8:	4f 5f       	subi	r20, 0xFF	; 255
 8da:	40 83       	st	Z, r20
	buffer->buffer_length--;
 8dc:	dc 01       	movw	r26, r24
 8de:	a6 50       	subi	r26, 0x06	; 6
 8e0:	bf 4f       	sbci	r27, 0xFF	; 255
 8e2:	4c 91       	ld	r20, X
 8e4:	41 50       	subi	r20, 0x01	; 1
 8e6:	4c 93       	st	X, r20
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
 8e8:	40 81       	ld	r20, Z
 8ea:	49 3f       	cpi	r20, 0xF9	; 249
 8ec:	39 f4       	brne	.+14     	; 0x8fc <readBuffer+0x40>
 8ee:	10 82       	st	Z, r1
	return buf;
 8f0:	82 2f       	mov	r24, r18
 8f2:	93 2f       	mov	r25, r19
 8f4:	08 95       	ret
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	9f ef       	ldi	r25, 0xFF	; 255
 8fa:	08 95       	ret
	int buf = buffer->buffer[buffer->read_index];
	buffer->read_index++;
	buffer->buffer_length--;
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
	return buf;
 8fc:	82 2f       	mov	r24, r18
 8fe:	93 2f       	mov	r25, r19
}
 900:	08 95       	ret

00000902 <readBufferLength>:

int readBufferLength(buffer_t *buffer){
	return buffer->buffer_length;
 902:	86 50       	subi	r24, 0x06	; 6
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	fc 01       	movw	r30, r24
 908:	80 81       	ld	r24, Z
}
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	08 95       	ret

0000090e <writeSpi>:

void writeSpi(spi_t *spi, hskp_t *hskp, uint8_t instr, uint16_t data, uint16_t timeout){
 90e:	7f 92       	push	r7
 910:	8f 92       	push	r8
 912:	9f 92       	push	r9
 914:	af 92       	push	r10
 916:	bf 92       	push	r11
 918:	cf 92       	push	r12
 91a:	df 92       	push	r13
 91c:	ef 92       	push	r14
 91e:	ff 92       	push	r15
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	ec 01       	movw	r28, r24
 92a:	5b 01       	movw	r10, r22
 92c:	74 2e       	mov	r7, r20
 92e:	82 2e       	mov	r8, r18
 930:	93 2e       	mov	r9, r19
	
	uint32_t start_tick = getTick(hskp);//start counting ms
 932:	cb 01       	movw	r24, r22
 934:	a3 dc       	rcall	.-1722   	; 0x27c <getTick>
 936:	6c 01       	movw	r12, r24
 938:	e1 2c       	mov	r14, r1
 93a:	f1 2c       	mov	r15, r1
	while(!(PINB & 1<<PINB2)|| spi->send_block){}			//wait for CS high and send blocking
 93c:	1a 9b       	sbis	0x03, 2	; 3
 93e:	fe cf       	rjmp	.-4      	; 0x93c <writeSpi+0x2e>
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	81 11       	cpse	r24, r1
 944:	fb cf       	rjmp	.-10     	; 0x93c <writeSpi+0x2e>
	spi->spi_send_mode = 1;					//set transmission flag
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	88 83       	st	Y, r24
	disableHSKP(&housekp);					//disable led updating
 94a:	86 e7       	ldi	r24, 0x76	; 118
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	93 dc       	rcall	.-1754   	; 0x276 <disableHSKP>
	spi->one_transfer = 0;					//clear SPI ISR flag
 950:	1b 82       	std	Y+3, r1	; 0x03

	while(1){

		SPDR = TRANSMIT_KEYWORD;			//set transmit keyword
 952:	8f ed       	ldi	r24, 0xDF	; 223
 954:	8e bd       	out	0x2e, r24	; 46
		
		DDRB |= 1<<DDB7;
 956:	84 b1       	in	r24, 0x04	; 4
 958:	80 68       	ori	r24, 0x80	; 128
 95a:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~(1<<PORTB7);				//set INT low
 95c:	85 b1       	in	r24, 0x05	; 5
 95e:	8f 77       	andi	r24, 0x7F	; 127
 960:	85 b9       	out	0x05, r24	; 5


		while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 962:	0f c0       	rjmp	.+30     	; 0x982 <writeSpi+0x74>
 964:	c5 01       	movw	r24, r10
 966:	8a dc       	rcall	.-1772   	; 0x27c <getTick>
 968:	a0 e0       	ldi	r26, 0x00	; 0
 96a:	b0 e0       	ldi	r27, 0x00	; 0
 96c:	b7 01       	movw	r22, r14
 96e:	a6 01       	movw	r20, r12
 970:	40 0f       	add	r20, r16
 972:	51 1f       	adc	r21, r17
 974:	61 1d       	adc	r22, r1
 976:	71 1d       	adc	r23, r1
 978:	48 17       	cp	r20, r24
 97a:	59 07       	cpc	r21, r25
 97c:	6a 07       	cpc	r22, r26
 97e:	7b 07       	cpc	r23, r27
 980:	18 f0       	brcs	.+6      	; 0x988 <writeSpi+0x7a>
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	88 23       	and	r24, r24
 986:	71 f3       	breq	.-36     	; 0x964 <writeSpi+0x56>
											//wait for transmission or timeout
		spi->one_transfer = 0;
 988:	1b 82       	std	Y+3, r1	; 0x03
		if(!spi->is_master_dumb){ break;}	//if master is not reading then retry
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	81 11       	cpse	r24, r1
 98e:	e1 cf       	rjmp	.-62     	; 0x952 <writeSpi+0x44>
	}
	
	SPDR = instr;
 990:	7e bc       	out	0x2e, r7	; 46
	
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 992:	0f c0       	rjmp	.+30     	; 0x9b2 <writeSpi+0xa4>
 994:	c5 01       	movw	r24, r10
 996:	72 dc       	rcall	.-1820   	; 0x27c <getTick>
 998:	a0 e0       	ldi	r26, 0x00	; 0
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	b7 01       	movw	r22, r14
 99e:	a6 01       	movw	r20, r12
 9a0:	40 0f       	add	r20, r16
 9a2:	51 1f       	adc	r21, r17
 9a4:	61 1d       	adc	r22, r1
 9a6:	71 1d       	adc	r23, r1
 9a8:	48 17       	cp	r20, r24
 9aa:	59 07       	cpc	r21, r25
 9ac:	6a 07       	cpc	r22, r26
 9ae:	7b 07       	cpc	r23, r27
 9b0:	18 f0       	brcs	.+6      	; 0x9b8 <writeSpi+0xaa>
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	88 23       	and	r24, r24
 9b6:	71 f3       	breq	.-36     	; 0x994 <writeSpi+0x86>
		spi->one_transfer = 0;
 9b8:	1b 82       	std	Y+3, r1	; 0x03

	SPDR = (uint8_t)data;
 9ba:	8e bc       	out	0x2e, r8	; 46
	
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 9bc:	0f c0       	rjmp	.+30     	; 0x9dc <writeSpi+0xce>
 9be:	c5 01       	movw	r24, r10
 9c0:	5d dc       	rcall	.-1862   	; 0x27c <getTick>
 9c2:	a0 e0       	ldi	r26, 0x00	; 0
 9c4:	b0 e0       	ldi	r27, 0x00	; 0
 9c6:	b7 01       	movw	r22, r14
 9c8:	a6 01       	movw	r20, r12
 9ca:	40 0f       	add	r20, r16
 9cc:	51 1f       	adc	r21, r17
 9ce:	61 1d       	adc	r22, r1
 9d0:	71 1d       	adc	r23, r1
 9d2:	48 17       	cp	r20, r24
 9d4:	59 07       	cpc	r21, r25
 9d6:	6a 07       	cpc	r22, r26
 9d8:	7b 07       	cpc	r23, r27
 9da:	18 f0       	brcs	.+6      	; 0x9e2 <writeSpi+0xd4>
 9dc:	8b 81       	ldd	r24, Y+3	; 0x03
 9de:	88 23       	and	r24, r24
 9e0:	71 f3       	breq	.-36     	; 0x9be <writeSpi+0xb0>
		spi->one_transfer = 0;
 9e2:	1b 82       	std	Y+3, r1	; 0x03

	SPDR = (uint8_t)(data>>8);
 9e4:	9e bc       	out	0x2e, r9	; 46
		
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 9e6:	0f c0       	rjmp	.+30     	; 0xa06 <writeSpi+0xf8>
 9e8:	c5 01       	movw	r24, r10
 9ea:	48 dc       	rcall	.-1904   	; 0x27c <getTick>
 9ec:	a0 e0       	ldi	r26, 0x00	; 0
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	b7 01       	movw	r22, r14
 9f2:	a6 01       	movw	r20, r12
 9f4:	40 0f       	add	r20, r16
 9f6:	51 1f       	adc	r21, r17
 9f8:	61 1d       	adc	r22, r1
 9fa:	71 1d       	adc	r23, r1
 9fc:	48 17       	cp	r20, r24
 9fe:	59 07       	cpc	r21, r25
 a00:	6a 07       	cpc	r22, r26
 a02:	7b 07       	cpc	r23, r27
 a04:	18 f0       	brcs	.+6      	; 0xa0c <writeSpi+0xfe>
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	88 23       	and	r24, r24
 a0a:	71 f3       	breq	.-36     	; 0x9e8 <writeSpi+0xda>
		spi->one_transfer = 0;
 a0c:	1b 82       	std	Y+3, r1	; 0x03
	
	PORTB &= ~(1<<PORTB7); //set INT high
 a0e:	85 b1       	in	r24, 0x05	; 5
 a10:	8f 77       	andi	r24, 0x7F	; 127
 a12:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 a14:	84 b1       	in	r24, 0x04	; 4
 a16:	8f 77       	andi	r24, 0x7F	; 127
 a18:	84 b9       	out	0x04, r24	; 4
	
	//PCICR |= 1<< PCIE0;
	enableHSKP(&housekp);
 a1a:	86 e7       	ldi	r24, 0x76	; 118
 a1c:	91 e0       	ldi	r25, 0x01	; 1
 a1e:	27 dc       	rcall	.-1970   	; 0x26e <enableHSKP>
	spi->spi_send_mode = 0;	
 a20:	18 82       	st	Y, r1
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	ff 90       	pop	r15
 a2c:	ef 90       	pop	r14
 a2e:	df 90       	pop	r13
 a30:	cf 90       	pop	r12
 a32:	bf 90       	pop	r11
 a34:	af 90       	pop	r10
 a36:	9f 90       	pop	r9
 a38:	8f 90       	pop	r8
 a3a:	7f 90       	pop	r7
 a3c:	08 95       	ret

00000a3e <writeSpiBuffer>:

void writeSpiBuffer(spi_t *spi, hskp_t *hskp, uint8_t instr, uint8_t* data, uint8_t length, uint16_t timeout){
 a3e:	4f 92       	push	r4
 a40:	5f 92       	push	r5
 a42:	6f 92       	push	r6
 a44:	7f 92       	push	r7
 a46:	8f 92       	push	r8
 a48:	9f 92       	push	r9
 a4a:	af 92       	push	r10
 a4c:	bf 92       	push	r11
 a4e:	cf 92       	push	r12
 a50:	df 92       	push	r13
 a52:	ef 92       	push	r14
 a54:	ff 92       	push	r15
 a56:	0f 93       	push	r16
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	ec 01       	movw	r28, r24
 a5e:	6b 01       	movw	r12, r22
 a60:	b4 2e       	mov	r11, r20
 a62:	49 01       	movw	r8, r18
	
	uint32_t start_tick = getTick(hskp);//start counting ms
 a64:	cb 01       	movw	r24, r22
 a66:	0a dc       	rcall	.-2028   	; 0x27c <getTick>
 a68:	2c 01       	movw	r4, r24
 a6a:	61 2c       	mov	r6, r1
 a6c:	71 2c       	mov	r7, r1
	while(!(PINB & 1<<PINB2)|| spi->send_block){}			//wait for CS high and send blocking
 a6e:	1a 9b       	sbis	0x03, 2	; 3
 a70:	fe cf       	rjmp	.-4      	; 0xa6e <writeSpiBuffer+0x30>
 a72:	89 81       	ldd	r24, Y+1	; 0x01
 a74:	81 11       	cpse	r24, r1
 a76:	fb cf       	rjmp	.-10     	; 0xa6e <writeSpiBuffer+0x30>
	spi->spi_send_mode = 1;					//set transmission flag
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	88 83       	st	Y, r24
	disableHSKP(&housekp);					//disable led updating
 a7c:	86 e7       	ldi	r24, 0x76	; 118
 a7e:	91 e0       	ldi	r25, 0x01	; 1
 a80:	fa db       	rcall	.-2060   	; 0x276 <disableHSKP>
	spi->one_transfer = 0;					//clear SPI ISR flag
 a82:	1b 82       	std	Y+3, r1	; 0x03

	while(1){

		SPDR = TRANSMIT_KEYWORD;			//set transmit keyword
 a84:	8f ed       	ldi	r24, 0xDF	; 223
 a86:	8e bd       	out	0x2e, r24	; 46
		
		DDRB |= 1<<DDB7;
 a88:	84 b1       	in	r24, 0x04	; 4
 a8a:	80 68       	ori	r24, 0x80	; 128
 a8c:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~(1<<PORTB7);				//set INT low
 a8e:	85 b1       	in	r24, 0x05	; 5
 a90:	8f 77       	andi	r24, 0x7F	; 127
 a92:	85 b9       	out	0x05, r24	; 5


		while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 a94:	0f c0       	rjmp	.+30     	; 0xab4 <writeSpiBuffer+0x76>
 a96:	c6 01       	movw	r24, r12
 a98:	f1 db       	rcall	.-2078   	; 0x27c <getTick>
 a9a:	a0 e0       	ldi	r26, 0x00	; 0
 a9c:	b0 e0       	ldi	r27, 0x00	; 0
 a9e:	b3 01       	movw	r22, r6
 aa0:	a2 01       	movw	r20, r4
 aa2:	4e 0d       	add	r20, r14
 aa4:	5f 1d       	adc	r21, r15
 aa6:	61 1d       	adc	r22, r1
 aa8:	71 1d       	adc	r23, r1
 aaa:	48 17       	cp	r20, r24
 aac:	59 07       	cpc	r21, r25
 aae:	6a 07       	cpc	r22, r26
 ab0:	7b 07       	cpc	r23, r27
 ab2:	18 f0       	brcs	.+6      	; 0xaba <writeSpiBuffer+0x7c>
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	88 23       	and	r24, r24
 ab8:	71 f3       	breq	.-36     	; 0xa96 <writeSpiBuffer+0x58>
		//wait for transmission or timeout
		spi->one_transfer = 0;
 aba:	1b 82       	std	Y+3, r1	; 0x03
		if(!spi->is_master_dumb){ break;}	//if master is not reading then retry
 abc:	8a 81       	ldd	r24, Y+2	; 0x02
 abe:	81 11       	cpse	r24, r1
 ac0:	e1 cf       	rjmp	.-62     	; 0xa84 <writeSpiBuffer+0x46>
	}
	
	SPDR = instr;
 ac2:	be bc       	out	0x2e, r11	; 46
	
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 ac4:	0f c0       	rjmp	.+30     	; 0xae4 <writeSpiBuffer+0xa6>
 ac6:	c6 01       	movw	r24, r12
 ac8:	d9 db       	rcall	.-2126   	; 0x27c <getTick>
 aca:	a0 e0       	ldi	r26, 0x00	; 0
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	b3 01       	movw	r22, r6
 ad0:	a2 01       	movw	r20, r4
 ad2:	4e 0d       	add	r20, r14
 ad4:	5f 1d       	adc	r21, r15
 ad6:	61 1d       	adc	r22, r1
 ad8:	71 1d       	adc	r23, r1
 ada:	48 17       	cp	r20, r24
 adc:	59 07       	cpc	r21, r25
 ade:	6a 07       	cpc	r22, r26
 ae0:	7b 07       	cpc	r23, r27
 ae2:	18 f0       	brcs	.+6      	; 0xaea <writeSpiBuffer+0xac>
 ae4:	8b 81       	ldd	r24, Y+3	; 0x03
 ae6:	88 23       	and	r24, r24
 ae8:	71 f3       	breq	.-36     	; 0xac6 <writeSpiBuffer+0x88>
	spi->one_transfer = 0;
 aea:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
		
	SPDR = length;
 aec:	0e bd       	out	0x2e, r16	; 46
	
	for(int i=0; i<length; i++){
 aee:	a1 2c       	mov	r10, r1
 af0:	b1 2c       	mov	r11, r1
 af2:	1b c0       	rjmp	.+54     	; 0xb2a <writeSpiBuffer+0xec>
		while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 af4:	c6 01       	movw	r24, r12
 af6:	c2 db       	rcall	.-2172   	; 0x27c <getTick>
 af8:	a0 e0       	ldi	r26, 0x00	; 0
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	b3 01       	movw	r22, r6
 afe:	a2 01       	movw	r20, r4
 b00:	4e 0d       	add	r20, r14
 b02:	5f 1d       	adc	r21, r15
 b04:	61 1d       	adc	r22, r1
 b06:	71 1d       	adc	r23, r1
 b08:	48 17       	cp	r20, r24
 b0a:	59 07       	cpc	r21, r25
 b0c:	6a 07       	cpc	r22, r26
 b0e:	7b 07       	cpc	r23, r27
 b10:	18 f0       	brcs	.+6      	; 0xb18 <writeSpiBuffer+0xda>
 b12:	8b 81       	ldd	r24, Y+3	; 0x03
 b14:	88 23       	and	r24, r24
 b16:	71 f3       	breq	.-36     	; 0xaf4 <writeSpiBuffer+0xb6>
		spi->one_transfer = 0;
 b18:	1b 82       	std	Y+3, r1	; 0x03
		SPDR = data[i];
 b1a:	f4 01       	movw	r30, r8
 b1c:	ea 0d       	add	r30, r10
 b1e:	fb 1d       	adc	r31, r11
 b20:	80 81       	ld	r24, Z
 b22:	8e bd       	out	0x2e, r24	; 46
	
	
		
	SPDR = length;
	
	for(int i=0; i<length; i++){
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	a8 1a       	sub	r10, r24
 b28:	b8 0a       	sbc	r11, r24
 b2a:	80 2f       	mov	r24, r16
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	a8 16       	cp	r10, r24
 b30:	b9 06       	cpc	r11, r25
 b32:	7c f3       	brlt	.-34     	; 0xb12 <writeSpiBuffer+0xd4>
 b34:	0f c0       	rjmp	.+30     	; 0xb54 <writeSpiBuffer+0x116>
		while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
		spi->one_transfer = 0;
		SPDR = data[i];
	}
	
	while(!spi->one_transfer){if(getTick(hskp)>start_tick+timeout){break;}}
 b36:	c6 01       	movw	r24, r12
 b38:	a1 db       	rcall	.-2238   	; 0x27c <getTick>
 b3a:	a0 e0       	ldi	r26, 0x00	; 0
 b3c:	b0 e0       	ldi	r27, 0x00	; 0
 b3e:	b3 01       	movw	r22, r6
 b40:	a2 01       	movw	r20, r4
 b42:	4e 0d       	add	r20, r14
 b44:	5f 1d       	adc	r21, r15
 b46:	61 1d       	adc	r22, r1
 b48:	71 1d       	adc	r23, r1
 b4a:	48 17       	cp	r20, r24
 b4c:	59 07       	cpc	r21, r25
 b4e:	6a 07       	cpc	r22, r26
 b50:	7b 07       	cpc	r23, r27
 b52:	18 f0       	brcs	.+6      	; 0xb5a <writeSpiBuffer+0x11c>
 b54:	8b 81       	ldd	r24, Y+3	; 0x03
 b56:	88 23       	and	r24, r24
 b58:	71 f3       	breq	.-36     	; 0xb36 <writeSpiBuffer+0xf8>
	spi->one_transfer = 0;
 b5a:	1b 82       	std	Y+3, r1	; 0x03
	PORTB &= ~(1<<PORTB7); //set INT high
 b5c:	85 b1       	in	r24, 0x05	; 5
 b5e:	8f 77       	andi	r24, 0x7F	; 127
 b60:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 b62:	84 b1       	in	r24, 0x04	; 4
 b64:	8f 77       	andi	r24, 0x7F	; 127
 b66:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	enableHSKP(&housekp);
 b68:	86 e7       	ldi	r24, 0x76	; 118
 b6a:	91 e0       	ldi	r25, 0x01	; 1
 b6c:	80 db       	rcall	.-2304   	; 0x26e <enableHSKP>
	spi->spi_send_mode = 0;
 b6e:	18 82       	st	Y, r1
	//if(getTick()>start_tick+timeout)errorHandler();
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	0f 91       	pop	r16
 b76:	ff 90       	pop	r15
 b78:	ef 90       	pop	r14
 b7a:	df 90       	pop	r13
 b7c:	cf 90       	pop	r12
 b7e:	bf 90       	pop	r11
 b80:	af 90       	pop	r10
 b82:	9f 90       	pop	r9
 b84:	8f 90       	pop	r8
 b86:	7f 90       	pop	r7
 b88:	6f 90       	pop	r6
 b8a:	5f 90       	pop	r5
 b8c:	4f 90       	pop	r4
 b8e:	08 95       	ret

00000b90 <__divmodsi4>:
 b90:	05 2e       	mov	r0, r21
 b92:	97 fb       	bst	r25, 7
 b94:	16 f4       	brtc	.+4      	; 0xb9a <__divmodsi4+0xa>
 b96:	00 94       	com	r0
 b98:	0f d0       	rcall	.+30     	; 0xbb8 <__negsi2>
 b9a:	57 fd       	sbrc	r21, 7
 b9c:	05 d0       	rcall	.+10     	; 0xba8 <__divmodsi4_neg2>
 b9e:	14 d0       	rcall	.+40     	; 0xbc8 <__udivmodsi4>
 ba0:	07 fc       	sbrc	r0, 7
 ba2:	02 d0       	rcall	.+4      	; 0xba8 <__divmodsi4_neg2>
 ba4:	46 f4       	brtc	.+16     	; 0xbb6 <__divmodsi4_exit>
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <__negsi2>

00000ba8 <__divmodsi4_neg2>:
 ba8:	50 95       	com	r21
 baa:	40 95       	com	r20
 bac:	30 95       	com	r19
 bae:	21 95       	neg	r18
 bb0:	3f 4f       	sbci	r19, 0xFF	; 255
 bb2:	4f 4f       	sbci	r20, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255

00000bb6 <__divmodsi4_exit>:
 bb6:	08 95       	ret

00000bb8 <__negsi2>:
 bb8:	90 95       	com	r25
 bba:	80 95       	com	r24
 bbc:	70 95       	com	r23
 bbe:	61 95       	neg	r22
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255
 bc2:	8f 4f       	sbci	r24, 0xFF	; 255
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	08 95       	ret

00000bc8 <__udivmodsi4>:
 bc8:	a1 e2       	ldi	r26, 0x21	; 33
 bca:	1a 2e       	mov	r1, r26
 bcc:	aa 1b       	sub	r26, r26
 bce:	bb 1b       	sub	r27, r27
 bd0:	fd 01       	movw	r30, r26
 bd2:	0d c0       	rjmp	.+26     	; 0xbee <__udivmodsi4_ep>

00000bd4 <__udivmodsi4_loop>:
 bd4:	aa 1f       	adc	r26, r26
 bd6:	bb 1f       	adc	r27, r27
 bd8:	ee 1f       	adc	r30, r30
 bda:	ff 1f       	adc	r31, r31
 bdc:	a2 17       	cp	r26, r18
 bde:	b3 07       	cpc	r27, r19
 be0:	e4 07       	cpc	r30, r20
 be2:	f5 07       	cpc	r31, r21
 be4:	20 f0       	brcs	.+8      	; 0xbee <__udivmodsi4_ep>
 be6:	a2 1b       	sub	r26, r18
 be8:	b3 0b       	sbc	r27, r19
 bea:	e4 0b       	sbc	r30, r20
 bec:	f5 0b       	sbc	r31, r21

00000bee <__udivmodsi4_ep>:
 bee:	66 1f       	adc	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	1a 94       	dec	r1
 bf8:	69 f7       	brne	.-38     	; 0xbd4 <__udivmodsi4_loop>
 bfa:	60 95       	com	r22
 bfc:	70 95       	com	r23
 bfe:	80 95       	com	r24
 c00:	90 95       	com	r25
 c02:	9b 01       	movw	r18, r22
 c04:	ac 01       	movw	r20, r24
 c06:	bd 01       	movw	r22, r26
 c08:	cf 01       	movw	r24, r30
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>

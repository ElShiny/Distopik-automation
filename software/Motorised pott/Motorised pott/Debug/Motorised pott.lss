
Motorised pott.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00800100  00800100  00000860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d73  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf9  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c66  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  000040c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000645  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a84  00000000  00000000  00004a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005499  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	76 c2       	rjmp	.+1260   	; 0x4f4 <__vector_3>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	9e c0       	rjmp	.+316    	; 0x156 <__vector_12>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	ac 37       	cpi	r26, 0x7C	; 124
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	e3 d0       	rcall	.+454    	; 0x20c <main>
  46:	d0 c3       	rjmp	.+1952   	; 0x7e8 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <ADCRead>:
	
	adc->pot_pos = ADCRead();
}

uint16_t ADCRead(void){
	ADCSRA |= 1<<ADSC;
  4a:	ea e7       	ldi	r30, 0x7A	; 122
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	80 64       	ori	r24, 0x40	; 64
  52:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
  54:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  58:	84 ff       	sbrs	r24, 4
  5a:	fc cf       	rjmp	.-8      	; 0x54 <ADCRead+0xa>
	ADCSRA |= 1<<ADIF;
  5c:	ea e7       	ldi	r30, 0x7A	; 122
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	80 81       	ld	r24, Z
  62:	80 61       	ori	r24, 0x10	; 16
  64:	80 83       	st	Z, r24
	ADCSRA &= ~(0<<ADIF);
  66:	80 81       	ld	r24, Z
  68:	80 83       	st	Z, r24
	uint8_t val_low = ADCL;
  6a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
	uint16_t val = ADCH<<8 | val_low;
  6e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	98 2f       	mov	r25, r24
  76:	88 27       	eor	r24, r24
	return val;
}
  78:	82 2b       	or	r24, r18
  7a:	08 95       	ret

0000007c <ADCInit>:
#include "ADC.h"
#include "housekeeping.h"
#include <avr/io.h>


void ADCInit(adc_t *adc){
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	ec 01       	movw	r28, r24
	
	ADMUX |= 1<<REFS0 | ADC4D;
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	84 64       	ori	r24, 0x44	; 68
  8a:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN | 0b111;
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	87 68       	ori	r24, 0x87	; 135
  94:	80 83       	st	Z, r24
	
	DDRD |= 1<<0;//motor sleep
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= 1<<PORTD0;
	
	DDRB |= 1<<DDB1;//motor en
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<PORTB1;
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB0;//motor smer
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	84 b9       	out	0x04, r24	; 4
	
	
	adc->pot_pos = ADCRead();
  ae:	cd df       	rcall	.-102    	; 0x4a <ADCRead>
  b0:	9b 83       	std	Y+3, r25	; 0x03
  b2:	8a 83       	std	Y+2, r24	; 0x02
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <MovePot>:
	uint8_t val_low = ADCL;
	uint16_t val = ADCH<<8 | val_low;
	return val;
}

void MovePot(adc_t *adc, uint8_t pos){
  ba:	fc 01       	movw	r30, r24
	//if(old_pos == pos) break;
	
	if(pos < adc->adc_val_new){
  bc:	86 2f       	mov	r24, r22
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	24 81       	ldd	r18, Z+4	; 0x04
  c2:	35 81       	ldd	r19, Z+5	; 0x05
  c4:	82 17       	cp	r24, r18
  c6:	93 07       	cpc	r25, r19
  c8:	18 f4       	brcc	.+6      	; 0xd0 <MovePot+0x16>
		PORTB |= 1<<PORTB0;
  ca:	25 b1       	in	r18, 0x05	; 5
  cc:	21 60       	ori	r18, 0x01	; 1
  ce:	25 b9       	out	0x05, r18	; 5
	}
	if(pos > adc->adc_val_new){
  d0:	24 81       	ldd	r18, Z+4	; 0x04
  d2:	35 81       	ldd	r19, Z+5	; 0x05
  d4:	28 17       	cp	r18, r24
  d6:	39 07       	cpc	r19, r25
  d8:	18 f4       	brcc	.+6      	; 0xe0 <MovePot+0x26>
		PORTB &= ~(1<<PORTB0);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	85 b9       	out	0x05, r24	; 5
	}
	if(((pos-5) < adc->adc_val_new) && ((pos+5) > adc->adc_val_new)){
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	9b 01       	movw	r18, r22
  e4:	25 50       	subi	r18, 0x05	; 5
  e6:	31 09       	sbc	r19, r1
  e8:	84 81       	ldd	r24, Z+4	; 0x04
  ea:	95 81       	ldd	r25, Z+5	; 0x05
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	48 f4       	brcc	.+18     	; 0x104 <MovePot+0x4a>
  f2:	6b 5f       	subi	r22, 0xFB	; 251
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	86 17       	cp	r24, r22
  f8:	97 07       	cpc	r25, r23
  fa:	20 f4       	brcc	.+8      	; 0x104 <MovePot+0x4a>
		PORTD &= ~(1<<PORTD0);
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret
	}
	else PORTD |= 1<<PORTD0;
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	81 60       	ori	r24, 0x01	; 1
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	08 95       	ret

0000010c <timersInit>:
void PWMInit(pwm_t *pwm){
	
	TCCR0A = 1<<CTC0|1<<CS02; //timer enable
	OCR0A = 30;			//31 is 1 ms delay
	TIMSK0 = 1<<OCIE0A; //timer interrupt
	TCNT0 = 0;			//empty timer counter
 10c:	2c e0       	ldi	r18, 0x0C	; 12
 10e:	25 bd       	out	0x25, r18	; 37
 110:	2e e1       	ldi	r18, 0x1E	; 30
 112:	27 bd       	out	0x27, r18	; 39
 114:	22 e0       	ldi	r18, 0x02	; 2
 116:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
 11a:	16 bc       	out	0x26, r1	; 38
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	fc 01       	movw	r30, r24
 120:	24 83       	std	Z+4, r18	; 0x04
 122:	08 95       	ret

00000124 <enableTimer>:
}



void enableTimer(void){
	TIMSK0 |= 1<<OCIE0A;
 124:	ee e6       	ldi	r30, 0x6E	; 110
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <disableTimer>:
}

void disableTimer(void){
	TIMSK0 &= ~(1<<OCIE0A);
 130:	ee e6       	ldi	r30, 0x6E	; 110
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <enableHSKP>:
}

void enableHSKP(hskp_t *hskp){
	hskp->en = 1;
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	fc 01       	movw	r30, r24
 140:	24 83       	std	Z+4, r18	; 0x04
 142:	08 95       	ret

00000144 <disableHSKP>:
}

void disableHSKP(hskp_t *hskp){
	hskp->en = 0;
 144:	fc 01       	movw	r30, r24
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	08 95       	ret

0000014a <getTick>:
}

uint16_t getTick(hskp_t *hskp){
	return hskp->tick;
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	91 81       	ldd	r25, Z+1	; 0x01
 150:	a2 81       	ldd	r26, Z+2	; 0x02
 152:	b3 81       	ldd	r27, Z+3	; 0x03
}
 154:	08 95       	ret

00000156 <__vector_12>:



ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
 156:	78 94       	sei
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
		
	disableTimer();
 17a:	da df       	rcall	.-76     	; 0x130 <disableTimer>
	if(housekp.cnt == 1 && housekp.en){//reading ace values
 17c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <housekp+0x5>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	99 f4       	brne	.+38     	; 0x1aa <__vector_12+0x54>
 184:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <housekp+0x4>
 188:	88 23       	and	r24, r24
 18a:	79 f0       	breq	.+30     	; 0x1aa <__vector_12+0x54>
		adc_rot.adc_val_new = ADCRead();
 18c:	5e df       	rcall	.-324    	; 0x4a <ADCRead>
 18e:	e0 e0       	ldi	r30, 0x00	; 0
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	95 83       	std	Z+5, r25	; 0x05
 194:	84 83       	std	Z+4, r24	; 0x04
		if(adc_rot.adc_val_new != adc_rot.adc_val_old){
 196:	26 81       	ldd	r18, Z+6	; 0x06
 198:	37 81       	ldd	r19, Z+7	; 0x07
 19a:	82 17       	cp	r24, r18
 19c:	93 07       	cpc	r25, r19
 19e:	a1 f0       	breq	.+40     	; 0x1c8 <__vector_12+0x72>
			adc_rot.adc_changed = 1;
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	20 87       	std	Z+8, r18	; 0x08
			adc_rot.adc_val_old = adc_rot.adc_val_new;
 1a4:	97 83       	std	Z+7, r25	; 0x07
 1a6:	86 83       	std	Z+6, r24	; 0x06
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <__vector_12+0x72>
			}
	}
	
	else if(housekp.cnt >= 10 && housekp.en){//setting leds
 1aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <housekp+0x5>
 1ae:	8a 30       	cpi	r24, 0x0A	; 10
 1b0:	58 f0       	brcs	.+22     	; 0x1c8 <__vector_12+0x72>
 1b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <housekp+0x4>
 1b6:	88 23       	and	r24, r24
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <__vector_12+0x72>
		MovePot(&adc_rot, adc_rot.pot_pos);
 1ba:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	7b df       	rcall	.-266    	; 0xba <MovePot>
		housekp.cnt = 0;
 1c4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <housekp+0x5>
	}
	enableTimer();
 1c8:	ad df       	rcall	.-166    	; 0x124 <enableTimer>
	
	housekp.cnt++;
 1ca:	ea e0       	ldi	r30, 0x0A	; 10
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	85 81       	ldd	r24, Z+5	; 0x05
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	85 83       	std	Z+5, r24	; 0x05
	housekp.tick++;
 1d4:	80 81       	ld	r24, Z
 1d6:	91 81       	ldd	r25, Z+1	; 0x01
 1d8:	a2 81       	ldd	r26, Z+2	; 0x02
 1da:	b3 81       	ldd	r27, Z+3	; 0x03
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	80 83       	st	Z, r24
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	a2 83       	std	Z+2, r26	; 0x02
 1e8:	b3 83       	std	Z+3, r27	; 0x03
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <main>:



int main(void)
{
	MCUSR = 0;//disable watchdog
 20c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	a8 95       	wdr
 214:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 218:	88 61       	ori	r24, 0x18	; 24
 21a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 21e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 222:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	ADCInit(&adc_rot);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	29 df       	rcall	.-430    	; 0x7c <ADCInit>
	timersInit(&housekp);
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	6e df       	rcall	.-292    	; 0x10c <timersInit>
	SPIInit();
 230:	1a d1       	rcall	.+564    	; 0x466 <SPIInit>
	bufferInit(&buf);
 232:	85 e1       	ldi	r24, 0x15	; 21
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	30 d1       	rcall	.+608    	; 0x498 <bufferInit>
	
	sei();		
 238:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	80 e7       	ldi	r24, 0x70	; 112
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x34>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x3e>
 24a:	00 00       	nop
	
		
		
	while (1){
		
		parseSPI(&spi_s, &adc_rot, &buf, &housekp);
 24c:	2a e0       	ldi	r18, 0x0A	; 10
 24e:	31 e0       	ldi	r19, 0x01	; 1
 250:	45 e1       	ldi	r20, 0x15	; 21
 252:	51 e0       	ldi	r21, 0x01	; 1
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	71 e0       	ldi	r23, 0x01	; 1
 258:	83 e1       	ldi	r24, 0x13	; 19
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	10 d0       	rcall	.+32     	; 0x27e <parseSPI>
		
		if(adc_rot.adc_changed){
 25e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 262:	88 23       	and	r24, r24
 264:	99 f3       	breq	.-26     	; 0x24c <main+0x40>
			writeSpi(&spi_s, &housekp, 1, adc_rot.adc_val_new, 10);
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d1 e0       	ldi	r29, 0x01	; 1
 26a:	2c 81       	ldd	r18, Y+4	; 0x04
 26c:	0a e0       	ldi	r16, 0x0A	; 10
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	6a e0       	ldi	r22, 0x0A	; 10
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	83 e1       	ldi	r24, 0x13	; 19
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	93 d1       	rcall	.+806    	; 0x5a0 <writeSpi>
			adc_rot.adc_changed = 0;
 27a:	18 86       	std	Y+8, r1	; 0x08
 27c:	e7 cf       	rjmp	.-50     	; 0x24c <main+0x40>

0000027e <parseSPI>:





int parseSPI(spi_t *spi, adc_t *adc, buffer_t *buffer, hskp_t *hskp){
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	
	if(buffer->buffer_length == 0)return 0;
 28e:	fa 01       	movw	r30, r20
 290:	ec 59       	subi	r30, 0x9C	; 156
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	09 f4       	brne	.+2      	; 0x29c <parseSPI+0x1e>
 29a:	c8 c0       	rjmp	.+400    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 29c:	89 01       	movw	r16, r18
 29e:	ea 01       	movw	r28, r20
 2a0:	7b 01       	movw	r14, r22
	if(readBuffer(buffer) != RECIEVE_KEYWORD)return 0;
 2a2:	ca 01       	movw	r24, r20
 2a4:	54 d1       	rcall	.+680    	; 0x54e <readBuffer>
 2a6:	8f 3c       	cpi	r24, 0xCF	; 207
 2a8:	91 05       	cpc	r25, r1
 2aa:	09 f0       	breq	.+2      	; 0x2ae <parseSPI+0x30>
 2ac:	c2 c0       	rjmp	.+388    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

	int start_tick = getTick(hskp);
 2ae:	c8 01       	movw	r24, r16
 2b0:	4c df       	rcall	.-360    	; 0x14a <getTick>
 2b2:	6c 01       	movw	r12, r24
	
	parsing_state = PARSING_INSTR;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <parsing_state>
	while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <parseSPI+0x50>
 2bc:	c8 01       	movw	r24, r16
 2be:	45 df       	rcall	.-374    	; 0x14a <getTick>
 2c0:	96 01       	movw	r18, r12
 2c2:	28 57       	subi	r18, 0x78	; 120
 2c4:	3c 4e       	sbci	r19, 0xEC	; 236
 2c6:	28 17       	cp	r18, r24
 2c8:	39 07       	cpc	r19, r25
 2ca:	08 f4       	brcc	.+2      	; 0x2ce <parseSPI+0x50>
 2cc:	b5 c0       	rjmp	.+362    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 2ce:	ce 01       	movw	r24, r28
 2d0:	61 d1       	rcall	.+706    	; 0x594 <readBufferLength>
 2d2:	89 2b       	or	r24, r25
 2d4:	99 f3       	breq	.-26     	; 0x2bc <parseSPI+0x3e>
	int cmd = readBuffer(buffer);
 2d6:	ce 01       	movw	r24, r28
 2d8:	3a d1       	rcall	.+628    	; 0x54e <readBuffer>
	
	switch(cmd){
 2da:	87 31       	cpi	r24, 0x17	; 23
 2dc:	91 05       	cpc	r25, r1
 2de:	b4 f4       	brge	.+44     	; 0x30c <__stack+0xd>
 2e0:	85 31       	cpi	r24, 0x15	; 21
 2e2:	91 05       	cpc	r25, r1
 2e4:	0c f0       	brlt	.+2      	; 0x2e8 <parseSPI+0x6a>
 2e6:	ab c0       	rjmp	.+342    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	91 05       	cpc	r25, r1
 2ec:	e1 f1       	breq	.+120    	; 0x366 <__stack+0x67>
 2ee:	34 f4       	brge	.+12     	; 0x2fc <parseSPI+0x7e>
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <parseSPI+0x78>
 2f4:	a4 c0       	rjmp	.+328    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	e1 f0       	breq	.+56     	; 0x332 <__stack+0x33>
 2fa:	93 c0       	rjmp	.+294    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	91 05       	cpc	r25, r1
 300:	09 f4       	brne	.+2      	; 0x304 <__stack+0x5>
 302:	46 c0       	rjmp	.+140    	; 0x390 <__stack+0x91>
 304:	44 97       	sbiw	r24, 0x14	; 20
 306:	09 f4       	brne	.+2      	; 0x30a <__stack+0xb>
 308:	53 c0       	rjmp	.+166    	; 0x3b0 <__stack+0xb1>
 30a:	8b c0       	rjmp	.+278    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 30c:	8d 3f       	cpi	r24, 0xFD	; 253
 30e:	91 05       	cpc	r25, r1
 310:	09 f4       	brne	.+2      	; 0x314 <__stack+0x15>
 312:	60 c0       	rjmp	.+192    	; 0x3d4 <__stack+0xd5>
 314:	2c f4       	brge	.+10     	; 0x320 <__stack+0x21>
 316:	8c 3f       	cpi	r24, 0xFC	; 252
 318:	91 05       	cpc	r25, r1
 31a:	09 f4       	brne	.+2      	; 0x31e <__stack+0x1f>
 31c:	50 c0       	rjmp	.+160    	; 0x3be <__stack+0xbf>
 31e:	81 c0       	rjmp	.+258    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 320:	8e 3f       	cpi	r24, 0xFE	; 254
 322:	91 05       	cpc	r25, r1
 324:	09 f4       	brne	.+2      	; 0x328 <__stack+0x29>
 326:	63 c0       	rjmp	.+198    	; 0x3ee <__stack+0xef>
 328:	8f 3f       	cpi	r24, 0xFF	; 255
 32a:	91 05       	cpc	r25, r1
 32c:	09 f4       	brne	.+2      	; 0x330 <__stack+0x31>
 32e:	6e c0       	rjmp	.+220    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 330:	78 c0       	rjmp	.+240    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		
		case 0: //do nothing
			break;
		
		case 1: //write ace value
			writeSpi(&spi_s, &housekp, 1, (uint8_t)(adc->pot_pos>>2), 10);
 332:	f7 01       	movw	r30, r14
 334:	22 81       	ldd	r18, Z+2	; 0x02
 336:	33 81       	ldd	r19, Z+3	; 0x03
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	36 95       	lsr	r19
 33e:	27 95       	ror	r18
 340:	0a e0       	ldi	r16, 0x0A	; 10
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	6a e0       	ldi	r22, 0x0A	; 10
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	83 e1       	ldi	r24, 0x13	; 19
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	29 d1       	rcall	.+594    	; 0x5a0 <writeSpi>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
		case 0: //do nothing
			break;
		
		case 1: //write ace value
			writeSpi(&spi_s, &housekp, 1, (uint8_t)(adc->pot_pos>>2), 10);
			break;
 352:	80 c0       	rjmp	.+256    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		
		case 2: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 354:	c8 01       	movw	r24, r16
 356:	f9 de       	rcall	.-526    	; 0x14a <getTick>
 358:	96 01       	movw	r18, r12
 35a:	28 57       	subi	r18, 0x78	; 120
 35c:	3c 4e       	sbci	r19, 0xEC	; 236
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	08 f4       	brcc	.+2      	; 0x366 <__stack+0x67>
 364:	6f c0       	rjmp	.+222    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 366:	ce 01       	movw	r24, r28
 368:	15 d1       	rcall	.+554    	; 0x594 <readBufferLength>
 36a:	89 2b       	or	r24, r25
 36c:	99 f3       	breq	.-26     	; 0x354 <__stack+0x55>
			adc->pot_pos = readBuffer(buffer);
 36e:	ce 01       	movw	r24, r28
 370:	ee d0       	rcall	.+476    	; 0x54e <readBuffer>
 372:	f7 01       	movw	r30, r14
 374:	93 83       	std	Z+3, r25	; 0x03
 376:	82 83       	std	Z+2, r24	; 0x02
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		
		case 2: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
			adc->pot_pos = readBuffer(buffer);
			break;
 37c:	6b c0       	rjmp	.+214    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		
		case 3: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 37e:	c8 01       	movw	r24, r16
 380:	e4 de       	rcall	.-568    	; 0x14a <getTick>
 382:	96 01       	movw	r18, r12
 384:	28 57       	subi	r18, 0x78	; 120
 386:	3c 4e       	sbci	r19, 0xEC	; 236
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	08 f4       	brcc	.+2      	; 0x390 <__stack+0x91>
 38e:	5d c0       	rjmp	.+186    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 390:	ce 01       	movw	r24, r28
 392:	00 d1       	rcall	.+512    	; 0x594 <readBufferLength>
 394:	89 2b       	or	r24, r25
 396:	99 f3       	breq	.-26     	; 0x37e <__stack+0x7f>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	5b c0       	rjmp	.+182    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
			//led_settings.ace_en = readBuffer();
			break;
			
		case 20:// LED mode
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 39e:	c8 01       	movw	r24, r16
 3a0:	d4 de       	rcall	.-600    	; 0x14a <getTick>
 3a2:	96 01       	movw	r18, r12
 3a4:	28 57       	subi	r18, 0x78	; 120
 3a6:	3c 4e       	sbci	r19, 0xEC	; 236
 3a8:	28 17       	cp	r18, r24
 3aa:	39 07       	cpc	r19, r25
 3ac:	08 f4       	brcc	.+2      	; 0x3b0 <__stack+0xb1>
 3ae:	50 c0       	rjmp	.+160    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3b0:	ce 01       	movw	r24, r28
 3b2:	f0 d0       	rcall	.+480    	; 0x594 <readBufferLength>
 3b4:	89 2b       	or	r24, r25
 3b6:	99 f3       	breq	.-26     	; 0x39e <__stack+0x9f>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	4b c0       	rjmp	.+150    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 3be:	98 e0       	ldi	r25, 0x08	; 8
 3c0:	88 e1       	ldi	r24, 0x18	; 24
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	a8 95       	wdr
 3c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stack+0xd3>
			
		case 252://report current buffer
			soft_reset();
			break;
		case 253://report current buffer
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
 3d4:	ce 01       	movw	r24, r28
 3d6:	de d0       	rcall	.+444    	; 0x594 <readBufferLength>
 3d8:	04 e6       	ldi	r16, 0x64	; 100
 3da:	28 2f       	mov	r18, r24
 3dc:	4d ef       	ldi	r20, 0xFD	; 253
 3de:	6a e0       	ldi	r22, 0x0A	; 10
 3e0:	71 e0       	ldi	r23, 0x01	; 1
 3e2:	83 e1       	ldi	r24, 0x13	; 19
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	dc d0       	rcall	.+440    	; 0x5a0 <writeSpi>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
		case 252://report current buffer
			soft_reset();
			break;
		case 253://report current buffer
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
			break;
 3ec:	33 c0       	rjmp	.+102    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		
		case 254://report current buffer
			writeSpiBuffer(&spi_s, &housekp, 254, buffer, BUFFER_SIZE, 100);
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f4 e6       	ldi	r31, 0x64	; 100
 3f2:	ef 2e       	mov	r14, r31
 3f4:	f0 2d       	mov	r31, r0
 3f6:	04 e6       	ldi	r16, 0x64	; 100
 3f8:	9e 01       	movw	r18, r28
 3fa:	4e ef       	ldi	r20, 0xFE	; 254
 3fc:	6a e0       	ldi	r22, 0x0A	; 10
 3fe:	71 e0       	ldi	r23, 0x01	; 1
 400:	83 e1       	ldi	r24, 0x13	; 19
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	4a d1       	rcall	.+660    	; 0x69a <writeSpiBuffer>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
			writeSpi(&spi_s, &housekp, 253, readBufferLength(buffer), 100);
			break;
		
		case 254://report current buffer
			writeSpiBuffer(&spi_s, &housekp, 254, buffer, BUFFER_SIZE, 100);
			break;
 40a:	24 c0       	rjmp	.+72     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
					
		case 255:
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
 40c:	04 e6       	ldi	r16, 0x64	; 100
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	4f ef       	ldi	r20, 0xFF	; 255
 412:	6a e0       	ldi	r22, 0x0A	; 10
 414:	71 e0       	ldi	r23, 0x01	; 1
 416:	83 e1       	ldi	r24, 0x13	; 19
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	c2 d0       	rcall	.+388    	; 0x5a0 <writeSpi>
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
			writeSpiBuffer(&spi_s, &housekp, 254, buffer, BUFFER_SIZE, 100);
			break;
					
		case 255:
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
 420:	19 c0       	rjmp	.+50     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		default: bufferInit(buffer);
 422:	ce 01       	movw	r24, r28
 424:	39 d0       	rcall	.+114    	; 0x498 <bufferInit>
		
	}
	return 0;	
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	14 c0       	rjmp	.+40     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>



int parseSPI(spi_t *spi, adc_t *adc, buffer_t *buffer, hskp_t *hskp){
	
	if(buffer->buffer_length == 0)return 0;
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	11 c0       	rjmp	.+34     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	if(readBuffer(buffer) != RECIEVE_KEYWORD)return 0;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e c0       	rjmp	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

	int start_tick = getTick(hskp);
	
	parsing_state = PARSING_INSTR;
	while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	0b c0       	rjmp	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			writeSpi(&spi_s, &housekp, 255, MOTORISED_POTT, 100);
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	08 c0       	rjmp	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		case 1: //write ace value
			writeSpi(&spi_s, &housekp, 1, (uint8_t)(adc->pot_pos>>2), 10);
			break;
		
		case 2: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	9f ef       	ldi	r25, 0xFF	; 255
 448:	05 c0       	rjmp	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			adc->pot_pos = readBuffer(buffer);
			break;
		
		case 3: //get ace value
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f ef       	ldi	r25, 0xFF	; 255
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			//led_settings.ace_en = readBuffer();
			break;
			
		case 20:// LED mode
			while(readBufferLength(buffer) == 0){if(getTick(hskp)>(start_tick+MAX_TIMEOUT))return -1;}
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	9f ef       	ldi	r25, 0xFF	; 255
			break;
		default: bufferInit(buffer);
		
	}
	return 0;	
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	08 95       	ret

00000466 <SPIInit>:



void SPIInit(void){
	
	DDRB &= ~(1<<DDB7); //set HIZ mode
 466:	84 b1       	in	r24, 0x04	; 4
 468:	8f 77       	andi	r24, 0x7F	; 127
 46a:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB7);
 46c:	85 b1       	in	r24, 0x05	; 5
 46e:	8f 77       	andi	r24, 0x7F	; 127
 470:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= 1<<DDB4; //set MISO output
 472:	84 b1       	in	r24, 0x04	; 4
 474:	80 61       	ori	r24, 0x10	; 16
 476:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= 1<< DDB6;
 478:	84 b1       	in	r24, 0x04	; 4
 47a:	80 64       	ori	r24, 0x40	; 64
 47c:	84 b9       	out	0x04, r24	; 4
	
	PCICR |= 1<< PCIE0; //interrupt for SS
 47e:	e8 e6       	ldi	r30, 0x68	; 104
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	81 60       	ori	r24, 0x01	; 1
 486:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT2;
 488:	eb e6       	ldi	r30, 0x6B	; 107
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	80 83       	st	Z, r24
	
	SPCR = 1<<SPE;// | 1<<SPIE; //enable SPI
 492:	80 e4       	ldi	r24, 0x40	; 64
 494:	8c bd       	out	0x2c, r24	; 44
 496:	08 95       	ret

00000498 <bufferInit>:
}


void bufferInit(buffer_t *buffer){
	
	buffer->read_index = 0;
 498:	fc 01       	movw	r30, r24
 49a:	eb 59       	subi	r30, 0x9B	; 155
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	10 82       	st	Z, r1
	buffer->write_index = 0;
 4a0:	31 96       	adiw	r30, 0x01	; 1
 4a2:	10 82       	st	Z, r1
	buffer->buffer_length = 0;
 4a4:	32 97       	sbiw	r30, 0x02	; 2
 4a6:	10 82       	st	Z, r1
	buffer->buffer[0] = 0;
 4a8:	fc 01       	movw	r30, r24
 4aa:	10 82       	st	Z, r1
	buffer->buffer[1] = 0;
 4ac:	11 82       	std	Z+1, r1	; 0x01
 4ae:	08 95       	ret

000004b0 <writeBuffer>:
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 4b0:	fc 01       	movw	r30, r24
 4b2:	ec 59       	subi	r30, 0x9C	; 156
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	20 81       	ld	r18, Z
 4b8:	23 36       	cpi	r18, 0x63	; 99
 4ba:	b1 f0       	breq	.+44     	; 0x4e8 <writeBuffer+0x38>
	buffer->buffer[buffer->write_index] = val;
 4bc:	32 96       	adiw	r30, 0x02	; 2
 4be:	20 81       	ld	r18, Z
 4c0:	dc 01       	movw	r26, r24
 4c2:	a2 0f       	add	r26, r18
 4c4:	b1 1d       	adc	r27, r1
 4c6:	6c 93       	st	X, r22
	buffer->write_index++;
 4c8:	20 81       	ld	r18, Z
 4ca:	2f 5f       	subi	r18, 0xFF	; 255
 4cc:	20 83       	st	Z, r18
	buffer->buffer_length++;
 4ce:	dc 01       	movw	r26, r24
 4d0:	ac 59       	subi	r26, 0x9C	; 156
 4d2:	bf 4f       	sbci	r27, 0xFF	; 255
 4d4:	2c 91       	ld	r18, X
 4d6:	2f 5f       	subi	r18, 0xFF	; 255
 4d8:	2c 93       	st	X, r18
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
 4da:	20 81       	ld	r18, Z
 4dc:	23 36       	cpi	r18, 0x63	; 99
 4de:	39 f4       	brne	.+14     	; 0x4ee <writeBuffer+0x3e>
 4e0:	10 82       	st	Z, r1
	return 0;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	08 95       	ret
	buffer->buffer[1] = 0;
}

int writeBuffer(buffer_t *buffer, uint8_t val){
	
	if(buffer->buffer_length == BUFFER_SIZE - 1) return -1;
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	08 95       	ret
	buffer->buffer[buffer->write_index] = val;
	buffer->write_index++;
	buffer->buffer_length++;
	if(buffer->write_index == BUFFER_SIZE - 1) buffer->write_index = 0;
	return 0;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
}
 4f2:	08 95       	ret

000004f4 <__vector_3>:
#include <avr/interrupt.h>
#include <util/delay.h>



ISR(PCINT0_vect){
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	if(!(PINB & 1<<PINB2) ||/* !(PINB & 1<<PINB7)*/ spi_s.spi_busy)return;
 516:	1a 9b       	sbis	0x03, 2	; 3
 518:	09 c0       	rjmp	.+18     	; 0x52c <__vector_3+0x38>
 51a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spi_s>
 51e:	81 11       	cpse	r24, r1
 520:	05 c0       	rjmp	.+10     	; 0x52c <__vector_3+0x38>
	
	writeBuffer(&buf, SPDR);
 522:	6e b5       	in	r22, 0x2e	; 46
 524:	85 e1       	ldi	r24, 0x15	; 21
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	c3 df       	rcall	.-122    	; 0x4b0 <writeBuffer>
	SPDR = 0;
 52a:	1e bc       	out	0x2e, r1	; 46
}
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <readBuffer>:
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 54e:	fc 01       	movw	r30, r24
 550:	ec 59       	subi	r30, 0x9C	; 156
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	20 81       	ld	r18, Z
 556:	22 23       	and	r18, r18
 558:	b9 f0       	breq	.+46     	; 0x588 <readBuffer+0x3a>
	int buf = buffer->buffer[buffer->read_index];
 55a:	31 96       	adiw	r30, 0x01	; 1
 55c:	20 81       	ld	r18, Z
 55e:	dc 01       	movw	r26, r24
 560:	a2 0f       	add	r26, r18
 562:	b1 1d       	adc	r27, r1
 564:	2c 91       	ld	r18, X
 566:	30 e0       	ldi	r19, 0x00	; 0
	buffer->read_index++;
 568:	40 81       	ld	r20, Z
 56a:	4f 5f       	subi	r20, 0xFF	; 255
 56c:	40 83       	st	Z, r20
	buffer->buffer_length--;
 56e:	dc 01       	movw	r26, r24
 570:	ac 59       	subi	r26, 0x9C	; 156
 572:	bf 4f       	sbci	r27, 0xFF	; 255
 574:	4c 91       	ld	r20, X
 576:	41 50       	subi	r20, 0x01	; 1
 578:	4c 93       	st	X, r20
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
 57a:	40 81       	ld	r20, Z
 57c:	43 36       	cpi	r20, 0x63	; 99
 57e:	39 f4       	brne	.+14     	; 0x58e <readBuffer+0x40>
 580:	10 82       	st	Z, r1
	return buf;
 582:	82 2f       	mov	r24, r18
 584:	93 2f       	mov	r25, r19
 586:	08 95       	ret
	return 0;
}

int readBuffer(buffer_t *buffer){
	
	if(buffer->buffer_length == 0) return -1;
 588:	8f ef       	ldi	r24, 0xFF	; 255
 58a:	9f ef       	ldi	r25, 0xFF	; 255
 58c:	08 95       	ret
	int buf = buffer->buffer[buffer->read_index];
	buffer->read_index++;
	buffer->buffer_length--;
	if(buffer->read_index == BUFFER_SIZE - 1) buffer->read_index = 0;
	return buf;
 58e:	82 2f       	mov	r24, r18
 590:	93 2f       	mov	r25, r19
}
 592:	08 95       	ret

00000594 <readBufferLength>:

int readBufferLength(buffer_t *buffer){
	return buffer->buffer_length;
 594:	8c 59       	subi	r24, 0x9C	; 156
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	fc 01       	movw	r30, r24
 59a:	80 81       	ld	r24, Z
}
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	08 95       	ret

000005a0 <writeSpi>:

void writeSpi(spi_t *spi, hskp_t *hskp, uint8_t instr, uint8_t data, uint8_t timeout){
 5a0:	8f 92       	push	r8
 5a2:	9f 92       	push	r9
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	7c 01       	movw	r14, r24
 5b8:	eb 01       	movw	r28, r22
 5ba:	d4 2e       	mov	r13, r20
 5bc:	12 2f       	mov	r17, r18
	
	uint32_t start_tick = getTick(hskp);
 5be:	cb 01       	movw	r24, r22
 5c0:	c4 dd       	rcall	.-1144   	; 0x14a <getTick>
 5c2:	4c 01       	movw	r8, r24
 5c4:	a1 2c       	mov	r10, r1
 5c6:	b1 2c       	mov	r11, r1
	while(!(PINB & 1<<PINB2)){}
 5c8:	1a 9b       	sbis	0x03, 2	; 3
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <writeSpi+0x28>
	disableHSKP(&housekp);
 5cc:	8a e0       	ldi	r24, 0x0A	; 10
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	b9 dd       	rcall	.-1166   	; 0x144 <disableHSKP>
	spi->spi_busy = 1;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	f7 01       	movw	r30, r14
 5d6:	80 83       	st	Z, r24


	SPSR;
 5d8:	8d b5       	in	r24, 0x2d	; 45
	SPDR = TRANSMIT_KEYWORD;
 5da:	8f ed       	ldi	r24, 0xDF	; 223
 5dc:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);//set INT low
 5de:	85 b1       	in	r24, 0x05	; 5
 5e0:	8f 77       	andi	r24, 0x7F	; 127
 5e2:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 5e4:	84 b1       	in	r24, 0x04	; 4
 5e6:	80 68       	ori	r24, 0x80	; 128
 5e8:	84 b9       	out	0x04, r24	; 4
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 5ea:	0f c0       	rjmp	.+30     	; 0x60a <writeSpi+0x6a>
 5ec:	ce 01       	movw	r24, r28
 5ee:	ad dd       	rcall	.-1190   	; 0x14a <getTick>
 5f0:	a0 e0       	ldi	r26, 0x00	; 0
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	b5 01       	movw	r22, r10
 5f6:	a4 01       	movw	r20, r8
 5f8:	40 0f       	add	r20, r16
 5fa:	51 1d       	adc	r21, r1
 5fc:	61 1d       	adc	r22, r1
 5fe:	71 1d       	adc	r23, r1
 600:	48 17       	cp	r20, r24
 602:	59 07       	cpc	r21, r25
 604:	6a 07       	cpc	r22, r26
 606:	7b 07       	cpc	r23, r27
 608:	28 f0       	brcs	.+10     	; 0x614 <writeSpi+0x74>
 60a:	0d b4       	in	r0, 0x2d	; 45
 60c:	07 fe       	sbrs	r0, 7
 60e:	ee cf       	rjmp	.-36     	; 0x5ec <writeSpi+0x4c>
 610:	1a 9b       	sbis	0x03, 2	; 3
 612:	ec cf       	rjmp	.-40     	; 0x5ec <writeSpi+0x4c>
	
	SPDR = instr;
 614:	de bc       	out	0x2e, r13	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 616:	0f c0       	rjmp	.+30     	; 0x636 <writeSpi+0x96>
 618:	ce 01       	movw	r24, r28
 61a:	97 dd       	rcall	.-1234   	; 0x14a <getTick>
 61c:	a0 e0       	ldi	r26, 0x00	; 0
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	b5 01       	movw	r22, r10
 622:	a4 01       	movw	r20, r8
 624:	40 0f       	add	r20, r16
 626:	51 1d       	adc	r21, r1
 628:	61 1d       	adc	r22, r1
 62a:	71 1d       	adc	r23, r1
 62c:	48 17       	cp	r20, r24
 62e:	59 07       	cpc	r21, r25
 630:	6a 07       	cpc	r22, r26
 632:	7b 07       	cpc	r23, r27
 634:	28 f0       	brcs	.+10     	; 0x640 <writeSpi+0xa0>
 636:	0d b4       	in	r0, 0x2d	; 45
 638:	07 fe       	sbrs	r0, 7
 63a:	ee cf       	rjmp	.-36     	; 0x618 <writeSpi+0x78>
 63c:	1a 9b       	sbis	0x03, 2	; 3
 63e:	ec cf       	rjmp	.-40     	; 0x618 <writeSpi+0x78>
	
	SPDR = data;
 640:	1e bd       	out	0x2e, r17	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 642:	0f c0       	rjmp	.+30     	; 0x662 <writeSpi+0xc2>
 644:	ce 01       	movw	r24, r28
 646:	81 dd       	rcall	.-1278   	; 0x14a <getTick>
 648:	a0 e0       	ldi	r26, 0x00	; 0
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	b5 01       	movw	r22, r10
 64e:	a4 01       	movw	r20, r8
 650:	40 0f       	add	r20, r16
 652:	51 1d       	adc	r21, r1
 654:	61 1d       	adc	r22, r1
 656:	71 1d       	adc	r23, r1
 658:	48 17       	cp	r20, r24
 65a:	59 07       	cpc	r21, r25
 65c:	6a 07       	cpc	r22, r26
 65e:	7b 07       	cpc	r23, r27
 660:	28 f0       	brcs	.+10     	; 0x66c <writeSpi+0xcc>
 662:	0d b4       	in	r0, 0x2d	; 45
 664:	07 fe       	sbrs	r0, 7
 666:	ee cf       	rjmp	.-36     	; 0x644 <writeSpi+0xa4>
 668:	1a 9b       	sbis	0x03, 2	; 3
 66a:	ec cf       	rjmp	.-40     	; 0x644 <writeSpi+0xa4>
	
	PORTB &= ~(1<<PORTB7); //set INT high
 66c:	85 b1       	in	r24, 0x05	; 5
 66e:	8f 77       	andi	r24, 0x7F	; 127
 670:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 672:	84 b1       	in	r24, 0x04	; 4
 674:	8f 77       	andi	r24, 0x7F	; 127
 676:	84 b9       	out	0x04, r24	; 4
	
	//PCICR |= 1<< PCIE0;
	enableHSKP(&housekp);
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	5f dd       	rcall	.-1346   	; 0x13c <enableHSKP>
	spi->spi_busy = 0;
 67e:	f7 01       	movw	r30, r14
 680:	10 82       	st	Z, r1
}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	df 90       	pop	r13
 690:	bf 90       	pop	r11
 692:	af 90       	pop	r10
 694:	9f 90       	pop	r9
 696:	8f 90       	pop	r8
 698:	08 95       	ret

0000069a <writeSpiBuffer>:

void writeSpiBuffer(spi_t *spi, hskp_t *hskp, uint8_t instr, uint8_t* data, uint8_t length, uint8_t timeout){
 69a:	4f 92       	push	r4
 69c:	5f 92       	push	r5
 69e:	6f 92       	push	r6
 6a0:	7f 92       	push	r7
 6a2:	8f 92       	push	r8
 6a4:	9f 92       	push	r9
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	0f 93       	push	r16
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	4c 01       	movw	r8, r24
 6b8:	eb 01       	movw	r28, r22
 6ba:	d4 2e       	mov	r13, r20
 6bc:	59 01       	movw	r10, r18
	
	uint32_t start_tick = getTick(hskp);
 6be:	cb 01       	movw	r24, r22
 6c0:	44 dd       	rcall	.-1400   	; 0x14a <getTick>
 6c2:	2c 01       	movw	r4, r24
 6c4:	61 2c       	mov	r6, r1
 6c6:	71 2c       	mov	r7, r1
	while(!(PINB & 1<<PINB2)){}
 6c8:	1a 9b       	sbis	0x03, 2	; 3
 6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <writeSpiBuffer+0x2e>
	disableHSKP(&housekp);
 6cc:	8a e0       	ldi	r24, 0x0A	; 10
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	39 dd       	rcall	.-1422   	; 0x144 <disableHSKP>
	spi->spi_busy = 1;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	f4 01       	movw	r30, r8
 6d6:	80 83       	st	Z, r24
	
	SPSR;		//clearing spif flag
 6d8:	8d b5       	in	r24, 0x2d	; 45
	SPDR = TRANSMIT_KEYWORD;		//set instr
 6da:	8f ed       	ldi	r24, 0xDF	; 223
 6dc:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= ~(1<<PORTB7);	//set INT low
 6de:	85 b1       	in	r24, 0x05	; 5
 6e0:	8f 77       	andi	r24, 0x7F	; 127
 6e2:	85 b9       	out	0x05, r24	; 5
	DDRB |= 1<<DDB7;
 6e4:	84 b1       	in	r24, 0x04	; 4
 6e6:	80 68       	ori	r24, 0x80	; 128
 6e8:	84 b9       	out	0x04, r24	; 4

	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 6ea:	0f c0       	rjmp	.+30     	; 0x70a <writeSpiBuffer+0x70>
 6ec:	ce 01       	movw	r24, r28
 6ee:	2d dd       	rcall	.-1446   	; 0x14a <getTick>
 6f0:	a0 e0       	ldi	r26, 0x00	; 0
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	b3 01       	movw	r22, r6
 6f6:	a2 01       	movw	r20, r4
 6f8:	4e 0d       	add	r20, r14
 6fa:	51 1d       	adc	r21, r1
 6fc:	61 1d       	adc	r22, r1
 6fe:	71 1d       	adc	r23, r1
 700:	48 17       	cp	r20, r24
 702:	59 07       	cpc	r21, r25
 704:	6a 07       	cpc	r22, r26
 706:	7b 07       	cpc	r23, r27
 708:	28 f0       	brcs	.+10     	; 0x714 <writeSpiBuffer+0x7a>
 70a:	0d b4       	in	r0, 0x2d	; 45
 70c:	07 fe       	sbrs	r0, 7
 70e:	ee cf       	rjmp	.-36     	; 0x6ec <writeSpiBuffer+0x52>
 710:	1a 9b       	sbis	0x03, 2	; 3
 712:	ec cf       	rjmp	.-40     	; 0x6ec <writeSpiBuffer+0x52>
	
	SPDR = instr;
 714:	de bc       	out	0x2e, r13	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 716:	0f c0       	rjmp	.+30     	; 0x736 <writeSpiBuffer+0x9c>
 718:	ce 01       	movw	r24, r28
 71a:	17 dd       	rcall	.-1490   	; 0x14a <getTick>
 71c:	a0 e0       	ldi	r26, 0x00	; 0
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	b3 01       	movw	r22, r6
 722:	a2 01       	movw	r20, r4
 724:	4e 0d       	add	r20, r14
 726:	51 1d       	adc	r21, r1
 728:	61 1d       	adc	r22, r1
 72a:	71 1d       	adc	r23, r1
 72c:	48 17       	cp	r20, r24
 72e:	59 07       	cpc	r21, r25
 730:	6a 07       	cpc	r22, r26
 732:	7b 07       	cpc	r23, r27
 734:	28 f0       	brcs	.+10     	; 0x740 <writeSpiBuffer+0xa6>
 736:	0d b4       	in	r0, 0x2d	; 45
 738:	07 fe       	sbrs	r0, 7
 73a:	ee cf       	rjmp	.-36     	; 0x718 <writeSpiBuffer+0x7e>
 73c:	1a 9b       	sbis	0x03, 2	; 3
 73e:	ec cf       	rjmp	.-40     	; 0x718 <writeSpiBuffer+0x7e>
	
	SPDR = length;
 740:	0e bd       	out	0x2e, r16	; 46
	
	for(int i=0; i<length; i++){
 742:	c1 2c       	mov	r12, r1
 744:	d1 2c       	mov	r13, r1
 746:	1c c0       	rjmp	.+56     	; 0x780 <writeSpiBuffer+0xe6>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
 748:	ce 01       	movw	r24, r28
 74a:	ff dc       	rcall	.-1538   	; 0x14a <getTick>
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	b3 01       	movw	r22, r6
 752:	a2 01       	movw	r20, r4
 754:	4e 0d       	add	r20, r14
 756:	51 1d       	adc	r21, r1
 758:	61 1d       	adc	r22, r1
 75a:	71 1d       	adc	r23, r1
 75c:	48 17       	cp	r20, r24
 75e:	59 07       	cpc	r21, r25
 760:	6a 07       	cpc	r22, r26
 762:	7b 07       	cpc	r23, r27
 764:	28 f0       	brcs	.+10     	; 0x770 <writeSpiBuffer+0xd6>
 766:	0d b4       	in	r0, 0x2d	; 45
 768:	07 fe       	sbrs	r0, 7
 76a:	ee cf       	rjmp	.-36     	; 0x748 <writeSpiBuffer+0xae>
 76c:	1a 9b       	sbis	0x03, 2	; 3
 76e:	ec cf       	rjmp	.-40     	; 0x748 <writeSpiBuffer+0xae>
		SPDR = data[i];
 770:	f5 01       	movw	r30, r10
 772:	ec 0d       	add	r30, r12
 774:	fd 1d       	adc	r31, r13
 776:	80 81       	ld	r24, Z
 778:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
	
	SPDR = length;
	
	for(int i=0; i<length; i++){
 77a:	ff ef       	ldi	r31, 0xFF	; 255
 77c:	cf 1a       	sub	r12, r31
 77e:	df 0a       	sbc	r13, r31
 780:	80 2f       	mov	r24, r16
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	c8 16       	cp	r12, r24
 786:	d9 06       	cpc	r13, r25
 788:	74 f3       	brlt	.-36     	; 0x766 <writeSpiBuffer+0xcc>
 78a:	0f c0       	rjmp	.+30     	; 0x7aa <writeSpiBuffer+0x110>
		while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout)break;}
		SPDR = data[i];
	}
	while(!(SPSR & 1<<SPIF) || !(PINB & 1<<PINB2)){if(getTick(hskp)>start_tick+timeout) break;}
 78c:	ce 01       	movw	r24, r28
 78e:	dd dc       	rcall	.-1606   	; 0x14a <getTick>
 790:	a0 e0       	ldi	r26, 0x00	; 0
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	b3 01       	movw	r22, r6
 796:	a2 01       	movw	r20, r4
 798:	4e 0d       	add	r20, r14
 79a:	51 1d       	adc	r21, r1
 79c:	61 1d       	adc	r22, r1
 79e:	71 1d       	adc	r23, r1
 7a0:	48 17       	cp	r20, r24
 7a2:	59 07       	cpc	r21, r25
 7a4:	6a 07       	cpc	r22, r26
 7a6:	7b 07       	cpc	r23, r27
 7a8:	28 f0       	brcs	.+10     	; 0x7b4 <writeSpiBuffer+0x11a>
 7aa:	0d b4       	in	r0, 0x2d	; 45
 7ac:	07 fe       	sbrs	r0, 7
 7ae:	ee cf       	rjmp	.-36     	; 0x78c <writeSpiBuffer+0xf2>
 7b0:	1a 9b       	sbis	0x03, 2	; 3
 7b2:	ec cf       	rjmp	.-40     	; 0x78c <writeSpiBuffer+0xf2>
	PORTB &= ~(1<<PORTB7); //set INT high
 7b4:	85 b1       	in	r24, 0x05	; 5
 7b6:	8f 77       	andi	r24, 0x7F	; 127
 7b8:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<DDB7);
 7ba:	84 b1       	in	r24, 0x04	; 4
 7bc:	8f 77       	andi	r24, 0x7F	; 127
 7be:	84 b9       	out	0x04, r24	; 4
	//_delay_us(10);
	
	enableHSKP(&housekp);
 7c0:	8a e0       	ldi	r24, 0x0A	; 10
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	bb dc       	rcall	.-1674   	; 0x13c <enableHSKP>
	spi->spi_busy = 0;
 7c6:	f4 01       	movw	r30, r8
 7c8:	10 82       	st	Z, r1
	//if(getTick()>start_tick+timeout)errorHandler();
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	0f 91       	pop	r16
 7d0:	ef 90       	pop	r14
 7d2:	df 90       	pop	r13
 7d4:	cf 90       	pop	r12
 7d6:	bf 90       	pop	r11
 7d8:	af 90       	pop	r10
 7da:	9f 90       	pop	r9
 7dc:	8f 90       	pop	r8
 7de:	7f 90       	pop	r7
 7e0:	6f 90       	pop	r6
 7e2:	5f 90       	pop	r5
 7e4:	4f 90       	pop	r4
 7e6:	08 95       	ret

000007e8 <_exit>:
 7e8:	f8 94       	cli

000007ea <__stop_program>:
 7ea:	ff cf       	rjmp	.-2      	; 0x7ea <__stop_program>

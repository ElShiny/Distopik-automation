
Led ring ACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800132  00800132  00000f38  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d9  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c25  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be3  00000000  00000000  0000351e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00004104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a48  00000000  00000000  00004a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000054e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e1 c0       	rjmp	.+450    	; 0x1c4 <__ctors_end>
   2:	fb c0       	rjmp	.+502    	; 0x1fa <__bad_interrupt>
   4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
   6:	e3 c2       	rjmp	.+1478   	; 0x5ce <__vector_3>
   8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
   a:	f7 c0       	rjmp	.+494    	; 0x1fa <__bad_interrupt>
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
   e:	f5 c0       	rjmp	.+490    	; 0x1fa <__bad_interrupt>
  10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
  12:	f3 c0       	rjmp	.+486    	; 0x1fa <__bad_interrupt>
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
  16:	f1 c0       	rjmp	.+482    	; 0x1fa <__bad_interrupt>
  18:	9f c1       	rjmp	.+830    	; 0x358 <__vector_12>
  1a:	ef c0       	rjmp	.+478    	; 0x1fa <__bad_interrupt>
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
  1e:	ed c0       	rjmp	.+474    	; 0x1fa <__bad_interrupt>
  20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
  22:	eb c0       	rjmp	.+470    	; 0x1fa <__bad_interrupt>
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
  26:	e9 c0       	rjmp	.+466    	; 0x1fa <__bad_interrupt>

00000028 <__trampolines_end>:
  28:	ff 38       	cpi	r31, 0x8F	; 143
  2a:	28 37       	cpi	r18, 0x78	; 120
  2c:	18 ff       	.word	0xff18	; ????
  2e:	27 34       	cpi	r18, 0x47	; 71
  30:	08 39       	cpi	r16, 0x98	; 152
  32:	ff ff       	.word	0xffff	; ????
  34:	17 ff       	sbrs	r17, 7
  36:	24 0d       	add	r18, r4
  38:	78 ff       	.word	0xff78	; ????
  3a:	29 36       	cpi	r18, 0x69	; 105
  3c:	ff ff       	.word	0xffff	; ????
  3e:	ff 35       	cpi	r31, 0x5F	; 95
  40:	07 ff       	sbrs	r16, 7
  42:	ff ff       	.word	0xffff	; ????
  44:	14 13       	cpse	r17, r20
  46:	7d 12       	cpse	r7, r29
  48:	68 69       	ori	r22, 0x98	; 152
  4a:	ff ff       	.word	0xffff	; ????
  4c:	19 6a       	ori	r17, 0xA9	; 169
  4e:	26 ff       	sbrs	r18, 6
  50:	ff 3a       	cpi	r31, 0xAF	; 175
  52:	ff ff       	.word	0xffff	; ????
  54:	ff ff       	.word	0xffff	; ????
  56:	25 0e       	add	r2, r21
  58:	77 76       	andi	r23, 0x67	; 103
  5a:	ff ff       	.word	0xffff	; ????
  5c:	ff 6b       	ori	r31, 0xBF	; 191
  5e:	ff ff       	.word	0xffff	; ????
  60:	04 ff       	sbrs	r16, 4
  62:	03 ff       	sbrs	r16, 3
  64:	6d 6c       	ori	r22, 0xCD	; 205
  66:	02 01       	movw	r0, r4
  68:	58 ff       	.word	0xff58	; ????
  6a:	59 ff       	.word	0xff59	; ????
  6c:	ff ff       	.word	0xffff	; ????
  6e:	ff 33       	cpi	r31, 0x3F	; 63
  70:	09 0a       	sbc	r0, r25
  72:	5a ff       	.word	0xff5a	; ????
  74:	16 0b       	sbc	r17, r22
  76:	ff 0c       	add	r15, r15
  78:	ff ff       	.word	0xffff	; ????
  7a:	2a 2b       	or	r18, r26
  7c:	ff ff       	.word	0xffff	; ????
  7e:	ff ff       	.word	0xffff	; ????
  80:	ff ff       	.word	0xffff	; ????
  82:	ff ff       	.word	0xffff	; ????
  84:	15 ff       	sbrs	r17, 5
  86:	7e 7f       	andi	r23, 0xFE	; 254
  88:	67 ff       	sbrs	r22, 7
  8a:	66 ff       	sbrs	r22, 6
  8c:	ff ff       	.word	0xffff	; ????
  8e:	ff ff       	.word	0xffff	; ????
  90:	ff ff       	.word	0xffff	; ????
  92:	5b ff       	.word	0xff5b	; ????
  94:	ff ff       	.word	0xffff	; ????
  96:	ff ff       	.word	0xffff	; ????
  98:	74 75       	andi	r23, 0x54	; 84
  9a:	ff ff       	.word	0xffff	; ????
  9c:	73 ff       	sbrs	r23, 3
  9e:	ff ff       	.word	0xffff	; ????
  a0:	5d 5e       	subi	r21, 0xED	; 237
  a2:	5c ff       	.word	0xff5c	; ????
  a4:	72 5f       	subi	r23, 0xF2	; 242
  a6:	71 00       	.word	0x0071	; ????
  a8:	48 47       	sbci	r20, 0x78	; 120
  aa:	ff 44       	sbci	r31, 0x4F	; 79
  ac:	49 ff       	.word	0xff49	; ????
  ae:	ff 1d       	adc	r31, r15
  b0:	ff 46       	sbci	r31, 0x6F	; 111
  b2:	ff 45       	sbci	r31, 0x5F	; 95
  b4:	ff ff       	.word	0xffff	; ????
  b6:	23 22       	and	r2, r19
  b8:	79 ff       	.word	0xff79	; ????
  ba:	7a ff       	.word	0xff7a	; ????
  bc:	4a ff       	.word	0xff4a	; ????
  be:	ff 1e       	adc	r15, r31
  c0:	06 ff       	sbrs	r16, 6
  c2:	7b ff       	.word	0xff7b	; ????
  c4:	ff ff       	.word	0xffff	; ????
  c6:	7c 11       	cpse	r23, r12
  c8:	ff ff       	.word	0xffff	; ????
  ca:	ff 43       	sbci	r31, 0x3F	; 63
  cc:	1a ff       	.word	0xff1a	; ????
  ce:	1b 1c       	adc	r1, r11
  d0:	ff 3b       	cpi	r31, 0xBF	; 191
  d2:	ff ff       	.word	0xffff	; ????
  d4:	ff ff       	.word	0xffff	; ????
  d6:	ff 0f       	add	r31, r31
  d8:	ff ff       	.word	0xffff	; ????
  da:	ff ff       	.word	0xffff	; ????
  dc:	ff ff       	.word	0xffff	; ????
  de:	ff ff       	.word	0xffff	; ????
  e0:	05 ff       	sbrs	r16, 5
  e2:	ff ff       	.word	0xffff	; ????
  e4:	6e ff       	.word	0xff6e	; ????
  e6:	6f 10       	cpse	r6, r15
  e8:	57 54       	subi	r21, 0x47	; 71
  ea:	ff 2d       	mov	r31, r15
  ec:	56 55       	subi	r21, 0x56	; 86
  ee:	ff 32       	cpi	r31, 0x2F	; 47
  f0:	ff ff       	.word	0xffff	; ????
  f2:	ff 2e       	mov	r15, r31
  f4:	ff ff       	.word	0xffff	; ????
  f6:	ff 21       	and	r31, r15
  f8:	ff 53       	subi	r31, 0x3F	; 63
  fa:	ff 2c       	mov	r15, r15
  fc:	4b ff       	.word	0xff4b	; ????
  fe:	ff 1f       	adc	r31, r31
 100:	ff ff       	.word	0xffff	; ????
 102:	ff ff       	.word	0xffff	; ????
 104:	ff ff       	.word	0xffff	; ????
 106:	ff 20       	and	r15, r15
 108:	64 3d       	cpi	r22, 0xD4	; 212
 10a:	65 42       	sbci	r22, 0x25	; 37
 10c:	ff 3e       	cpi	r31, 0xEF	; 239
 10e:	ff 31       	cpi	r31, 0x1F	; 31
 110:	63 3c       	cpi	r22, 0xC3	; 195
 112:	ff 2f       	mov	r31, r31
 114:	ff ff       	.word	0xffff	; ????
 116:	ff 30       	cpi	r31, 0x0F	; 15
 118:	4d 52       	subi	r20, 0x2D	; 45
 11a:	4e 41       	sbci	r20, 0x1E	; 30
 11c:	4c 3f       	cpi	r20, 0xFC	; 252
 11e:	ff 40       	sbci	r31, 0x0F	; 15
 120:	62 51       	subi	r22, 0x12	; 18
 122:	4f 50       	subi	r20, 0x0F	; 15
 124:	61 60       	ori	r22, 0x01	; 1
 126:	70 ff       	sbrs	r23, 0

00000128 <table>:
 128:	00 c2 01 00 01 00 05 00 05 00 03 00 00 e1 00 00     ................
 138:	01 00 0f 00 0f 00 0d 00 00 96 00 00 02 00 19 00     ................
 148:	1a 00 17 00 12 7a 00 00 07 00 20 00 21 00 1d 00     .....z.... .!...
 158:	80 70 00 00 0b 00 23 00 23 00 20 00 00 4b 00 00     .p....#.#. ..K..
 168:	14 00 37 00 37 00 34 00 40 38 00 00 1e 00 4b 00     ..7.7.4.@8....K.
 178:	4b 00 48 00 80 25 00 00 32 00 72 00 72 00 70 00     K.H..%..2.r.r.p.
 188:	c0 12 00 00 6e 00 e9 00 e9 00 e6 00 60 09 00 00     ....n.......`...
 198:	e5 00 d8 01 d8 01 d5 01 b0 04 00 00 d3 01 b4 03     ................
 1a8:	b4 03 b1 03 58 02 00 00 b4 03 67 07 67 07 62 07     ....X.....g.g.b.
 1b8:	2c 01 00 00 67 07 dd 0e dd 0e da 0e                 ,...g.......

000001c4 <__ctors_end>:
 1c4:	11 24       	eor	r1, r1
 1c6:	1f be       	out	0x3f, r1	; 63
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
 1ca:	d2 e0       	ldi	r29, 0x02	; 2
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
 1d0:	11 e0       	ldi	r17, 0x01	; 1
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b1 e0       	ldi	r27, 0x01	; 1
 1d6:	e2 e7       	ldi	r30, 0x72	; 114
 1d8:	fe e0       	ldi	r31, 0x0E	; 14
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
 1dc:	05 90       	lpm	r0, Z+
 1de:	0d 92       	st	X+, r0
 1e0:	a2 33       	cpi	r26, 0x32	; 50
 1e2:	b1 07       	cpc	r27, r17
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	a2 e3       	ldi	r26, 0x32	; 50
 1ea:	b1 e0       	ldi	r27, 0x01	; 1
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
 1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
 1f0:	a2 38       	cpi	r26, 0x82	; 130
 1f2:	b2 07       	cpc	r27, r18
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
 1f6:	a6 d1       	rcall	.+844    	; 0x544 <main>
 1f8:	3a c6       	rjmp	.+3188   	; 0xe6e <_exit>

000001fa <__bad_interrupt>:
 1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <isBitSet>:
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1);
	
	PORTD |= 1<<ACE_EN;
	
	return raw_val;
}
 1fc:	86 23       	and	r24, r22
 1fe:	11 f0       	breq	.+4      	; 0x204 <__DATA_REGION_LENGTH__+0x4>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret

00000208 <readACEQuick>:

uint8_t ACETransform(uint8_t val){
	return encoderMap[val];
}

uint8_t readACEQuick(void){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
	PORTD &= ~(1<<ACE_EN);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	8b b9       	out	0x0b, r24	; 11
	asm("nop\n\t"
 212:	00 00       	nop
 214:	00 00       	nop
 216:	00 00       	nop
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 218:	86 b1       	in	r24, 0x06	; 6
 21a:	60 e8       	ldi	r22, 0x80	; 128
 21c:	ef df       	rcall	.-34     	; 0x1fc <isBitSet>
 21e:	c8 2f       	mov	r28, r24
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	d6 95       	lsr	r29
 224:	dc 2f       	mov	r29, r28
 226:	cc 27       	eor	r28, r28
 228:	d7 95       	ror	r29
 22a:	c7 95       	ror	r28
 22c:	86 b1       	in	r24, 0x06	; 6
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	e5 df       	rcall	.-54     	; 0x1fc <isBitSet>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	00 24       	eor	r0, r0
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	07 94       	ror	r0
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	07 94       	ror	r0
 242:	98 2f       	mov	r25, r24
 244:	80 2d       	mov	r24, r0
 246:	c8 2b       	or	r28, r24
 248:	d9 2b       	or	r29, r25
 24a:	86 b1       	in	r24, 0x06	; 6
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	d6 df       	rcall	.-84     	; 0x1fc <isBitSet>
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	82 95       	swap	r24
 258:	92 95       	swap	r25
 25a:	90 7f       	andi	r25, 0xF0	; 240
 25c:	98 27       	eor	r25, r24
 25e:	80 7f       	andi	r24, 0xF0	; 240
 260:	98 27       	eor	r25, r24
 262:	c8 2b       	or	r28, r24
 264:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 266:	86 b1       	in	r24, 0x06	; 6
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	c8 df       	rcall	.-112    	; 0x1fc <isBitSet>
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	82 95       	swap	r24
 270:	92 95       	swap	r25
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	98 27       	eor	r25, r24
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	98 27       	eor	r25, r24
uint8_t readACEQuick(void){
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 27a:	c8 2b       	or	r28, r24
 27c:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 27e:	89 b1       	in	r24, 0x09	; 9
 280:	60 e4       	ldi	r22, 0x40	; 64
 282:	bc df       	rcall	.-136    	; 0x1fc <isBitSet>
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	c8 2b       	or	r28, r24
 294:	d9 2b       	or	r29, r25
 296:	89 b1       	in	r24, 0x09	; 9
 298:	60 e8       	ldi	r22, 0x80	; 128
 29a:	b0 df       	rcall	.-160    	; 0x1fc <isBitSet>
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	c8 2b       	or	r28, r24
 2a8:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 2aa:	83 b1       	in	r24, 0x03	; 3
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	a6 df       	rcall	.-180    	; 0x1fc <isBitSet>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 2b6:	c8 2b       	or	r28, r24
 2b8:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 2ba:	83 b1       	in	r24, 0x03	; 3
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	9e df       	rcall	.-196    	; 0x1fc <isBitSet>
 2c0:	fe 01       	movw	r30, r28
 2c2:	e8 2b       	or	r30, r24
uint8_t readACEQuick(void){
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 2c4:	e8 5d       	subi	r30, 0xD8	; 216
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	84 91       	lpm	r24, Z
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
	
	PORTD |= 1<<ACE_EN;
 2ca:	9b b1       	in	r25, 0x0b	; 11
 2cc:	98 60       	ori	r25, 0x08	; 8
 2ce:	9b b9       	out	0x0b, r25	; 11
	return val;
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <ACEInit>:
int cnt = 0;


void ACEInit(void){
	
	DDRB &= ~(0x03); //set ace pins on portx to input
 2d6:	84 b1       	in	r24, 0x04	; 4
 2d8:	8c 7f       	andi	r24, 0xFC	; 252
 2da:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(0x87);
 2dc:	87 b1       	in	r24, 0x07	; 7
 2de:	88 77       	andi	r24, 0x78	; 120
 2e0:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x08; //set EN to output
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= 1<<ACE_EN; 
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	8b b9       	out	0x0b, r24	; 11
	
	TCCR0A = 1<<CTC0|1<<CS02|1<<CS00; //timer enable
 2ec:	8d e0       	ldi	r24, 0x0D	; 13
 2ee:	85 bd       	out	0x25, r24	; 37
	OCR0A = 78;			//10 ms delay
 2f0:	8e e4       	ldi	r24, 0x4E	; 78
 2f2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1<<OCIE0A; //timer interrupt
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
	sei();				// enable global interrupts
 2fa:	78 94       	sei
	TCNT0 = 0;			//empty timer counter
 2fc:	16 bc       	out	0x26, r1	; 38
	
	ace_val_old = readACEQuick();
 2fe:	84 df       	rcall	.-248    	; 0x208 <readACEQuick>
 300:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 304:	08 95       	ret

00000306 <absoluteToRelative>:
uint8_t isBitSet(uint8_t reg, uint8_t pin){
	if (reg & pin) return 0;
	else return 1;
}

void absoluteToRelative(uint8_t *old_val, uint8_t *new_val, int *save){
 306:	fb 01       	movw	r30, r22
	
	int delta = 0;
	
	if(*old_val > 117 && *new_val < 10) delta = *new_val - *old_val + 128;		//corrections for zero crossing
 308:	dc 01       	movw	r26, r24
 30a:	6c 91       	ld	r22, X
 30c:	66 37       	cpi	r22, 0x76	; 118
 30e:	48 f0       	brcs	.+18     	; 0x322 <absoluteToRelative+0x1c>
 310:	20 81       	ld	r18, Z
 312:	2a 30       	cpi	r18, 0x0A	; 10
 314:	30 f4       	brcc	.+12     	; 0x322 <absoluteToRelative+0x1c>
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	26 1b       	sub	r18, r22
 31a:	31 09       	sbc	r19, r1
 31c:	20 58       	subi	r18, 0x80	; 128
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	0f c0       	rjmp	.+30     	; 0x340 <absoluteToRelative+0x3a>
	else if(*old_val < 15 && *new_val > 110) delta = *new_val - *old_val - 128;
 322:	6f 30       	cpi	r22, 0x0F	; 15
 324:	48 f4       	brcc	.+18     	; 0x338 <absoluteToRelative+0x32>
 326:	20 81       	ld	r18, Z
 328:	2f 36       	cpi	r18, 0x6F	; 111
 32a:	30 f0       	brcs	.+12     	; 0x338 <absoluteToRelative+0x32>
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	26 1b       	sub	r18, r22
 330:	31 09       	sbc	r19, r1
 332:	20 58       	subi	r18, 0x80	; 128
 334:	31 09       	sbc	r19, r1
 336:	04 c0       	rjmp	.+8      	; 0x340 <absoluteToRelative+0x3a>
	else delta = *new_val - *old_val;
 338:	20 81       	ld	r18, Z
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	26 1b       	sub	r18, r22
 33e:	31 09       	sbc	r19, r1
	
	*save = *save + delta;	
 340:	da 01       	movw	r26, r20
 342:	6d 91       	ld	r22, X+
 344:	7c 91       	ld	r23, X
 346:	11 97       	sbiw	r26, 0x01	; 1
 348:	26 0f       	add	r18, r22
 34a:	37 1f       	adc	r19, r23
 34c:	2d 93       	st	X+, r18
 34e:	3c 93       	st	X, r19
	
	*old_val = *new_val;
 350:	20 81       	ld	r18, Z
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
 356:	08 95       	ret

00000358 <__vector_12>:
	
}


ISR(TIMER0_COMPA_vect){
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
	ace_val_new = readACEQuick();
 37a:	46 df       	rcall	.-372    	; 0x208 <readACEQuick>
 37c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ace_val_new>
	absoluteToRelative(&ace_val_old, &ace_val_new, &ace_val);
 380:	44 e3       	ldi	r20, 0x34	; 52
 382:	51 e0       	ldi	r21, 0x01	; 1
 384:	63 e3       	ldi	r22, 0x33	; 51
 386:	71 e0       	ldi	r23, 0x01	; 1
 388:	82 e3       	ldi	r24, 0x32	; 50
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	bc df       	rcall	.-136    	; 0x306 <absoluteToRelative>

// 	if(cnt++ == 600){
// 		ace_val	= 0;
// 		cnt = 0;
// 	}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <I2CInit>:
#define BITRATE 2       // Hardware I2C bitrate// 2 for 400kHz, 32 for 100kHz
#define PRESCALER 0		// SET PRESCALER TO 1


void I2CInit(void){
  TWBR = BITRATE;
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
  TWSR &= ~(0x2 & PRESCALER);
 3b6:	e9 eb       	ldi	r30, 0xB9	; 185
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	80 83       	st	Z, r24
 3be:	08 95       	ret

000003c0 <I2CStart>:
}

// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
 3c0:	ec eb       	ldi	r30, 0xBC	; 188
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	90 81       	ld	r25, Z
 3c6:	94 6a       	ori	r25, 0xA4	; 164
 3c8:	90 83       	st	Z, r25
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
 3ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3ce:	99 23       	and	r25, r25
 3d0:	e4 f7       	brge	.-8      	; 0x3ca <I2CStart+0xa>
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 3d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3d6:	98 7f       	andi	r25, 0xF8	; 248
 3d8:	98 30       	cpi	r25, 0x08	; 8
 3da:	29 f0       	breq	.+10     	; 0x3e6 <I2CStart+0x26>
 3dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 3e0:	98 7f       	andi	r25, 0xF8	; 248
 3e2:	90 31       	cpi	r25, 0x10	; 16
 3e4:	c9 f4       	brne	.+50     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	TWDR = address<<1 | rw;						//write adr+rw
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	86 2b       	or	r24, r22
 3ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
 3f2:	84 e8       	ldi	r24, 0x84	; 132
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));				//wait for send
 3f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 3fc:	88 23       	and	r24, r24
 3fe:	e4 f7       	brge	.-8      	; 0x3f8 <I2CStart+0x38>
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 400:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 404:	88 7f       	andi	r24, 0xF8	; 248
 406:	88 31       	cpi	r24, 0x18	; 24
 408:	49 f0       	breq	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 40a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 40e:	88 7f       	andi	r24, 0xF8	; 248
 410:	80 34       	cpi	r24, 0x40	; 64
 412:	31 f4       	brne	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	08 95       	ret
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 420:	81 e0       	ldi	r24, 0x01	; 1
	return 0;

}
 422:	08 95       	ret

00000424 <I2CStop>:

void I2CStop (void) {
	TWCR = 1<<TWINT|1<<TWSTO|1<<TWEN;	// Send STOP
 424:	84 e9       	ldi	r24, 0x94	; 148
 426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 42a:	08 95       	ret

0000042c <I2CWrite>:
	//while (!(TWCR & (1<<TWINT)));		// Wait for bus to return to idle state
}

uint8_t I2CWrite (uint8_t data) {
  TWDR = data;
 42c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
  TWCR = 1<<TWINT | 1 << TWEN;
 430:	84 e8       	ldi	r24, 0x84	; 132
 432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
  while (!(TWCR & 1<<TWINT));
 436:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 43a:	88 23       	and	r24, r24
 43c:	e4 f7       	brge	.-8      	; 0x436 <I2CWrite+0xa>
  if((TWSR & 0xF8) != (1<<TWS5|1<<TWS3)) return 1;
 43e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	88 32       	cpi	r24, 0x28	; 40
 446:	11 f0       	breq	.+4      	; 0x44c <I2CWrite+0x20>
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	08 95       	ret
  return 0;
 44c:	80 e0       	ldi	r24, 0x00	; 0
  //return (TWSR & 0xF8);
}
 44e:	08 95       	ret

00000450 <LEDSetReg>:
	I2CStop();
	if(I2CStart(IS3_ADR, I2C_READ)) return 1;
	uint8_t ret = I2CRead(0);
	I2CStop();
	return ret;
}
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	c8 2f       	mov	r28, r24
 456:	d6 2f       	mov	r29, r22
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	84 e3       	ldi	r24, 0x34	; 52
 45c:	b1 df       	rcall	.-158    	; 0x3c0 <I2CStart>
 45e:	81 11       	cpse	r24, r1
 460:	0b c0       	rjmp	.+22     	; 0x478 <LEDSetReg+0x28>
 462:	8c 2f       	mov	r24, r28
 464:	e3 df       	rcall	.-58     	; 0x42c <I2CWrite>
 466:	81 11       	cpse	r24, r1
 468:	09 c0       	rjmp	.+18     	; 0x47c <LEDSetReg+0x2c>
 46a:	8d 2f       	mov	r24, r29
 46c:	df df       	rcall	.-66     	; 0x42c <I2CWrite>
 46e:	c8 2f       	mov	r28, r24
 470:	81 11       	cpse	r24, r1
 472:	06 c0       	rjmp	.+12     	; 0x480 <LEDSetReg+0x30>
 474:	d7 df       	rcall	.-82     	; 0x424 <I2CStop>
 476:	05 c0       	rjmp	.+10     	; 0x482 <LEDSetReg+0x32>
 478:	c1 e0       	ldi	r28, 0x01	; 1
 47a:	03 c0       	rjmp	.+6      	; 0x482 <LEDSetReg+0x32>
 47c:	c1 e0       	ldi	r28, 0x01	; 1
 47e:	01 c0       	rjmp	.+2      	; 0x482 <LEDSetReg+0x32>
 480:	c1 e0       	ldi	r28, 0x01	; 1
 482:	8c 2f       	mov	r24, r28
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <LEDInit>:
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	6e ea       	ldi	r22, 0xAE	; 174
 490:	8f ec       	ldi	r24, 0xCF	; 207
 492:	de df       	rcall	.-68     	; 0x450 <LEDSetReg>
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	80 ea       	ldi	r24, 0xA0	; 160
 498:	db df       	rcall	.-74     	; 0x450 <LEDSetReg>
 49a:	6e e1       	ldi	r22, 0x1E	; 30
 49c:	81 ea       	ldi	r24, 0xA1	; 161
 49e:	d8 df       	rcall	.-80     	; 0x450 <LEDSetReg>
 4a0:	c0 e9       	ldi	r28, 0x90	; 144
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
 4a4:	04 c0       	rjmp	.+8      	; 0x4ae <LEDInit+0x24>
 4a6:	6c e3       	ldi	r22, 0x3C	; 60
 4a8:	8c 2f       	mov	r24, r28
 4aa:	d2 df       	rcall	.-92     	; 0x450 <LEDSetReg>
 4ac:	21 96       	adiw	r28, 0x01	; 1
 4ae:	cf 39       	cpi	r28, 0x9F	; 159
 4b0:	d1 05       	cpc	r29, r1
 4b2:	cc f3       	brlt	.-14     	; 0x4a6 <LEDInit+0x1c>
 4b4:	87 b1       	in	r24, 0x07	; 7
 4b6:	88 60       	ori	r24, 0x08	; 8
 4b8:	87 b9       	out	0x07, r24	; 7
 4ba:	88 b1       	in	r24, 0x08	; 8
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	88 b9       	out	0x08, r24	; 8
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <setLED>:

uint8_t setLED(uint8_t led, uint8_t rgb){
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	c6 2f       	mov	r28, r22
	uint8_t led_adr = led_adr_arr[led];
 4cc:	e8 2f       	mov	r30, r24
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	e0 50       	subi	r30, 0x00	; 0
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	d0 81       	ld	r29, Z
	if(I2CStart(IS3_ADR, I2C_WRITE)) return 1;
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	84 e3       	ldi	r24, 0x34	; 52
 4da:	72 df       	rcall	.-284    	; 0x3c0 <I2CStart>
 4dc:	81 11       	cpse	r24, r1
 4de:	2b c0       	rjmp	.+86     	; 0x536 <setLED+0x70>
	if(I2CWrite(led_adr)) return 1;
 4e0:	8d 2f       	mov	r24, r29
 4e2:	a4 df       	rcall	.-184    	; 0x42c <I2CWrite>
 4e4:	d8 2f       	mov	r29, r24
 4e6:	81 11       	cpse	r24, r1
 4e8:	28 c0       	rjmp	.+80     	; 0x53a <setLED+0x74>
	
	I2CWrite(85*(0x3&rgb));
 4ea:	8c 2f       	mov	r24, r28
 4ec:	83 70       	andi	r24, 0x03	; 3
 4ee:	98 2f       	mov	r25, r24
 4f0:	99 0f       	add	r25, r25
 4f2:	99 0f       	add	r25, r25
 4f4:	89 0f       	add	r24, r25
 4f6:	98 2f       	mov	r25, r24
 4f8:	92 95       	swap	r25
 4fa:	90 7f       	andi	r25, 0xF0	; 240
 4fc:	89 0f       	add	r24, r25
 4fe:	96 df       	rcall	.-212    	; 0x42c <I2CWrite>
	I2CWrite(85*(0x3&(rgb>>2)));
 500:	8c 2f       	mov	r24, r28
 502:	86 95       	lsr	r24
 504:	86 95       	lsr	r24
 506:	83 70       	andi	r24, 0x03	; 3
 508:	98 2f       	mov	r25, r24
 50a:	99 0f       	add	r25, r25
 50c:	99 0f       	add	r25, r25
 50e:	89 0f       	add	r24, r25
 510:	98 2f       	mov	r25, r24
 512:	92 95       	swap	r25
 514:	90 7f       	andi	r25, 0xF0	; 240
 516:	89 0f       	add	r24, r25
 518:	89 df       	rcall	.-238    	; 0x42c <I2CWrite>
	I2CWrite(85*(0x3&(rgb>>4)));
 51a:	c2 95       	swap	r28
 51c:	cf 70       	andi	r28, 0x0F	; 15
 51e:	c3 70       	andi	r28, 0x03	; 3
 520:	8c 2f       	mov	r24, r28
 522:	88 0f       	add	r24, r24
 524:	88 0f       	add	r24, r24
 526:	c8 0f       	add	r28, r24
 528:	8c 2f       	mov	r24, r28
 52a:	82 95       	swap	r24
 52c:	80 7f       	andi	r24, 0xF0	; 240
 52e:	8c 0f       	add	r24, r28
 530:	7d df       	rcall	.-262    	; 0x42c <I2CWrite>
	
	I2CStop();
 532:	78 df       	rcall	.-272    	; 0x424 <I2CStop>
	return 0;
 534:	03 c0       	rjmp	.+6      	; 0x53c <setLED+0x76>
	return ret;
}

uint8_t setLED(uint8_t led, uint8_t rgb){
	uint8_t led_adr = led_adr_arr[led];
	if(I2CStart(IS3_ADR, I2C_WRITE)) return 1;
 536:	d1 e0       	ldi	r29, 0x01	; 1
 538:	01 c0       	rjmp	.+2      	; 0x53c <setLED+0x76>
	if(I2CWrite(led_adr)) return 1;
 53a:	d1 e0       	ldi	r29, 0x01	; 1
	I2CWrite(85*(0x3&(rgb>>2)));
	I2CWrite(85*(0x3&(rgb>>4)));
	
	I2CStop();
	return 0;
 53c:	8d 2f       	mov	r24, r29
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <main>:



int main(void)
{
	softSerialBegin(9600);
 544:	60 e8       	ldi	r22, 0x80	; 128
 546:	75 e2       	ldi	r23, 0x25	; 37
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	a3 d0       	rcall	.+326    	; 0x694 <softSerialBegin>
	ACEInit();
 54e:	c3 de       	rcall	.-634    	; 0x2d6 <ACEInit>
	I2CInit();
 550:	2f df       	rcall	.-418    	; 0x3b0 <I2CInit>
	LEDInit();
 552:	9b df       	rcall	.-202    	; 0x48a <LEDInit>
	
	while(1){
	
		int led = ((ace_val>>2)*15)>>5;
 554:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ace_val>
 558:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ace_val+0x1>
 55c:	9c 01       	movw	r18, r24
 55e:	35 95       	asr	r19
 560:	27 95       	ror	r18
 562:	35 95       	asr	r19
 564:	27 95       	ror	r18
 566:	89 01       	movw	r16, r18
 568:	02 95       	swap	r16
 56a:	12 95       	swap	r17
 56c:	10 7f       	andi	r17, 0xF0	; 240
 56e:	10 27       	eor	r17, r16
 570:	00 7f       	andi	r16, 0xF0	; 240
 572:	10 27       	eor	r17, r16
 574:	02 1b       	sub	r16, r18
 576:	13 0b       	sbc	r17, r19
 578:	15 95       	asr	r17
 57a:	07 95       	ror	r16
 57c:	15 95       	asr	r17
 57e:	07 95       	ror	r16
 580:	15 95       	asr	r17
 582:	07 95       	ror	r16
 584:	15 95       	asr	r17
 586:	07 95       	ror	r16
 588:	15 95       	asr	r17
 58a:	07 95       	ror	r16
		debug_printf("LED: %d, ACE: %d\r\n", led, ace_val);
 58c:	9f 93       	push	r25
 58e:	8f 93       	push	r24
 590:	1f 93       	push	r17
 592:	0f 93       	push	r16
 594:	8e e1       	ldi	r24, 0x1E	; 30
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	9f 93       	push	r25
 59a:	8f 93       	push	r24
 59c:	48 d1       	rcall	.+656    	; 0x82e <debug_printf>

		for(int i = 0; i<30; i++){
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	c0 e0       	ldi	r28, 0x00	; 0
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
 5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <main+0x82>
			if(i<=led)setLED(i, 0b000100);
 5b0:	0c 17       	cp	r16, r28
 5b2:	1d 07       	cpc	r17, r29
 5b4:	24 f0       	brlt	.+8      	; 0x5be <main+0x7a>
 5b6:	64 e0       	ldi	r22, 0x04	; 4
 5b8:	8c 2f       	mov	r24, r28
 5ba:	85 df       	rcall	.-246    	; 0x4c6 <setLED>
 5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <main+0x80>
			else setLED(i, 0b010000);
 5be:	60 e1       	ldi	r22, 0x10	; 16
 5c0:	8c 2f       	mov	r24, r28
 5c2:	81 df       	rcall	.-254    	; 0x4c6 <setLED>
	while(1){
	
		int led = ((ace_val>>2)*15)>>5;
		debug_printf("LED: %d, ACE: %d\r\n", led, ace_val);

		for(int i = 0; i<30; i++){
 5c4:	21 96       	adiw	r28, 0x01	; 1
 5c6:	ce 31       	cpi	r28, 0x1E	; 30
 5c8:	d1 05       	cpc	r29, r1
 5ca:	94 f3       	brlt	.-28     	; 0x5b0 <main+0x6c>
 5cc:	c3 cf       	rjmp	.-122    	; 0x554 <main+0x10>

000005ce <__vector_3>:
	if (_receive_buffer_head == _receive_buffer_tail)
		return -1;

	// Read from "head"
	return _receive_buffer[_receive_buffer_head];
}
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
 5e6:	1f 99       	sbic	0x03, 7	; 3
 5e8:	49 c0       	rjmp	.+146    	; 0x67c <__vector_3+0xae>
 5ea:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_rx_delay_centering>
 5ee:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_rx_delay_centering+0x1>
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	2f ef       	ldi	r18, 0xFF	; 255
 5f8:	8f 3f       	cpi	r24, 0xFF	; 255
 5fa:	92 07       	cpc	r25, r18
 5fc:	d9 f7       	brne	.-10     	; 0x5f4 <__vector_3+0x26>
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	12 c0       	rjmp	.+36     	; 0x628 <__vector_3+0x5a>
 604:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <_rx_delay_intrabit>
 608:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <_rx_delay_intrabit+0x1>
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	3f ef       	ldi	r19, 0xFF	; 255
 612:	8f 3f       	cpi	r24, 0xFF	; 255
 614:	93 07       	cpc	r25, r19
 616:	d9 f7       	brne	.-10     	; 0x60e <__vector_3+0x40>
 618:	82 2f       	mov	r24, r18
 61a:	80 95       	com	r24
 61c:	1f 9b       	sbis	0x03, 7	; 3
 61e:	02 c0       	rjmp	.+4      	; 0x624 <__vector_3+0x56>
 620:	42 2b       	or	r20, r18
 622:	01 c0       	rjmp	.+2      	; 0x626 <__vector_3+0x58>
 624:	48 23       	and	r20, r24
 626:	22 0f       	add	r18, r18
 628:	21 11       	cpse	r18, r1
 62a:	ec cf       	rjmp	.-40     	; 0x604 <__vector_3+0x36>
 62c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <_rx_delay_stopbit>
 630:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <_rx_delay_stopbit+0x1>
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	8f 3f       	cpi	r24, 0xFF	; 255
 63a:	92 07       	cpc	r25, r18
 63c:	d9 f7       	brne	.-10     	; 0x634 <__vector_3+0x66>
 63e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_receive_buffer_tail>
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	8f 73       	andi	r24, 0x3F	; 63
 648:	99 27       	eor	r25, r25
 64a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <_receive_buffer_head>
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	69 f0       	breq	.+26     	; 0x670 <__vector_3+0xa2>
 656:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <_receive_buffer_tail>
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	e8 5c       	subi	r30, 0xC8	; 200
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	40 83       	st	Z, r20
 662:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_receive_buffer_tail>
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	8f 73       	andi	r24, 0x3F	; 63
 66a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <_receive_buffer_tail>
 66e:	06 c0       	rjmp	.+12     	; 0x67c <__vector_3+0xae>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <_buffer_overflow+0x1>
 678:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <_buffer_overflow>
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <softSerialBegin>:
 694:	0f 93       	push	r16
 696:	1f 93       	push	r17
 698:	8b 01       	movw	r16, r22
 69a:	9c 01       	movw	r18, r24
 69c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_receive_buffer_tail>
 6a0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <_receive_buffer_head>
 6a4:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <_buffer_overflow+0x1>
 6a8:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_buffer_overflow>
 6ac:	84 b1       	in	r24, 0x04	; 4
 6ae:	80 64       	ori	r24, 0x40	; 64
 6b0:	84 b9       	out	0x04, r24	; 4
 6b2:	84 b1       	in	r24, 0x04	; 4
 6b4:	8f 77       	andi	r24, 0x7F	; 127
 6b6:	84 b9       	out	0x04, r24	; 4
 6b8:	85 b1       	in	r24, 0x05	; 5
 6ba:	80 6c       	ori	r24, 0xC0	; 192
 6bc:	85 b9       	out	0x05, r24	; 5
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	6b c0       	rjmp	.+214    	; 0x79a <softSerialBegin+0x106>
 6c4:	fc 01       	movw	r30, r24
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e8 0f       	add	r30, r24
 6cc:	f9 1f       	adc	r31, r25
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	e8 5d       	subi	r30, 0xD8	; 216
 6d8:	fe 4f       	sbci	r31, 0xFE	; 254
 6da:	45 91       	lpm	r20, Z+
 6dc:	55 91       	lpm	r21, Z+
 6de:	65 91       	lpm	r22, Z+
 6e0:	74 91       	lpm	r23, Z
 6e2:	40 17       	cp	r20, r16
 6e4:	51 07       	cpc	r21, r17
 6e6:	62 07       	cpc	r22, r18
 6e8:	73 07       	cpc	r23, r19
 6ea:	09 f0       	breq	.+2      	; 0x6ee <softSerialBegin+0x5a>
 6ec:	55 c0       	rjmp	.+170    	; 0x798 <softSerialBegin+0x104>
 6ee:	9c 01       	movw	r18, r24
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	f9 01       	movw	r30, r18
 6f6:	e8 0f       	add	r30, r24
 6f8:	f9 1f       	adc	r31, r25
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	ee 0f       	add	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	e4 5d       	subi	r30, 0xD4	; 212
 704:	fe 4f       	sbci	r31, 0xFE	; 254
 706:	45 91       	lpm	r20, Z+
 708:	54 91       	lpm	r21, Z
 70a:	50 93 81 01 	sts	0x0181, r21	; 0x800181 <_rx_delay_centering+0x1>
 70e:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <_rx_delay_centering>
 712:	f9 01       	movw	r30, r18
 714:	e8 0f       	add	r30, r24
 716:	f9 1f       	adc	r31, r25
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	e2 5d       	subi	r30, 0xD2	; 210
 722:	fe 4f       	sbci	r31, 0xFE	; 254
 724:	45 91       	lpm	r20, Z+
 726:	54 91       	lpm	r21, Z
 728:	50 93 7f 01 	sts	0x017F, r21	; 0x80017f <_rx_delay_intrabit+0x1>
 72c:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <_rx_delay_intrabit>
 730:	f9 01       	movw	r30, r18
 732:	e8 0f       	add	r30, r24
 734:	f9 1f       	adc	r31, r25
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	e0 5d       	subi	r30, 0xD0	; 208
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	45 91       	lpm	r20, Z+
 744:	54 91       	lpm	r21, Z
 746:	50 93 7d 01 	sts	0x017D, r21	; 0x80017d <_rx_delay_stopbit+0x1>
 74a:	40 93 7c 01 	sts	0x017C, r20	; 0x80017c <_rx_delay_stopbit>
 74e:	f9 01       	movw	r30, r18
 750:	e8 0f       	add	r30, r24
 752:	f9 1f       	adc	r31, r25
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	ee 0f       	add	r30, r30
 75a:	ff 1f       	adc	r31, r31
 75c:	ee 5c       	subi	r30, 0xCE	; 206
 75e:	fe 4f       	sbci	r31, 0xFE	; 254
 760:	85 91       	lpm	r24, Z+
 762:	94 91       	lpm	r25, Z
 764:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <_tx_delay+0x1>
 768:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <_tx_delay>
 76c:	e8 e6       	ldi	r30, 0x68	; 104
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	81 60       	ori	r24, 0x01	; 1
 774:	80 83       	st	Z, r24
 776:	eb e6       	ldi	r30, 0x6B	; 107
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	80 83       	st	Z, r24
 780:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_tx_delay>
 784:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_tx_delay+0x1>
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	2f ef       	ldi	r18, 0xFF	; 255
 78e:	8f 3f       	cpi	r24, 0xFF	; 255
 790:	92 07       	cpc	r25, r18
 792:	d9 f7       	brne	.-10     	; 0x78a <softSerialBegin+0xf6>
 794:	78 94       	sei
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <softSerialBegin+0x10e>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	8d 30       	cpi	r24, 0x0D	; 13
 79c:	91 05       	cpc	r25, r1
 79e:	08 f4       	brcc	.+2      	; 0x7a2 <softSerialBegin+0x10e>
 7a0:	91 cf       	rjmp	.-222    	; 0x6c4 <softSerialBegin+0x30>
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	08 95       	ret

000007a8 <softSerialWrite>:
 7a8:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <_tx_delay>
 7ac:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <_tx_delay+0x1>
 7b0:	21 15       	cp	r18, r1
 7b2:	31 05       	cpc	r19, r1
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <softSerialWrite+0x10>
 7b6:	39 c0       	rjmp	.+114    	; 0x82a <softSerialWrite+0x82>
 7b8:	3f b7       	in	r19, 0x3f	; 63
 7ba:	f8 94       	cli
 7bc:	95 b1       	in	r25, 0x05	; 5
 7be:	9f 7b       	andi	r25, 0xBF	; 191
 7c0:	95 b9       	out	0x05, r25	; 5
 7c2:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <_tx_delay>
 7c6:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <_tx_delay+0x1>
 7ca:	34 96       	adiw	r30, 0x04	; 4
 7cc:	20 e0       	ldi	r18, 0x00	; 0
 7ce:	31 97       	sbiw	r30, 0x01	; 1
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	ef 3f       	cpi	r30, 0xFF	; 255
 7d4:	f2 07       	cpc	r31, r18
 7d6:	d9 f7       	brne	.-10     	; 0x7ce <softSerialWrite+0x26>
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	15 c0       	rjmp	.+42     	; 0x806 <softSerialWrite+0x5e>
 7dc:	29 2f       	mov	r18, r25
 7de:	28 23       	and	r18, r24
 7e0:	21 f0       	breq	.+8      	; 0x7ea <softSerialWrite+0x42>
 7e2:	25 b1       	in	r18, 0x05	; 5
 7e4:	20 64       	ori	r18, 0x40	; 64
 7e6:	25 b9       	out	0x05, r18	; 5
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <softSerialWrite+0x48>
 7ea:	25 b1       	in	r18, 0x05	; 5
 7ec:	2f 7b       	andi	r18, 0xBF	; 191
 7ee:	25 b9       	out	0x05, r18	; 5
 7f0:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <_tx_delay>
 7f4:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <_tx_delay+0x1>
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	31 97       	sbiw	r30, 0x01	; 1
 7fc:	2f ef       	ldi	r18, 0xFF	; 255
 7fe:	ef 3f       	cpi	r30, 0xFF	; 255
 800:	f2 07       	cpc	r31, r18
 802:	d9 f7       	brne	.-10     	; 0x7fa <softSerialWrite+0x52>
 804:	99 0f       	add	r25, r25
 806:	91 11       	cpse	r25, r1
 808:	e9 cf       	rjmp	.-46     	; 0x7dc <softSerialWrite+0x34>
 80a:	85 b1       	in	r24, 0x05	; 5
 80c:	80 64       	ori	r24, 0x40	; 64
 80e:	85 b9       	out	0x05, r24	; 5
 810:	3f bf       	out	0x3f, r19	; 63
 812:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_tx_delay>
 816:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_tx_delay+0x1>
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	2f ef       	ldi	r18, 0xFF	; 255
 820:	8f 3f       	cpi	r24, 0xFF	; 255
 822:	92 07       	cpc	r25, r18
 824:	d9 f7       	brne	.-10     	; 0x81c <softSerialWrite+0x74>
 826:	21 e0       	ldi	r18, 0x01	; 1
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	c9 01       	movw	r24, r18
 82c:	08 95       	ret

0000082e <debug_printf>:

void debug_printf(const char *format, ...)
{
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	e2 97       	sbiw	r28, 0x32	; 50
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	de bf       	out	0x3e, r29	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	cd bf       	out	0x3d, r28	; 61
 846:	9e 01       	movw	r18, r28
 848:	27 5c       	subi	r18, 0xC7	; 199
 84a:	3f 4f       	sbci	r19, 0xFF	; 255
 84c:	f9 01       	movw	r30, r18
 84e:	41 91       	ld	r20, Z+
 850:	51 91       	ld	r21, Z+
 852:	9f 01       	movw	r18, r30
	char buffer[50];
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args);
 854:	62 e3       	ldi	r22, 0x32	; 50
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	ce 01       	movw	r24, r28
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	1a d0       	rcall	.+52     	; 0x892 <vsnprintf>
	for(int i = 0; buffer[i] != 0 ; i++)
 85e:	00 e0       	ldi	r16, 0x00	; 0
 860:	10 e0       	ldi	r17, 0x00	; 0
 862:	03 c0       	rjmp	.+6      	; 0x86a <debug_printf+0x3c>
	{
		softSerialWrite(buffer[i]);
 864:	a1 df       	rcall	.-190    	; 0x7a8 <softSerialWrite>
{
	char buffer[50];
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args);
	for(int i = 0; buffer[i] != 0 ; i++)
 866:	0f 5f       	subi	r16, 0xFF	; 255
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	e1 e0       	ldi	r30, 0x01	; 1
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	ec 0f       	add	r30, r28
 870:	fd 1f       	adc	r31, r29
 872:	e0 0f       	add	r30, r16
 874:	f1 1f       	adc	r31, r17
 876:	80 81       	ld	r24, Z
 878:	81 11       	cpse	r24, r1
 87a:	f4 cf       	rjmp	.-24     	; 0x864 <debug_printf+0x36>
	{
		softSerialWrite(buffer[i]);

	}
	va_end(args);
}
 87c:	e2 96       	adiw	r28, 0x32	; 50
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	de bf       	out	0x3e, r29	; 62
 884:	0f be       	out	0x3f, r0	; 63
 886:	cd bf       	out	0x3d, r28	; 61
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	08 95       	ret

00000892 <vsnprintf>:
 892:	ae e0       	ldi	r26, 0x0E	; 14
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	ee e4       	ldi	r30, 0x4E	; 78
 898:	f4 e0       	ldi	r31, 0x04	; 4
 89a:	c0 c2       	rjmp	.+1408   	; 0xe1c <__prologue_saves__+0x1c>
 89c:	8c 01       	movw	r16, r24
 89e:	fa 01       	movw	r30, r20
 8a0:	86 e0       	ldi	r24, 0x06	; 6
 8a2:	8c 83       	std	Y+4, r24	; 0x04
 8a4:	1a 83       	std	Y+2, r17	; 0x02
 8a6:	09 83       	std	Y+1, r16	; 0x01
 8a8:	77 ff       	sbrs	r23, 7
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vsnprintf+0x1e>
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	70 e8       	ldi	r23, 0x80	; 128
 8b0:	cb 01       	movw	r24, r22
 8b2:	01 97       	sbiw	r24, 0x01	; 1
 8b4:	9e 83       	std	Y+6, r25	; 0x06
 8b6:	8d 83       	std	Y+5, r24	; 0x05
 8b8:	a9 01       	movw	r20, r18
 8ba:	bf 01       	movw	r22, r30
 8bc:	ce 01       	movw	r24, r28
 8be:	01 96       	adiw	r24, 0x01	; 1
 8c0:	11 d0       	rcall	.+34     	; 0x8e4 <vfprintf>
 8c2:	4d 81       	ldd	r20, Y+5	; 0x05
 8c4:	5e 81       	ldd	r21, Y+6	; 0x06
 8c6:	57 fd       	sbrc	r21, 7
 8c8:	0a c0       	rjmp	.+20     	; 0x8de <vsnprintf+0x4c>
 8ca:	2f 81       	ldd	r18, Y+7	; 0x07
 8cc:	38 85       	ldd	r19, Y+8	; 0x08
 8ce:	42 17       	cp	r20, r18
 8d0:	53 07       	cpc	r21, r19
 8d2:	0c f4       	brge	.+2      	; 0x8d6 <vsnprintf+0x44>
 8d4:	9a 01       	movw	r18, r20
 8d6:	f8 01       	movw	r30, r16
 8d8:	e2 0f       	add	r30, r18
 8da:	f3 1f       	adc	r31, r19
 8dc:	10 82       	st	Z, r1
 8de:	2e 96       	adiw	r28, 0x0e	; 14
 8e0:	e4 e0       	ldi	r30, 0x04	; 4
 8e2:	b8 c2       	rjmp	.+1392   	; 0xe54 <__epilogue_restores__+0x1c>

000008e4 <vfprintf>:
 8e4:	ab e0       	ldi	r26, 0x0B	; 11
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	e7 e7       	ldi	r30, 0x77	; 119
 8ea:	f4 e0       	ldi	r31, 0x04	; 4
 8ec:	89 c2       	rjmp	.+1298   	; 0xe00 <__prologue_saves__>
 8ee:	6c 01       	movw	r12, r24
 8f0:	7b 01       	movw	r14, r22
 8f2:	8a 01       	movw	r16, r20
 8f4:	fc 01       	movw	r30, r24
 8f6:	17 82       	std	Z+7, r1	; 0x07
 8f8:	16 82       	std	Z+6, r1	; 0x06
 8fa:	83 81       	ldd	r24, Z+3	; 0x03
 8fc:	81 ff       	sbrs	r24, 1
 8fe:	c0 c1       	rjmp	.+896    	; 0xc80 <vfprintf+0x39c>
 900:	ce 01       	movw	r24, r28
 902:	01 96       	adiw	r24, 0x01	; 1
 904:	3c 01       	movw	r6, r24
 906:	f6 01       	movw	r30, r12
 908:	93 81       	ldd	r25, Z+3	; 0x03
 90a:	f7 01       	movw	r30, r14
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	88 23       	and	r24, r24
 918:	09 f4       	brne	.+2      	; 0x91c <vfprintf+0x38>
 91a:	ae c1       	rjmp	.+860    	; 0xc78 <vfprintf+0x394>
 91c:	85 32       	cpi	r24, 0x25	; 37
 91e:	39 f4       	brne	.+14     	; 0x92e <vfprintf+0x4a>
 920:	93 fd       	sbrc	r25, 3
 922:	85 91       	lpm	r24, Z+
 924:	93 ff       	sbrs	r25, 3
 926:	81 91       	ld	r24, Z+
 928:	7f 01       	movw	r14, r30
 92a:	85 32       	cpi	r24, 0x25	; 37
 92c:	21 f4       	brne	.+8      	; 0x936 <vfprintf+0x52>
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	c1 d1       	rcall	.+898    	; 0xcb6 <fputc>
 934:	e8 cf       	rjmp	.-48     	; 0x906 <vfprintf+0x22>
 936:	91 2c       	mov	r9, r1
 938:	21 2c       	mov	r2, r1
 93a:	31 2c       	mov	r3, r1
 93c:	ff e1       	ldi	r31, 0x1F	; 31
 93e:	f3 15       	cp	r31, r3
 940:	e0 f0       	brcs	.+56     	; 0x97a <vfprintf+0x96>
 942:	8b 32       	cpi	r24, 0x2B	; 43
 944:	79 f0       	breq	.+30     	; 0x964 <vfprintf+0x80>
 946:	38 f4       	brcc	.+14     	; 0x956 <vfprintf+0x72>
 948:	80 32       	cpi	r24, 0x20	; 32
 94a:	79 f0       	breq	.+30     	; 0x96a <vfprintf+0x86>
 94c:	83 32       	cpi	r24, 0x23	; 35
 94e:	a9 f4       	brne	.+42     	; 0x97a <vfprintf+0x96>
 950:	23 2d       	mov	r18, r3
 952:	20 61       	ori	r18, 0x10	; 16
 954:	10 c0       	rjmp	.+32     	; 0x976 <vfprintf+0x92>
 956:	8d 32       	cpi	r24, 0x2D	; 45
 958:	59 f0       	breq	.+22     	; 0x970 <vfprintf+0x8c>
 95a:	80 33       	cpi	r24, 0x30	; 48
 95c:	71 f4       	brne	.+28     	; 0x97a <vfprintf+0x96>
 95e:	23 2d       	mov	r18, r3
 960:	21 60       	ori	r18, 0x01	; 1
 962:	09 c0       	rjmp	.+18     	; 0x976 <vfprintf+0x92>
 964:	83 2d       	mov	r24, r3
 966:	82 60       	ori	r24, 0x02	; 2
 968:	38 2e       	mov	r3, r24
 96a:	e3 2d       	mov	r30, r3
 96c:	e4 60       	ori	r30, 0x04	; 4
 96e:	22 c0       	rjmp	.+68     	; 0x9b4 <vfprintf+0xd0>
 970:	f3 2d       	mov	r31, r3
 972:	f8 60       	ori	r31, 0x08	; 8
 974:	25 c0       	rjmp	.+74     	; 0x9c0 <vfprintf+0xdc>
 976:	32 2e       	mov	r3, r18
 978:	27 c0       	rjmp	.+78     	; 0x9c8 <vfprintf+0xe4>
 97a:	37 fc       	sbrc	r3, 7
 97c:	2d c0       	rjmp	.+90     	; 0x9d8 <vfprintf+0xf4>
 97e:	20 ed       	ldi	r18, 0xD0	; 208
 980:	28 0f       	add	r18, r24
 982:	2a 30       	cpi	r18, 0x0A	; 10
 984:	88 f4       	brcc	.+34     	; 0x9a8 <vfprintf+0xc4>
 986:	36 fe       	sbrs	r3, 6
 988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0xb2>
 98a:	89 2d       	mov	r24, r9
 98c:	6a e0       	ldi	r22, 0x0A	; 10
 98e:	2f d2       	rcall	.+1118   	; 0xdee <__mulqi3>
 990:	92 2e       	mov	r9, r18
 992:	98 0e       	add	r9, r24
 994:	19 c0       	rjmp	.+50     	; 0x9c8 <vfprintf+0xe4>
 996:	82 2d       	mov	r24, r2
 998:	6a e0       	ldi	r22, 0x0A	; 10
 99a:	29 d2       	rcall	.+1106   	; 0xdee <__mulqi3>
 99c:	22 2e       	mov	r2, r18
 99e:	28 0e       	add	r2, r24
 9a0:	83 2d       	mov	r24, r3
 9a2:	80 62       	ori	r24, 0x20	; 32
 9a4:	38 2e       	mov	r3, r24
 9a6:	10 c0       	rjmp	.+32     	; 0x9c8 <vfprintf+0xe4>
 9a8:	8e 32       	cpi	r24, 0x2E	; 46
 9aa:	31 f4       	brne	.+12     	; 0x9b8 <vfprintf+0xd4>
 9ac:	36 fc       	sbrc	r3, 6
 9ae:	64 c1       	rjmp	.+712    	; 0xc78 <vfprintf+0x394>
 9b0:	e3 2d       	mov	r30, r3
 9b2:	e0 64       	ori	r30, 0x40	; 64
 9b4:	3e 2e       	mov	r3, r30
 9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <vfprintf+0xe4>
 9b8:	8c 36       	cpi	r24, 0x6C	; 108
 9ba:	21 f4       	brne	.+8      	; 0x9c4 <vfprintf+0xe0>
 9bc:	f3 2d       	mov	r31, r3
 9be:	f0 68       	ori	r31, 0x80	; 128
 9c0:	3f 2e       	mov	r3, r31
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <vfprintf+0xe4>
 9c4:	88 36       	cpi	r24, 0x68	; 104
 9c6:	41 f4       	brne	.+16     	; 0x9d8 <vfprintf+0xf4>
 9c8:	f7 01       	movw	r30, r14
 9ca:	93 fd       	sbrc	r25, 3
 9cc:	85 91       	lpm	r24, Z+
 9ce:	93 ff       	sbrs	r25, 3
 9d0:	81 91       	ld	r24, Z+
 9d2:	7f 01       	movw	r14, r30
 9d4:	81 11       	cpse	r24, r1
 9d6:	b2 cf       	rjmp	.-156    	; 0x93c <vfprintf+0x58>
 9d8:	98 2f       	mov	r25, r24
 9da:	9f 7d       	andi	r25, 0xDF	; 223
 9dc:	95 54       	subi	r25, 0x45	; 69
 9de:	93 30       	cpi	r25, 0x03	; 3
 9e0:	28 f4       	brcc	.+10     	; 0x9ec <vfprintf+0x108>
 9e2:	0c 5f       	subi	r16, 0xFC	; 252
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	2f e3       	ldi	r18, 0x3F	; 63
 9e8:	29 83       	std	Y+1, r18	; 0x01
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <vfprintf+0x122>
 9ec:	83 36       	cpi	r24, 0x63	; 99
 9ee:	31 f0       	breq	.+12     	; 0x9fc <vfprintf+0x118>
 9f0:	83 37       	cpi	r24, 0x73	; 115
 9f2:	71 f0       	breq	.+28     	; 0xa10 <vfprintf+0x12c>
 9f4:	83 35       	cpi	r24, 0x53	; 83
 9f6:	09 f0       	breq	.+2      	; 0x9fa <vfprintf+0x116>
 9f8:	55 c0       	rjmp	.+170    	; 0xaa4 <vfprintf+0x1c0>
 9fa:	20 c0       	rjmp	.+64     	; 0xa3c <vfprintf+0x158>
 9fc:	f8 01       	movw	r30, r16
 9fe:	80 81       	ld	r24, Z
 a00:	89 83       	std	Y+1, r24	; 0x01
 a02:	0e 5f       	subi	r16, 0xFE	; 254
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	88 24       	eor	r8, r8
 a08:	83 94       	inc	r8
 a0a:	91 2c       	mov	r9, r1
 a0c:	53 01       	movw	r10, r6
 a0e:	12 c0       	rjmp	.+36     	; 0xa34 <vfprintf+0x150>
 a10:	28 01       	movw	r4, r16
 a12:	f2 e0       	ldi	r31, 0x02	; 2
 a14:	4f 0e       	add	r4, r31
 a16:	51 1c       	adc	r5, r1
 a18:	f8 01       	movw	r30, r16
 a1a:	a0 80       	ld	r10, Z
 a1c:	b1 80       	ldd	r11, Z+1	; 0x01
 a1e:	36 fe       	sbrs	r3, 6
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <vfprintf+0x144>
 a22:	69 2d       	mov	r22, r9
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <vfprintf+0x148>
 a28:	6f ef       	ldi	r22, 0xFF	; 255
 a2a:	7f ef       	ldi	r23, 0xFF	; 255
 a2c:	c5 01       	movw	r24, r10
 a2e:	38 d1       	rcall	.+624    	; 0xca0 <strnlen>
 a30:	4c 01       	movw	r8, r24
 a32:	82 01       	movw	r16, r4
 a34:	f3 2d       	mov	r31, r3
 a36:	ff 77       	andi	r31, 0x7F	; 127
 a38:	3f 2e       	mov	r3, r31
 a3a:	15 c0       	rjmp	.+42     	; 0xa66 <vfprintf+0x182>
 a3c:	28 01       	movw	r4, r16
 a3e:	22 e0       	ldi	r18, 0x02	; 2
 a40:	42 0e       	add	r4, r18
 a42:	51 1c       	adc	r5, r1
 a44:	f8 01       	movw	r30, r16
 a46:	a0 80       	ld	r10, Z
 a48:	b1 80       	ldd	r11, Z+1	; 0x01
 a4a:	36 fe       	sbrs	r3, 6
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <vfprintf+0x170>
 a4e:	69 2d       	mov	r22, r9
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <vfprintf+0x174>
 a54:	6f ef       	ldi	r22, 0xFF	; 255
 a56:	7f ef       	ldi	r23, 0xFF	; 255
 a58:	c5 01       	movw	r24, r10
 a5a:	17 d1       	rcall	.+558    	; 0xc8a <strnlen_P>
 a5c:	4c 01       	movw	r8, r24
 a5e:	f3 2d       	mov	r31, r3
 a60:	f0 68       	ori	r31, 0x80	; 128
 a62:	3f 2e       	mov	r3, r31
 a64:	82 01       	movw	r16, r4
 a66:	33 fc       	sbrc	r3, 3
 a68:	19 c0       	rjmp	.+50     	; 0xa9c <vfprintf+0x1b8>
 a6a:	82 2d       	mov	r24, r2
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	88 16       	cp	r8, r24
 a70:	99 06       	cpc	r9, r25
 a72:	a0 f4       	brcc	.+40     	; 0xa9c <vfprintf+0x1b8>
 a74:	b6 01       	movw	r22, r12
 a76:	80 e2       	ldi	r24, 0x20	; 32
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	1d d1       	rcall	.+570    	; 0xcb6 <fputc>
 a7c:	2a 94       	dec	r2
 a7e:	f5 cf       	rjmp	.-22     	; 0xa6a <vfprintf+0x186>
 a80:	f5 01       	movw	r30, r10
 a82:	37 fc       	sbrc	r3, 7
 a84:	85 91       	lpm	r24, Z+
 a86:	37 fe       	sbrs	r3, 7
 a88:	81 91       	ld	r24, Z+
 a8a:	5f 01       	movw	r10, r30
 a8c:	b6 01       	movw	r22, r12
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	12 d1       	rcall	.+548    	; 0xcb6 <fputc>
 a92:	21 10       	cpse	r2, r1
 a94:	2a 94       	dec	r2
 a96:	21 e0       	ldi	r18, 0x01	; 1
 a98:	82 1a       	sub	r8, r18
 a9a:	91 08       	sbc	r9, r1
 a9c:	81 14       	cp	r8, r1
 a9e:	91 04       	cpc	r9, r1
 aa0:	79 f7       	brne	.-34     	; 0xa80 <vfprintf+0x19c>
 aa2:	e1 c0       	rjmp	.+450    	; 0xc66 <vfprintf+0x382>
 aa4:	84 36       	cpi	r24, 0x64	; 100
 aa6:	11 f0       	breq	.+4      	; 0xaac <vfprintf+0x1c8>
 aa8:	89 36       	cpi	r24, 0x69	; 105
 aaa:	39 f5       	brne	.+78     	; 0xafa <vfprintf+0x216>
 aac:	f8 01       	movw	r30, r16
 aae:	37 fe       	sbrs	r3, 7
 ab0:	07 c0       	rjmp	.+14     	; 0xac0 <vfprintf+0x1dc>
 ab2:	60 81       	ld	r22, Z
 ab4:	71 81       	ldd	r23, Z+1	; 0x01
 ab6:	82 81       	ldd	r24, Z+2	; 0x02
 ab8:	93 81       	ldd	r25, Z+3	; 0x03
 aba:	0c 5f       	subi	r16, 0xFC	; 252
 abc:	1f 4f       	sbci	r17, 0xFF	; 255
 abe:	08 c0       	rjmp	.+16     	; 0xad0 <vfprintf+0x1ec>
 ac0:	60 81       	ld	r22, Z
 ac2:	71 81       	ldd	r23, Z+1	; 0x01
 ac4:	07 2e       	mov	r0, r23
 ac6:	00 0c       	add	r0, r0
 ac8:	88 0b       	sbc	r24, r24
 aca:	99 0b       	sbc	r25, r25
 acc:	0e 5f       	subi	r16, 0xFE	; 254
 ace:	1f 4f       	sbci	r17, 0xFF	; 255
 ad0:	f3 2d       	mov	r31, r3
 ad2:	ff 76       	andi	r31, 0x6F	; 111
 ad4:	3f 2e       	mov	r3, r31
 ad6:	97 ff       	sbrs	r25, 7
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <vfprintf+0x208>
 ada:	90 95       	com	r25
 adc:	80 95       	com	r24
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	f0 68       	ori	r31, 0x80	; 128
 aea:	3f 2e       	mov	r3, r31
 aec:	2a e0       	ldi	r18, 0x0A	; 10
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	a3 01       	movw	r20, r6
 af2:	1d d1       	rcall	.+570    	; 0xd2e <__ultoa_invert>
 af4:	88 2e       	mov	r8, r24
 af6:	86 18       	sub	r8, r6
 af8:	44 c0       	rjmp	.+136    	; 0xb82 <vfprintf+0x29e>
 afa:	85 37       	cpi	r24, 0x75	; 117
 afc:	31 f4       	brne	.+12     	; 0xb0a <vfprintf+0x226>
 afe:	23 2d       	mov	r18, r3
 b00:	2f 7e       	andi	r18, 0xEF	; 239
 b02:	b2 2e       	mov	r11, r18
 b04:	2a e0       	ldi	r18, 0x0A	; 10
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	25 c0       	rjmp	.+74     	; 0xb54 <vfprintf+0x270>
 b0a:	93 2d       	mov	r25, r3
 b0c:	99 7f       	andi	r25, 0xF9	; 249
 b0e:	b9 2e       	mov	r11, r25
 b10:	8f 36       	cpi	r24, 0x6F	; 111
 b12:	c1 f0       	breq	.+48     	; 0xb44 <vfprintf+0x260>
 b14:	18 f4       	brcc	.+6      	; 0xb1c <vfprintf+0x238>
 b16:	88 35       	cpi	r24, 0x58	; 88
 b18:	79 f0       	breq	.+30     	; 0xb38 <vfprintf+0x254>
 b1a:	ae c0       	rjmp	.+348    	; 0xc78 <vfprintf+0x394>
 b1c:	80 37       	cpi	r24, 0x70	; 112
 b1e:	19 f0       	breq	.+6      	; 0xb26 <vfprintf+0x242>
 b20:	88 37       	cpi	r24, 0x78	; 120
 b22:	21 f0       	breq	.+8      	; 0xb2c <vfprintf+0x248>
 b24:	a9 c0       	rjmp	.+338    	; 0xc78 <vfprintf+0x394>
 b26:	e9 2f       	mov	r30, r25
 b28:	e0 61       	ori	r30, 0x10	; 16
 b2a:	be 2e       	mov	r11, r30
 b2c:	b4 fe       	sbrs	r11, 4
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <vfprintf+0x266>
 b30:	fb 2d       	mov	r31, r11
 b32:	f4 60       	ori	r31, 0x04	; 4
 b34:	bf 2e       	mov	r11, r31
 b36:	09 c0       	rjmp	.+18     	; 0xb4a <vfprintf+0x266>
 b38:	34 fe       	sbrs	r3, 4
 b3a:	0a c0       	rjmp	.+20     	; 0xb50 <vfprintf+0x26c>
 b3c:	29 2f       	mov	r18, r25
 b3e:	26 60       	ori	r18, 0x06	; 6
 b40:	b2 2e       	mov	r11, r18
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <vfprintf+0x26c>
 b44:	28 e0       	ldi	r18, 0x08	; 8
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <vfprintf+0x270>
 b4a:	20 e1       	ldi	r18, 0x10	; 16
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	02 c0       	rjmp	.+4      	; 0xb54 <vfprintf+0x270>
 b50:	20 e1       	ldi	r18, 0x10	; 16
 b52:	32 e0       	ldi	r19, 0x02	; 2
 b54:	f8 01       	movw	r30, r16
 b56:	b7 fe       	sbrs	r11, 7
 b58:	07 c0       	rjmp	.+14     	; 0xb68 <vfprintf+0x284>
 b5a:	60 81       	ld	r22, Z
 b5c:	71 81       	ldd	r23, Z+1	; 0x01
 b5e:	82 81       	ldd	r24, Z+2	; 0x02
 b60:	93 81       	ldd	r25, Z+3	; 0x03
 b62:	0c 5f       	subi	r16, 0xFC	; 252
 b64:	1f 4f       	sbci	r17, 0xFF	; 255
 b66:	06 c0       	rjmp	.+12     	; 0xb74 <vfprintf+0x290>
 b68:	60 81       	ld	r22, Z
 b6a:	71 81       	ldd	r23, Z+1	; 0x01
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 5f       	subi	r16, 0xFE	; 254
 b72:	1f 4f       	sbci	r17, 0xFF	; 255
 b74:	a3 01       	movw	r20, r6
 b76:	db d0       	rcall	.+438    	; 0xd2e <__ultoa_invert>
 b78:	88 2e       	mov	r8, r24
 b7a:	86 18       	sub	r8, r6
 b7c:	fb 2d       	mov	r31, r11
 b7e:	ff 77       	andi	r31, 0x7F	; 127
 b80:	3f 2e       	mov	r3, r31
 b82:	36 fe       	sbrs	r3, 6
 b84:	0d c0       	rjmp	.+26     	; 0xba0 <vfprintf+0x2bc>
 b86:	23 2d       	mov	r18, r3
 b88:	2e 7f       	andi	r18, 0xFE	; 254
 b8a:	a2 2e       	mov	r10, r18
 b8c:	89 14       	cp	r8, r9
 b8e:	58 f4       	brcc	.+22     	; 0xba6 <vfprintf+0x2c2>
 b90:	34 fe       	sbrs	r3, 4
 b92:	0b c0       	rjmp	.+22     	; 0xbaa <vfprintf+0x2c6>
 b94:	32 fc       	sbrc	r3, 2
 b96:	09 c0       	rjmp	.+18     	; 0xbaa <vfprintf+0x2c6>
 b98:	83 2d       	mov	r24, r3
 b9a:	8e 7e       	andi	r24, 0xEE	; 238
 b9c:	a8 2e       	mov	r10, r24
 b9e:	05 c0       	rjmp	.+10     	; 0xbaa <vfprintf+0x2c6>
 ba0:	b8 2c       	mov	r11, r8
 ba2:	a3 2c       	mov	r10, r3
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <vfprintf+0x2c8>
 ba6:	b8 2c       	mov	r11, r8
 ba8:	01 c0       	rjmp	.+2      	; 0xbac <vfprintf+0x2c8>
 baa:	b9 2c       	mov	r11, r9
 bac:	a4 fe       	sbrs	r10, 4
 bae:	0f c0       	rjmp	.+30     	; 0xbce <vfprintf+0x2ea>
 bb0:	fe 01       	movw	r30, r28
 bb2:	e8 0d       	add	r30, r8
 bb4:	f1 1d       	adc	r31, r1
 bb6:	80 81       	ld	r24, Z
 bb8:	80 33       	cpi	r24, 0x30	; 48
 bba:	21 f4       	brne	.+8      	; 0xbc4 <vfprintf+0x2e0>
 bbc:	9a 2d       	mov	r25, r10
 bbe:	99 7e       	andi	r25, 0xE9	; 233
 bc0:	a9 2e       	mov	r10, r25
 bc2:	09 c0       	rjmp	.+18     	; 0xbd6 <vfprintf+0x2f2>
 bc4:	a2 fe       	sbrs	r10, 2
 bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <vfprintf+0x2f0>
 bc8:	b3 94       	inc	r11
 bca:	b3 94       	inc	r11
 bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <vfprintf+0x2f2>
 bce:	8a 2d       	mov	r24, r10
 bd0:	86 78       	andi	r24, 0x86	; 134
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <vfprintf+0x2f2>
 bd4:	b3 94       	inc	r11
 bd6:	a3 fc       	sbrc	r10, 3
 bd8:	10 c0       	rjmp	.+32     	; 0xbfa <vfprintf+0x316>
 bda:	a0 fe       	sbrs	r10, 0
 bdc:	06 c0       	rjmp	.+12     	; 0xbea <vfprintf+0x306>
 bde:	b2 14       	cp	r11, r2
 be0:	80 f4       	brcc	.+32     	; 0xc02 <vfprintf+0x31e>
 be2:	28 0c       	add	r2, r8
 be4:	92 2c       	mov	r9, r2
 be6:	9b 18       	sub	r9, r11
 be8:	0d c0       	rjmp	.+26     	; 0xc04 <vfprintf+0x320>
 bea:	b2 14       	cp	r11, r2
 bec:	58 f4       	brcc	.+22     	; 0xc04 <vfprintf+0x320>
 bee:	b6 01       	movw	r22, r12
 bf0:	80 e2       	ldi	r24, 0x20	; 32
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	60 d0       	rcall	.+192    	; 0xcb6 <fputc>
 bf6:	b3 94       	inc	r11
 bf8:	f8 cf       	rjmp	.-16     	; 0xbea <vfprintf+0x306>
 bfa:	b2 14       	cp	r11, r2
 bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x320>
 bfe:	2b 18       	sub	r2, r11
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x322>
 c02:	98 2c       	mov	r9, r8
 c04:	21 2c       	mov	r2, r1
 c06:	a4 fe       	sbrs	r10, 4
 c08:	0f c0       	rjmp	.+30     	; 0xc28 <vfprintf+0x344>
 c0a:	b6 01       	movw	r22, r12
 c0c:	80 e3       	ldi	r24, 0x30	; 48
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	52 d0       	rcall	.+164    	; 0xcb6 <fputc>
 c12:	a2 fe       	sbrs	r10, 2
 c14:	16 c0       	rjmp	.+44     	; 0xc42 <vfprintf+0x35e>
 c16:	a1 fc       	sbrc	r10, 1
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <vfprintf+0x33c>
 c1a:	88 e7       	ldi	r24, 0x78	; 120
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x340>
 c20:	88 e5       	ldi	r24, 0x58	; 88
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	b6 01       	movw	r22, r12
 c26:	0c c0       	rjmp	.+24     	; 0xc40 <vfprintf+0x35c>
 c28:	8a 2d       	mov	r24, r10
 c2a:	86 78       	andi	r24, 0x86	; 134
 c2c:	51 f0       	breq	.+20     	; 0xc42 <vfprintf+0x35e>
 c2e:	a1 fe       	sbrs	r10, 1
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0x352>
 c32:	8b e2       	ldi	r24, 0x2B	; 43
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <vfprintf+0x354>
 c36:	80 e2       	ldi	r24, 0x20	; 32
 c38:	a7 fc       	sbrc	r10, 7
 c3a:	8d e2       	ldi	r24, 0x2D	; 45
 c3c:	b6 01       	movw	r22, r12
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	3a d0       	rcall	.+116    	; 0xcb6 <fputc>
 c42:	89 14       	cp	r8, r9
 c44:	30 f4       	brcc	.+12     	; 0xc52 <vfprintf+0x36e>
 c46:	b6 01       	movw	r22, r12
 c48:	80 e3       	ldi	r24, 0x30	; 48
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	34 d0       	rcall	.+104    	; 0xcb6 <fputc>
 c4e:	9a 94       	dec	r9
 c50:	f8 cf       	rjmp	.-16     	; 0xc42 <vfprintf+0x35e>
 c52:	8a 94       	dec	r8
 c54:	f3 01       	movw	r30, r6
 c56:	e8 0d       	add	r30, r8
 c58:	f1 1d       	adc	r31, r1
 c5a:	80 81       	ld	r24, Z
 c5c:	b6 01       	movw	r22, r12
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	2a d0       	rcall	.+84     	; 0xcb6 <fputc>
 c62:	81 10       	cpse	r8, r1
 c64:	f6 cf       	rjmp	.-20     	; 0xc52 <vfprintf+0x36e>
 c66:	22 20       	and	r2, r2
 c68:	09 f4       	brne	.+2      	; 0xc6c <vfprintf+0x388>
 c6a:	4d ce       	rjmp	.-870    	; 0x906 <vfprintf+0x22>
 c6c:	b6 01       	movw	r22, r12
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	21 d0       	rcall	.+66     	; 0xcb6 <fputc>
 c74:	2a 94       	dec	r2
 c76:	f7 cf       	rjmp	.-18     	; 0xc66 <vfprintf+0x382>
 c78:	f6 01       	movw	r30, r12
 c7a:	86 81       	ldd	r24, Z+6	; 0x06
 c7c:	97 81       	ldd	r25, Z+7	; 0x07
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <vfprintf+0x3a0>
 c80:	8f ef       	ldi	r24, 0xFF	; 255
 c82:	9f ef       	ldi	r25, 0xFF	; 255
 c84:	2b 96       	adiw	r28, 0x0b	; 11
 c86:	e2 e1       	ldi	r30, 0x12	; 18
 c88:	d7 c0       	rjmp	.+430    	; 0xe38 <__epilogue_restores__>

00000c8a <strnlen_P>:
 c8a:	fc 01       	movw	r30, r24
 c8c:	05 90       	lpm	r0, Z+
 c8e:	61 50       	subi	r22, 0x01	; 1
 c90:	70 40       	sbci	r23, 0x00	; 0
 c92:	01 10       	cpse	r0, r1
 c94:	d8 f7       	brcc	.-10     	; 0xc8c <strnlen_P+0x2>
 c96:	80 95       	com	r24
 c98:	90 95       	com	r25
 c9a:	8e 0f       	add	r24, r30
 c9c:	9f 1f       	adc	r25, r31
 c9e:	08 95       	ret

00000ca0 <strnlen>:
 ca0:	fc 01       	movw	r30, r24
 ca2:	61 50       	subi	r22, 0x01	; 1
 ca4:	70 40       	sbci	r23, 0x00	; 0
 ca6:	01 90       	ld	r0, Z+
 ca8:	01 10       	cpse	r0, r1
 caa:	d8 f7       	brcc	.-10     	; 0xca2 <strnlen+0x2>
 cac:	80 95       	com	r24
 cae:	90 95       	com	r25
 cb0:	8e 0f       	add	r24, r30
 cb2:	9f 1f       	adc	r25, r31
 cb4:	08 95       	ret

00000cb6 <fputc>:
 cb6:	0f 93       	push	r16
 cb8:	1f 93       	push	r17
 cba:	cf 93       	push	r28
 cbc:	df 93       	push	r29
 cbe:	fb 01       	movw	r30, r22
 cc0:	23 81       	ldd	r18, Z+3	; 0x03
 cc2:	21 fd       	sbrc	r18, 1
 cc4:	03 c0       	rjmp	.+6      	; 0xccc <fputc+0x16>
 cc6:	8f ef       	ldi	r24, 0xFF	; 255
 cc8:	9f ef       	ldi	r25, 0xFF	; 255
 cca:	2c c0       	rjmp	.+88     	; 0xd24 <fputc+0x6e>
 ccc:	22 ff       	sbrs	r18, 2
 cce:	16 c0       	rjmp	.+44     	; 0xcfc <fputc+0x46>
 cd0:	46 81       	ldd	r20, Z+6	; 0x06
 cd2:	57 81       	ldd	r21, Z+7	; 0x07
 cd4:	24 81       	ldd	r18, Z+4	; 0x04
 cd6:	35 81       	ldd	r19, Z+5	; 0x05
 cd8:	42 17       	cp	r20, r18
 cda:	53 07       	cpc	r21, r19
 cdc:	44 f4       	brge	.+16     	; 0xcee <fputc+0x38>
 cde:	a0 81       	ld	r26, Z
 ce0:	b1 81       	ldd	r27, Z+1	; 0x01
 ce2:	9d 01       	movw	r18, r26
 ce4:	2f 5f       	subi	r18, 0xFF	; 255
 ce6:	3f 4f       	sbci	r19, 0xFF	; 255
 ce8:	31 83       	std	Z+1, r19	; 0x01
 cea:	20 83       	st	Z, r18
 cec:	8c 93       	st	X, r24
 cee:	26 81       	ldd	r18, Z+6	; 0x06
 cf0:	37 81       	ldd	r19, Z+7	; 0x07
 cf2:	2f 5f       	subi	r18, 0xFF	; 255
 cf4:	3f 4f       	sbci	r19, 0xFF	; 255
 cf6:	37 83       	std	Z+7, r19	; 0x07
 cf8:	26 83       	std	Z+6, r18	; 0x06
 cfa:	14 c0       	rjmp	.+40     	; 0xd24 <fputc+0x6e>
 cfc:	8b 01       	movw	r16, r22
 cfe:	ec 01       	movw	r28, r24
 d00:	fb 01       	movw	r30, r22
 d02:	00 84       	ldd	r0, Z+8	; 0x08
 d04:	f1 85       	ldd	r31, Z+9	; 0x09
 d06:	e0 2d       	mov	r30, r0
 d08:	09 95       	icall
 d0a:	89 2b       	or	r24, r25
 d0c:	e1 f6       	brne	.-72     	; 0xcc6 <fputc+0x10>
 d0e:	d8 01       	movw	r26, r16
 d10:	16 96       	adiw	r26, 0x06	; 6
 d12:	8d 91       	ld	r24, X+
 d14:	9c 91       	ld	r25, X
 d16:	17 97       	sbiw	r26, 0x07	; 7
 d18:	01 96       	adiw	r24, 0x01	; 1
 d1a:	17 96       	adiw	r26, 0x07	; 7
 d1c:	9c 93       	st	X, r25
 d1e:	8e 93       	st	-X, r24
 d20:	16 97       	sbiw	r26, 0x06	; 6
 d22:	ce 01       	movw	r24, r28
 d24:	df 91       	pop	r29
 d26:	cf 91       	pop	r28
 d28:	1f 91       	pop	r17
 d2a:	0f 91       	pop	r16
 d2c:	08 95       	ret

00000d2e <__ultoa_invert>:
 d2e:	fa 01       	movw	r30, r20
 d30:	aa 27       	eor	r26, r26
 d32:	28 30       	cpi	r18, 0x08	; 8
 d34:	61 f1       	breq	.+88     	; 0xd8e <__ultoa_invert+0x60>
 d36:	20 31       	cpi	r18, 0x10	; 16
 d38:	91 f1       	breq	.+100    	; 0xd9e <__ultoa_invert+0x70>
 d3a:	e8 94       	clt
 d3c:	6f 93       	push	r22
 d3e:	6e 7f       	andi	r22, 0xFE	; 254
 d40:	6e 5f       	subi	r22, 0xFE	; 254
 d42:	7f 4f       	sbci	r23, 0xFF	; 255
 d44:	8f 4f       	sbci	r24, 0xFF	; 255
 d46:	9f 4f       	sbci	r25, 0xFF	; 255
 d48:	af 4f       	sbci	r26, 0xFF	; 255
 d4a:	b1 e0       	ldi	r27, 0x01	; 1
 d4c:	40 d0       	rcall	.+128    	; 0xdce <__ultoa_invert+0xa0>
 d4e:	b4 e0       	ldi	r27, 0x04	; 4
 d50:	3e d0       	rcall	.+124    	; 0xdce <__ultoa_invert+0xa0>
 d52:	67 0f       	add	r22, r23
 d54:	78 1f       	adc	r23, r24
 d56:	89 1f       	adc	r24, r25
 d58:	9a 1f       	adc	r25, r26
 d5a:	a1 1d       	adc	r26, r1
 d5c:	68 0f       	add	r22, r24
 d5e:	79 1f       	adc	r23, r25
 d60:	8a 1f       	adc	r24, r26
 d62:	91 1d       	adc	r25, r1
 d64:	a1 1d       	adc	r26, r1
 d66:	6a 0f       	add	r22, r26
 d68:	71 1d       	adc	r23, r1
 d6a:	81 1d       	adc	r24, r1
 d6c:	91 1d       	adc	r25, r1
 d6e:	a1 1d       	adc	r26, r1
 d70:	22 d0       	rcall	.+68     	; 0xdb6 <__ultoa_invert+0x88>
 d72:	09 f4       	brne	.+2      	; 0xd76 <__ultoa_invert+0x48>
 d74:	68 94       	set
 d76:	3f 91       	pop	r19
 d78:	06 2e       	mov	r0, r22
 d7a:	00 0c       	add	r0, r0
 d7c:	30 19       	sub	r19, r0
 d7e:	00 0c       	add	r0, r0
 d80:	00 0c       	add	r0, r0
 d82:	30 19       	sub	r19, r0
 d84:	30 5d       	subi	r19, 0xD0	; 208
 d86:	31 93       	st	Z+, r19
 d88:	ce f6       	brtc	.-78     	; 0xd3c <__ultoa_invert+0xe>
 d8a:	cf 01       	movw	r24, r30
 d8c:	08 95       	ret
 d8e:	46 2f       	mov	r20, r22
 d90:	47 70       	andi	r20, 0x07	; 7
 d92:	40 5d       	subi	r20, 0xD0	; 208
 d94:	41 93       	st	Z+, r20
 d96:	b3 e0       	ldi	r27, 0x03	; 3
 d98:	0f d0       	rcall	.+30     	; 0xdb8 <__ultoa_invert+0x8a>
 d9a:	c9 f7       	brne	.-14     	; 0xd8e <__ultoa_invert+0x60>
 d9c:	f6 cf       	rjmp	.-20     	; 0xd8a <__ultoa_invert+0x5c>
 d9e:	46 2f       	mov	r20, r22
 da0:	4f 70       	andi	r20, 0x0F	; 15
 da2:	40 5d       	subi	r20, 0xD0	; 208
 da4:	4a 33       	cpi	r20, 0x3A	; 58
 da6:	18 f0       	brcs	.+6      	; 0xdae <__ultoa_invert+0x80>
 da8:	49 5d       	subi	r20, 0xD9	; 217
 daa:	31 fd       	sbrc	r19, 1
 dac:	40 52       	subi	r20, 0x20	; 32
 dae:	41 93       	st	Z+, r20
 db0:	02 d0       	rcall	.+4      	; 0xdb6 <__ultoa_invert+0x88>
 db2:	a9 f7       	brne	.-22     	; 0xd9e <__ultoa_invert+0x70>
 db4:	ea cf       	rjmp	.-44     	; 0xd8a <__ultoa_invert+0x5c>
 db6:	b4 e0       	ldi	r27, 0x04	; 4
 db8:	a6 95       	lsr	r26
 dba:	97 95       	ror	r25
 dbc:	87 95       	ror	r24
 dbe:	77 95       	ror	r23
 dc0:	67 95       	ror	r22
 dc2:	ba 95       	dec	r27
 dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__ultoa_invert+0x8a>
 dc6:	00 97       	sbiw	r24, 0x00	; 0
 dc8:	61 05       	cpc	r22, r1
 dca:	71 05       	cpc	r23, r1
 dcc:	08 95       	ret
 dce:	9b 01       	movw	r18, r22
 dd0:	ac 01       	movw	r20, r24
 dd2:	0a 2e       	mov	r0, r26
 dd4:	06 94       	lsr	r0
 dd6:	57 95       	ror	r21
 dd8:	47 95       	ror	r20
 dda:	37 95       	ror	r19
 ddc:	27 95       	ror	r18
 dde:	ba 95       	dec	r27
 de0:	c9 f7       	brne	.-14     	; 0xdd4 <__ultoa_invert+0xa6>
 de2:	62 0f       	add	r22, r18
 de4:	73 1f       	adc	r23, r19
 de6:	84 1f       	adc	r24, r20
 de8:	95 1f       	adc	r25, r21
 dea:	a0 1d       	adc	r26, r0
 dec:	08 95       	ret

00000dee <__mulqi3>:
 dee:	00 24       	eor	r0, r0

00000df0 <__mulqi3_loop>:
 df0:	80 fd       	sbrc	r24, 0
 df2:	06 0e       	add	r0, r22
 df4:	66 0f       	add	r22, r22
 df6:	11 f0       	breq	.+4      	; 0xdfc <__mulqi3_exit>
 df8:	86 95       	lsr	r24
 dfa:	d1 f7       	brne	.-12     	; 0xdf0 <__mulqi3_loop>

00000dfc <__mulqi3_exit>:
 dfc:	80 2d       	mov	r24, r0
 dfe:	08 95       	ret

00000e00 <__prologue_saves__>:
 e00:	2f 92       	push	r2
 e02:	3f 92       	push	r3
 e04:	4f 92       	push	r4
 e06:	5f 92       	push	r5
 e08:	6f 92       	push	r6
 e0a:	7f 92       	push	r7
 e0c:	8f 92       	push	r8
 e0e:	9f 92       	push	r9
 e10:	af 92       	push	r10
 e12:	bf 92       	push	r11
 e14:	cf 92       	push	r12
 e16:	df 92       	push	r13
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	cd b7       	in	r28, 0x3d	; 61
 e26:	de b7       	in	r29, 0x3e	; 62
 e28:	ca 1b       	sub	r28, r26
 e2a:	db 0b       	sbc	r29, r27
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	09 94       	ijmp

00000e38 <__epilogue_restores__>:
 e38:	2a 88       	ldd	r2, Y+18	; 0x12
 e3a:	39 88       	ldd	r3, Y+17	; 0x11
 e3c:	48 88       	ldd	r4, Y+16	; 0x10
 e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e40:	6e 84       	ldd	r6, Y+14	; 0x0e
 e42:	7d 84       	ldd	r7, Y+13	; 0x0d
 e44:	8c 84       	ldd	r8, Y+12	; 0x0c
 e46:	9b 84       	ldd	r9, Y+11	; 0x0b
 e48:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4a:	b9 84       	ldd	r11, Y+9	; 0x09
 e4c:	c8 84       	ldd	r12, Y+8	; 0x08
 e4e:	df 80       	ldd	r13, Y+7	; 0x07
 e50:	ee 80       	ldd	r14, Y+6	; 0x06
 e52:	fd 80       	ldd	r15, Y+5	; 0x05
 e54:	0c 81       	ldd	r16, Y+4	; 0x04
 e56:	1b 81       	ldd	r17, Y+3	; 0x03
 e58:	aa 81       	ldd	r26, Y+2	; 0x02
 e5a:	b9 81       	ldd	r27, Y+1	; 0x01
 e5c:	ce 0f       	add	r28, r30
 e5e:	d1 1d       	adc	r29, r1
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	ed 01       	movw	r28, r26
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>

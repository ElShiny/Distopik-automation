
Led ring ACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000662  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800100  00800100  000006d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001593  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5b  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aed  00000000  00000000  0000296a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00003458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000044a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e1 c0       	rjmp	.+450    	; 0x1c4 <__ctors_end>
   2:	fb c0       	rjmp	.+502    	; 0x1fa <__bad_interrupt>
   4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
   6:	3e c2       	rjmp	.+1148   	; 0x484 <__vector_3>
   8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
   a:	f7 c0       	rjmp	.+494    	; 0x1fa <__bad_interrupt>
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
   e:	f5 c0       	rjmp	.+490    	; 0x1fa <__bad_interrupt>
  10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
  12:	f3 c0       	rjmp	.+486    	; 0x1fa <__bad_interrupt>
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
  16:	f1 c0       	rjmp	.+482    	; 0x1fa <__bad_interrupt>
  18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
  1a:	ef c0       	rjmp	.+478    	; 0x1fa <__bad_interrupt>
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
  1e:	ed c0       	rjmp	.+474    	; 0x1fa <__bad_interrupt>
  20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
  22:	eb c0       	rjmp	.+470    	; 0x1fa <__bad_interrupt>
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
  26:	e9 c0       	rjmp	.+466    	; 0x1fa <__bad_interrupt>

00000028 <__trampolines_end>:
  28:	ff 38       	cpi	r31, 0x8F	; 143
  2a:	28 37       	cpi	r18, 0x78	; 120
  2c:	18 ff       	.word	0xff18	; ????
  2e:	27 34       	cpi	r18, 0x47	; 71
  30:	08 39       	cpi	r16, 0x98	; 152
  32:	ff ff       	.word	0xffff	; ????
  34:	17 ff       	sbrs	r17, 7
  36:	24 0d       	add	r18, r4
  38:	78 ff       	.word	0xff78	; ????
  3a:	29 36       	cpi	r18, 0x69	; 105
  3c:	ff ff       	.word	0xffff	; ????
  3e:	ff 35       	cpi	r31, 0x5F	; 95
  40:	07 ff       	sbrs	r16, 7
  42:	ff ff       	.word	0xffff	; ????
  44:	14 13       	cpse	r17, r20
  46:	7d 12       	cpse	r7, r29
  48:	68 69       	ori	r22, 0x98	; 152
  4a:	ff ff       	.word	0xffff	; ????
  4c:	19 6a       	ori	r17, 0xA9	; 169
  4e:	26 ff       	sbrs	r18, 6
  50:	ff 3a       	cpi	r31, 0xAF	; 175
  52:	ff ff       	.word	0xffff	; ????
  54:	ff ff       	.word	0xffff	; ????
  56:	25 0e       	add	r2, r21
  58:	77 76       	andi	r23, 0x67	; 103
  5a:	ff ff       	.word	0xffff	; ????
  5c:	ff 6b       	ori	r31, 0xBF	; 191
  5e:	ff ff       	.word	0xffff	; ????
  60:	04 ff       	sbrs	r16, 4
  62:	03 ff       	sbrs	r16, 3
  64:	6d 6c       	ori	r22, 0xCD	; 205
  66:	02 01       	movw	r0, r4
  68:	58 ff       	.word	0xff58	; ????
  6a:	59 ff       	.word	0xff59	; ????
  6c:	ff ff       	.word	0xffff	; ????
  6e:	ff 33       	cpi	r31, 0x3F	; 63
  70:	09 0a       	sbc	r0, r25
  72:	5a ff       	.word	0xff5a	; ????
  74:	16 0b       	sbc	r17, r22
  76:	ff 0c       	add	r15, r15
  78:	ff ff       	.word	0xffff	; ????
  7a:	2a 2b       	or	r18, r26
  7c:	ff ff       	.word	0xffff	; ????
  7e:	ff ff       	.word	0xffff	; ????
  80:	ff ff       	.word	0xffff	; ????
  82:	ff ff       	.word	0xffff	; ????
  84:	15 ff       	sbrs	r17, 5
  86:	7e 7f       	andi	r23, 0xFE	; 254
  88:	67 ff       	sbrs	r22, 7
  8a:	66 ff       	sbrs	r22, 6
  8c:	ff ff       	.word	0xffff	; ????
  8e:	ff ff       	.word	0xffff	; ????
  90:	ff ff       	.word	0xffff	; ????
  92:	5b ff       	.word	0xff5b	; ????
  94:	ff ff       	.word	0xffff	; ????
  96:	ff ff       	.word	0xffff	; ????
  98:	74 75       	andi	r23, 0x54	; 84
  9a:	ff ff       	.word	0xffff	; ????
  9c:	73 ff       	sbrs	r23, 3
  9e:	ff ff       	.word	0xffff	; ????
  a0:	5d 5e       	subi	r21, 0xED	; 237
  a2:	5c ff       	.word	0xff5c	; ????
  a4:	72 5f       	subi	r23, 0xF2	; 242
  a6:	71 00       	.word	0x0071	; ????
  a8:	48 47       	sbci	r20, 0x78	; 120
  aa:	ff 44       	sbci	r31, 0x4F	; 79
  ac:	49 ff       	.word	0xff49	; ????
  ae:	ff 1d       	adc	r31, r15
  b0:	ff 46       	sbci	r31, 0x6F	; 111
  b2:	ff 45       	sbci	r31, 0x5F	; 95
  b4:	ff ff       	.word	0xffff	; ????
  b6:	23 22       	and	r2, r19
  b8:	79 ff       	.word	0xff79	; ????
  ba:	7a ff       	.word	0xff7a	; ????
  bc:	4a ff       	.word	0xff4a	; ????
  be:	ff 1e       	adc	r15, r31
  c0:	06 ff       	sbrs	r16, 6
  c2:	7b ff       	.word	0xff7b	; ????
  c4:	ff ff       	.word	0xffff	; ????
  c6:	7c 11       	cpse	r23, r12
  c8:	ff ff       	.word	0xffff	; ????
  ca:	ff 43       	sbci	r31, 0x3F	; 63
  cc:	1a ff       	.word	0xff1a	; ????
  ce:	1b 1c       	adc	r1, r11
  d0:	ff 3b       	cpi	r31, 0xBF	; 191
  d2:	ff ff       	.word	0xffff	; ????
  d4:	ff ff       	.word	0xffff	; ????
  d6:	ff 0f       	add	r31, r31
  d8:	ff ff       	.word	0xffff	; ????
  da:	ff ff       	.word	0xffff	; ????
  dc:	ff ff       	.word	0xffff	; ????
  de:	ff ff       	.word	0xffff	; ????
  e0:	05 ff       	sbrs	r16, 5
  e2:	ff ff       	.word	0xffff	; ????
  e4:	6e ff       	.word	0xff6e	; ????
  e6:	6f 10       	cpse	r6, r15
  e8:	57 54       	subi	r21, 0x47	; 71
  ea:	ff 2d       	mov	r31, r15
  ec:	56 55       	subi	r21, 0x56	; 86
  ee:	ff 32       	cpi	r31, 0x2F	; 47
  f0:	ff ff       	.word	0xffff	; ????
  f2:	ff 2e       	mov	r15, r31
  f4:	ff ff       	.word	0xffff	; ????
  f6:	ff 21       	and	r31, r15
  f8:	ff 53       	subi	r31, 0x3F	; 63
  fa:	ff 2c       	mov	r15, r15
  fc:	4b ff       	.word	0xff4b	; ????
  fe:	ff 1f       	adc	r31, r31
 100:	ff ff       	.word	0xffff	; ????
 102:	ff ff       	.word	0xffff	; ????
 104:	ff ff       	.word	0xffff	; ????
 106:	ff 20       	and	r15, r15
 108:	64 3d       	cpi	r22, 0xD4	; 212
 10a:	65 42       	sbci	r22, 0x25	; 37
 10c:	ff 3e       	cpi	r31, 0xEF	; 239
 10e:	ff 31       	cpi	r31, 0x1F	; 31
 110:	63 3c       	cpi	r22, 0xC3	; 195
 112:	ff 2f       	mov	r31, r31
 114:	ff ff       	.word	0xffff	; ????
 116:	ff 30       	cpi	r31, 0x0F	; 15
 118:	4d 52       	subi	r20, 0x2D	; 45
 11a:	4e 41       	sbci	r20, 0x1E	; 30
 11c:	4c 3f       	cpi	r20, 0xFC	; 252
 11e:	ff 40       	sbci	r31, 0x0F	; 15
 120:	62 51       	subi	r22, 0x12	; 18
 122:	4f 50       	subi	r20, 0x0F	; 15
 124:	61 60       	ori	r22, 0x01	; 1
 126:	70 ff       	sbrs	r23, 0

00000128 <table>:
 128:	00 c2 01 00 01 00 05 00 05 00 03 00 00 e1 00 00     ................
 138:	01 00 0f 00 0f 00 0d 00 00 96 00 00 02 00 19 00     ................
 148:	1a 00 17 00 12 7a 00 00 07 00 20 00 21 00 1d 00     .....z.... .!...
 158:	80 70 00 00 0b 00 23 00 23 00 20 00 00 4b 00 00     .p....#.#. ..K..
 168:	14 00 37 00 37 00 34 00 40 38 00 00 1e 00 4b 00     ..7.7.4.@8....K.
 178:	4b 00 48 00 80 25 00 00 32 00 72 00 72 00 70 00     K.H..%..2.r.r.p.
 188:	c0 12 00 00 6e 00 e9 00 e9 00 e6 00 60 09 00 00     ....n.......`...
 198:	e5 00 d8 01 d8 01 d5 01 b0 04 00 00 d3 01 b4 03     ................
 1a8:	b4 03 b1 03 58 02 00 00 b4 03 67 07 67 07 62 07     ....X.....g.g.b.
 1b8:	2c 01 00 00 67 07 dd 0e dd 0e da 0e                 ,...g.......

000001c4 <__ctors_end>:
 1c4:	11 24       	eor	r1, r1
 1c6:	1f be       	out	0x3f, r1	; 63
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
 1ca:	d2 e0       	ldi	r29, 0x02	; 2
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
 1d0:	11 e0       	ldi	r17, 0x01	; 1
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b1 e0       	ldi	r27, 0x01	; 1
 1d6:	e2 e6       	ldi	r30, 0x62	; 98
 1d8:	f6 e0       	ldi	r31, 0x06	; 6
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
 1dc:	05 90       	lpm	r0, Z+
 1de:	0d 92       	st	X+, r0
 1e0:	a0 30       	cpi	r26, 0x00	; 0
 1e2:	b1 07       	cpc	r27, r17
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b1 e0       	ldi	r27, 0x01	; 1
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
 1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
 1f0:	ac 34       	cpi	r26, 0x4C	; 76
 1f2:	b2 07       	cpc	r27, r18
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
 1f6:	06 d1       	rcall	.+524    	; 0x404 <main>
 1f8:	32 c2       	rjmp	.+1124   	; 0x65e <_exit>

000001fa <__bad_interrupt>:
 1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <ACEInit>:
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1);
	
	PORTD |= 1<<ACE_EN;
	
	return raw_val;
}
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	8c 7f       	andi	r24, 0xFC	; 252
 200:	84 b9       	out	0x04, r24	; 4
 202:	87 b1       	in	r24, 0x07	; 7
 204:	88 77       	andi	r24, 0x78	; 120
 206:	87 b9       	out	0x07, r24	; 7
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	8a b9       	out	0x0a, r24	; 10
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	8b b9       	out	0x0b, r24	; 11
 212:	08 95       	ret

00000214 <isBitSet>:
 214:	86 23       	and	r24, r22
 216:	11 f0       	breq	.+4      	; 0x21c <isBitSet+0x8>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret

00000220 <readACEQuick>:

uint8_t ACETransform(uint8_t val){
	return encoderMap[val];
}

uint8_t readACEQuick(void){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
	
	PORTD &= ~(1<<ACE_EN);
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	87 7f       	andi	r24, 0xF7	; 247
 228:	8b b9       	out	0x0b, r24	; 11
	asm("nop\n\t"
 22a:	00 00       	nop
 22c:	00 00       	nop
 22e:	00 00       	nop
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 230:	86 b1       	in	r24, 0x06	; 6
 232:	60 e8       	ldi	r22, 0x80	; 128
 234:	ef df       	rcall	.-34     	; 0x214 <isBitSet>
 236:	c8 2f       	mov	r28, r24
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	d6 95       	lsr	r29
 23c:	dc 2f       	mov	r29, r28
 23e:	cc 27       	eor	r28, r28
 240:	d7 95       	ror	r29
 242:	c7 95       	ror	r28
 244:	86 b1       	in	r24, 0x06	; 6
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	e5 df       	rcall	.-54     	; 0x214 <isBitSet>
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	00 24       	eor	r0, r0
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	07 94       	ror	r0
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	07 94       	ror	r0
 25a:	98 2f       	mov	r25, r24
 25c:	80 2d       	mov	r24, r0
 25e:	c8 2b       	or	r28, r24
 260:	d9 2b       	or	r29, r25
 262:	86 b1       	in	r24, 0x06	; 6
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	d6 df       	rcall	.-84     	; 0x214 <isBitSet>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	82 95       	swap	r24
 270:	92 95       	swap	r25
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	98 27       	eor	r25, r24
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	98 27       	eor	r25, r24
 27a:	c8 2b       	or	r28, r24
 27c:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 27e:	86 b1       	in	r24, 0x06	; 6
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	c8 df       	rcall	.-112    	; 0x214 <isBitSet>
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	82 95       	swap	r24
 288:	92 95       	swap	r25
 28a:	90 7f       	andi	r25, 0xF0	; 240
 28c:	98 27       	eor	r25, r24
 28e:	80 7f       	andi	r24, 0xF0	; 240
 290:	98 27       	eor	r25, r24
	
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 292:	c8 2b       	or	r28, r24
 294:	d9 2b       	or	r29, r25
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 296:	89 b1       	in	r24, 0x09	; 9
 298:	60 e4       	ldi	r22, 0x40	; 64
 29a:	bc df       	rcall	.-136    	; 0x214 <isBitSet>
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	c8 2b       	or	r28, r24
 2ac:	d9 2b       	or	r29, r25
 2ae:	89 b1       	in	r24, 0x09	; 9
 2b0:	60 e8       	ldi	r22, 0x80	; 128
 2b2:	b0 df       	rcall	.-160    	; 0x214 <isBitSet>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	c8 2b       	or	r28, r24
 2c0:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 2c2:	83 b1       	in	r24, 0x03	; 3
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	a6 df       	rcall	.-180    	; 0x214 <isBitSet>
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
 2ce:	c8 2b       	or	r28, r24
 2d0:	d9 2b       	or	r29, r25
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
 2d2:	83 b1       	in	r24, 0x03	; 3
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	9e df       	rcall	.-196    	; 0x214 <isBitSet>
 2d8:	fe 01       	movw	r30, r28
 2da:	e8 2b       	or	r30, r24
	
	PORTD &= ~(1<<ACE_EN);
	asm("nop\n\t"
		"nop\n\t"
		"nop\n\t");
	uint8_t val = encoderMap[isBitSet(ACE_P8_PORT , ACE_P8)<<7|isBitSet(ACE_P7_PORT , ACE_P7)<<6|isBitSet(ACE_P6_PORT , ACE_P6)<<5|
 2dc:	e8 5d       	subi	r30, 0xD8	; 216
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	84 91       	lpm	r24, Z
	isBitSet(ACE_P5_PORT , ACE_P5)<<4|isBitSet(ACE_P4_PORT , ACE_P4)<<3|isBitSet(ACE_P3_PORT , ACE_P3)<<2|
	isBitSet(ACE_P2_PORT , ACE_P2)<<1|isBitSet(ACE_P1_PORT, ACE_P1)];
	
	PORTD |= 1<<ACE_EN;
 2e2:	9b b1       	in	r25, 0x0b	; 11
 2e4:	98 60       	ori	r25, 0x08	; 8
 2e6:	9b b9       	out	0x0b, r25	; 11
	return val;
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <I2CInit>:
#define BITRATE 10                             // Hardware I2C bitrate
#define PRESCALER 0							// SET PRESCALER TO 1


void I2CInit(void){
  TWBR = BITRATE;
 2ee:	8a e0       	ldi	r24, 0x0A	; 10
 2f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
  TWSR &= ~(0x2 & PRESCALER);
 2f4:	e9 eb       	ldi	r30, 0xB9	; 185
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <I2CStart>:
}

// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	90 81       	ld	r25, Z
 304:	94 6a       	ori	r25, 0xA4	; 164
 306:	90 83       	st	Z, r25
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
 308:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 30c:	99 23       	and	r25, r25
 30e:	e4 f7       	brge	.-8      	; 0x308 <__stack+0x9>
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 310:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 314:	98 7f       	andi	r25, 0xF8	; 248
 316:	98 30       	cpi	r25, 0x08	; 8
 318:	29 f0       	breq	.+10     	; 0x324 <__stack+0x25>
 31a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 31e:	98 7f       	andi	r25, 0xF8	; 248
 320:	90 31       	cpi	r25, 0x10	; 16
 322:	c9 f4       	brne	.+50     	; 0x356 <__stack+0x57>
	TWDR = address<<1 | rw;						//write adr+rw
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	86 2b       	or	r24, r22
 32c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
 330:	84 e8       	ldi	r24, 0x84	; 132
 332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));				//wait for send
 336:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 33a:	88 23       	and	r24, r24
 33c:	e4 f7       	brge	.-8      	; 0x336 <__stack+0x37>
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 33e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 342:	88 7f       	andi	r24, 0xF8	; 248
 344:	88 31       	cpi	r24, 0x18	; 24
 346:	49 f0       	breq	.+18     	; 0x35a <__stack+0x5b>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 348:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
 34c:	88 7f       	andi	r24, 0xF8	; 248
 34e:	80 34       	cpi	r24, 0x40	; 64
 350:	31 f4       	brne	.+12     	; 0x35e <__stack+0x5f>
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
// Start transmission by sending address
uint8_t I2CStart (uint8_t address, uint8_t rw) {

	TWCR |= 1<<TWINT | 1<<TWSTA | 1<<TWEN;		//send start 
	while (!(TWCR & (1<<TWINT)));				//wait for start flag
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	08 95       	ret
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
	return 0;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret
	if ((TWSR & 0xF8) != 1<<TWS3 && (TWSR & 0xF8) != 1<<TWS4) return 1;	//check start status
	TWDR = address<<1 | rw;						//write adr+rw
	TWCR = 1<<TWINT | 1<<TWEN;					//proceed
	while (!(TWCR & (1<<TWINT)));				//wait for send
	if (((TWSR & 0xF8) != (1<<TWS4|1<<TWS3)) &&
	((TWSR & 0xF8) != 1<<TWS6)) return 1;	//check if sent correctly
 35e:	81 e0       	ldi	r24, 0x01	; 1
	return 0;

}
 360:	08 95       	ret

00000362 <I2CStop>:

void I2CStop (void) {
	TWCR = 1<<TWINT|1<<TWSTO|1<<TWEN;	// Send STOP
 362:	84 e9       	ldi	r24, 0x94	; 148
 364:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 368:	08 95       	ret

0000036a <I2CWrite>:
	//while (!(TWCR & (1<<TWINT)));		// Wait for bus to return to idle state
}

uint8_t I2CWrite (uint8_t data) {
  TWDR = data;
 36a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
  TWCR = 1<<TWINT | 1 << TWEN;
 36e:	84 e8       	ldi	r24, 0x84	; 132
 370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
  while (!(TWCR & 1<<TWINT));
 374:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 378:	88 23       	and	r24, r24
 37a:	e4 f7       	brge	.-8      	; 0x374 <I2CWrite+0xa>
  if((TWSR & 0xF8) != (1<<TWS5|1<<TWS3)) return 1;
 37c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
 380:	88 7f       	andi	r24, 0xF8	; 248
 382:	88 32       	cpi	r24, 0x28	; 40
 384:	11 f0       	breq	.+4      	; 0x38a <I2CWrite+0x20>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	08 95       	ret
  return 0;
 38a:	80 e0       	ldi	r24, 0x00	; 0
  //return (TWSR & 0xF8);
}
 38c:	08 95       	ret

0000038e <LEDSetReg>:
	DDRC |= 1<<PINC3;
	PORTC |= 1<<PINC3;
	
}

uint8_t LEDSetReg(uint8_t adr, uint8_t val){
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	c8 2f       	mov	r28, r24
 394:	d6 2f       	mov	r29, r22
	
	if(I2CStart(LED_ADR, I2C_WRITE)) return 1;
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	84 e3       	ldi	r24, 0x34	; 52
 39a:	b1 df       	rcall	.-158    	; 0x2fe <I2CStart>
 39c:	81 11       	cpse	r24, r1
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <LEDSetReg+0x28>
	if(I2CWrite(adr)) return 2;
 3a0:	8c 2f       	mov	r24, r28
 3a2:	e3 df       	rcall	.-58     	; 0x36a <I2CWrite>
 3a4:	81 11       	cpse	r24, r1
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <LEDSetReg+0x2c>
	if(I2CWrite(val)) return 3;
 3a8:	8d 2f       	mov	r24, r29
 3aa:	df df       	rcall	.-66     	; 0x36a <I2CWrite>
 3ac:	c8 2f       	mov	r28, r24
 3ae:	81 11       	cpse	r24, r1
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <LEDSetReg+0x30>
	I2CStop();
 3b2:	d7 df       	rcall	.-82     	; 0x362 <I2CStop>
	return 0;
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <LEDSetReg+0x32>
	
}

uint8_t LEDSetReg(uint8_t adr, uint8_t val){
	
	if(I2CStart(LED_ADR, I2C_WRITE)) return 1;
 3b6:	c1 e0       	ldi	r28, 0x01	; 1
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <LEDSetReg+0x32>
	if(I2CWrite(adr)) return 2;
 3ba:	c2 e0       	ldi	r28, 0x02	; 2
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <LEDSetReg+0x32>
	if(I2CWrite(val)) return 3;
 3be:	c3 e0       	ldi	r28, 0x03	; 3
	I2CStop();
	return 0;
}
 3c0:	8c 2f       	mov	r24, r28
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <LEDInit>:

#include "led_drv.h"
#include "I2C.h"


void LEDInit(void){
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
	
	const int rgb = 0b001100;
	
	LEDSetReg(0xCF, 0xAE); //reset 
 3cc:	6e ea       	ldi	r22, 0xAE	; 174
 3ce:	8f ec       	ldi	r24, 0xCF	; 207
 3d0:	de df       	rcall	.-68     	; 0x38e <LEDSetReg>
	
	LEDSetReg(0xA0, 0x01);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	80 ea       	ldi	r24, 0xA0	; 160
 3d6:	db df       	rcall	.-74     	; 0x38e <LEDSetReg>
	LEDSetReg(0xA1, 30);
 3d8:	6e e1       	ldi	r22, 0x1E	; 30
 3da:	81 ea       	ldi	r24, 0xA1	; 161
 3dc:	d8 df       	rcall	.-80     	; 0x38e <LEDSetReg>

	for(int a = 0x90; a < 0x9F; a++){
 3de:	c0 e9       	ldi	r28, 0x90	; 144
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <LEDInit+0x24>
		LEDSetReg(a, 100);
 3e4:	64 e6       	ldi	r22, 0x64	; 100
 3e6:	8c 2f       	mov	r24, r28
 3e8:	d2 df       	rcall	.-92     	; 0x38e <LEDSetReg>
	LEDSetReg(0xCF, 0xAE); //reset 
	
	LEDSetReg(0xA0, 0x01);
	LEDSetReg(0xA1, 30);

	for(int a = 0x90; a < 0x9F; a++){
 3ea:	21 96       	adiw	r28, 0x01	; 1
 3ec:	cf 39       	cpi	r28, 0x9F	; 159
 3ee:	d1 05       	cpc	r29, r1
 3f0:	cc f3       	brlt	.-14     	; 0x3e4 <LEDInit+0x1c>
// 			LEDSetReg(i+a+1, 30*(0x3&(rgb>>2)));
// 			LEDSetReg(i+a+2, 30*(0x3&(rgb>>4)));
// 		}
// 	}
	
	DDRC |= 1<<PINC3;
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	88 60       	ori	r24, 0x08	; 8
 3f6:	87 b9       	out	0x07, r24	; 7
	PORTC |= 1<<PINC3;
 3f8:	88 b1       	in	r24, 0x08	; 8
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	88 b9       	out	0x08, r24	; 8
	
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <main>:
#include "led_drv.h"


int main(void)
{
	softSerialBegin(9600);
 404:	60 e8       	ldi	r22, 0x80	; 128
 406:	75 e2       	ldi	r23, 0x25	; 37
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	9e d0       	rcall	.+316    	; 0x54a <softSerialBegin>
	ACEInit();
 40e:	f6 de       	rcall	.-532    	; 0x1fc <ACEInit>
	I2CInit();
 410:	6e df       	rcall	.-292    	; 0x2ee <I2CInit>
	LEDInit();
 412:	da df       	rcall	.-76     	; 0x3c8 <LEDInit>
	
	while(1){
	
	//debug_printf("ACE: %d\r\n", readACEQuick());
	int led = ((uint16_t)readACEQuick()*15)>>6;
 414:	05 df       	rcall	.-502    	; 0x220 <readACEQuick>
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	8c 01       	movw	r16, r24
 41a:	02 95       	swap	r16
 41c:	12 95       	swap	r17
 41e:	10 7f       	andi	r17, 0xF0	; 240
 420:	10 27       	eor	r17, r16
 422:	00 7f       	andi	r16, 0xF0	; 240
 424:	10 27       	eor	r17, r16
 426:	08 1b       	sub	r16, r24
 428:	19 0b       	sbc	r17, r25
 42a:	00 24       	eor	r0, r0
 42c:	00 0f       	add	r16, r16
 42e:	11 1f       	adc	r17, r17
 430:	00 1c       	adc	r0, r0
 432:	00 0f       	add	r16, r16
 434:	11 1f       	adc	r17, r17
 436:	00 1c       	adc	r0, r0
 438:	01 2f       	mov	r16, r17
 43a:	10 2d       	mov	r17, r0
	//debug_printf("LED: %d\r\n", led);
		for(int i = 1; i<(led+1); i++){
 43c:	c1 e0       	ldi	r28, 0x01	; 1
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	1b c0       	rjmp	.+54     	; 0x478 <main+0x74>
			if( i <led){
 442:	c0 17       	cp	r28, r16
 444:	d1 07       	cpc	r29, r17
 446:	64 f4       	brge	.+24     	; 0x460 <main+0x5c>
				LEDSetReg(i, 100);
 448:	64 e6       	ldi	r22, 0x64	; 100
 44a:	8c 2f       	mov	r24, r28
 44c:	a0 df       	rcall	.-192    	; 0x38e <LEDSetReg>
				LEDSetReg(i+1, 100);
 44e:	64 e6       	ldi	r22, 0x64	; 100
 450:	8c 2f       	mov	r24, r28
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	9c df       	rcall	.-200    	; 0x38e <LEDSetReg>
				LEDSetReg(i+2, 100);}
 456:	64 e6       	ldi	r22, 0x64	; 100
 458:	8c 2f       	mov	r24, r28
 45a:	8e 5f       	subi	r24, 0xFE	; 254
 45c:	98 df       	rcall	.-208    	; 0x38e <LEDSetReg>
 45e:	0b c0       	rjmp	.+22     	; 0x476 <main+0x72>
				else{
									LEDSetReg(i, 0);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	8c 2f       	mov	r24, r28
 464:	94 df       	rcall	.-216    	; 0x38e <LEDSetReg>
									LEDSetReg(i+1, 0);
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	8c 2f       	mov	r24, r28
 46a:	8f 5f       	subi	r24, 0xFF	; 255
 46c:	90 df       	rcall	.-224    	; 0x38e <LEDSetReg>
									LEDSetReg(i+2, 0);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	8c 2f       	mov	r24, r28
 472:	8e 5f       	subi	r24, 0xFE	; 254
 474:	8c df       	rcall	.-232    	; 0x38e <LEDSetReg>
	while(1){
	
	//debug_printf("ACE: %d\r\n", readACEQuick());
	int led = ((uint16_t)readACEQuick()*15)>>6;
	//debug_printf("LED: %d\r\n", led);
		for(int i = 1; i<(led+1); i++){
 476:	21 96       	adiw	r28, 0x01	; 1
 478:	c8 01       	movw	r24, r16
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	c8 17       	cp	r28, r24
 47e:	d9 07       	cpc	r29, r25
 480:	04 f3       	brlt	.-64     	; 0x442 <main+0x3e>
 482:	c8 cf       	rjmp	.-112    	; 0x414 <main+0x10>

00000484 <__vector_3>:


//
// Interrupt handling, receive routine
//
ISR(PCINT0_vect) {
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	uint8_t d = 0;

	// If RX line is high, then we don't see any start bit
	// so interrupt is probably not for us
	if ( !rx_pin_read() ) {
 49c:	1f 99       	sbic	0x03, 7	; 3
 49e:	49 c0       	rjmp	.+146    	; 0x532 <__vector_3+0xae>
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(_rx_delay_centering);
 4a0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_rx_delay_centering>
 4a4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_rx_delay_centering+0x1>

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	8f 3f       	cpi	r24, 0xFF	; 255
 4b0:	92 07       	cpc	r25, r18
 4b2:	d9 f7       	brne	.-10     	; 0x4aa <__vector_3+0x26>
	if ( !rx_pin_read() ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
 4b4:	21 e0       	ldi	r18, 0x01	; 1

//
// Interrupt handling, receive routine
//
ISR(PCINT0_vect) {
	uint8_t d = 0;
 4b6:	40 e0       	ldi	r20, 0x00	; 0
	if ( !rx_pin_read() ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
 4b8:	12 c0       	rjmp	.+36     	; 0x4de <__vector_3+0x5a>
			tunedDelay(_rx_delay_intrabit);
 4ba:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_rx_delay_intrabit>
 4be:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <_rx_delay_intrabit+0x1>

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	3f ef       	ldi	r19, 0xFF	; 255
 4c8:	8f 3f       	cpi	r24, 0xFF	; 255
 4ca:	93 07       	cpc	r25, r19
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__vector_3+0x40>
		tunedDelay(_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
			tunedDelay(_rx_delay_intrabit);
			uint8_t noti = ~i;
 4ce:	82 2f       	mov	r24, r18
 4d0:	80 95       	com	r24
			if (rx_pin_read())
 4d2:	1f 9b       	sbis	0x03, 7	; 3
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__vector_3+0x56>
				d |= i;
 4d6:	42 2b       	or	r20, r18
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__vector_3+0x58>
			else // else clause added to ensure function timing is ~balanced
				d &= noti;
 4da:	48 23       	and	r20, r24
	if ( !rx_pin_read() ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
 4dc:	22 0f       	add	r18, r18
 4de:	21 11       	cpse	r18, r1
 4e0:	ec cf       	rjmp	.-40     	; 0x4ba <__vector_3+0x36>
			else // else clause added to ensure function timing is ~balanced
				d &= noti;
		}

		// skip the stop bit
		tunedDelay(_rx_delay_stopbit);
 4e2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_rx_delay_stopbit>
 4e6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_rx_delay_stopbit+0x1>

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	8f 3f       	cpi	r24, 0xFF	; 255
 4f0:	92 07       	cpc	r25, r18
 4f2:	d9 f7       	brne	.-10     	; 0x4ea <__vector_3+0x66>

		// skip the stop bit
		tunedDelay(_rx_delay_stopbit);

		// if buffer full, set the overflow flag and return
		if (((_receive_buffer_tail + 1) & _SS_RX_BUFF_MASK) != _receive_buffer_head) {  // circular buffer
 4f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_receive_buffer_tail>
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	8f 73       	andi	r24, 0x3F	; 63
 4fe:	99 27       	eor	r25, r25
 500:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	82 17       	cp	r24, r18
 508:	93 07       	cpc	r25, r19
 50a:	69 f0       	breq	.+26     	; 0x526 <__vector_3+0xa2>
			// save new data in buffer: tail points to where byte goes
			_receive_buffer[_receive_buffer_tail] = d; // save new byte
 50c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <_receive_buffer_tail>
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ee 5f       	subi	r30, 0xFE	; 254
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	40 83       	st	Z, r20
			_receive_buffer_tail = (_receive_buffer_tail + 1) & _SS_RX_BUFF_MASK;  // circular buffer
 518:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_receive_buffer_tail>
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	8f 73       	andi	r24, 0x3F	; 63
 520:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_receive_buffer_tail>
 524:	06 c0       	rjmp	.+12     	; 0x532 <__vector_3+0xae>
		} else {
			_buffer_overflow = true;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <_buffer_overflow+0x1>
 52e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_buffer_overflow>
		}
	}
}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <softSerialBegin>:

//
// Public methods
//

void softSerialBegin(long speed) {
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	8b 01       	movw	r16, r22
 550:	9c 01       	movw	r18, r24
	unsigned i;

	_receive_buffer_head = _receive_buffer_tail = 0;
 552:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_receive_buffer_tail>
 556:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	_buffer_overflow = false;
 55a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_buffer_overflow+0x1>
 55e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_buffer_overflow>
	SERDDR |= (1<<TXPIN); // set TX for output
 562:	84 b1       	in	r24, 0x04	; 4
 564:	80 64       	ori	r24, 0x40	; 64
 566:	84 b9       	out	0x04, r24	; 4
	SERDDR &= ~(1<<RXPIN); // set RX for input
 568:	84 b1       	in	r24, 0x04	; 4
 56a:	8f 77       	andi	r24, 0x7F	; 127
 56c:	84 b9       	out	0x04, r24	; 4
	SERPORT |= (1<<TXPIN)|(1<<RXPIN); // assumes no inverse logic
 56e:	85 b1       	in	r24, 0x05	; 5
 570:	80 6c       	ori	r24, 0xC0	; 192
 572:	85 b9       	out	0x05, r24	; 5

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	6b c0       	rjmp	.+214    	; 0x650 <softSerialBegin+0x106>
		long baud = pgm_read_dword(&table[i].baud);
 57a:	fc 01       	movw	r30, r24
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	e8 0f       	add	r30, r24
 582:	f9 1f       	adc	r31, r25
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	e8 5d       	subi	r30, 0xD8	; 216
 58e:	fe 4f       	sbci	r31, 0xFE	; 254
 590:	45 91       	lpm	r20, Z+
 592:	55 91       	lpm	r21, Z+
 594:	65 91       	lpm	r22, Z+
 596:	74 91       	lpm	r23, Z
		if (baud == speed) {
 598:	40 17       	cp	r20, r16
 59a:	51 07       	cpc	r21, r17
 59c:	62 07       	cpc	r22, r18
 59e:	73 07       	cpc	r23, r19
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <softSerialBegin+0x5a>
 5a2:	55 c0       	rjmp	.+170    	; 0x64e <softSerialBegin+0x104>
			_rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
 5a4:	9c 01       	movw	r18, r24
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	f9 01       	movw	r30, r18
 5ac:	e8 0f       	add	r30, r24
 5ae:	f9 1f       	adc	r31, r25
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	e4 5d       	subi	r30, 0xD4	; 212
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	45 91       	lpm	r20, Z+
 5be:	54 91       	lpm	r21, Z
 5c0:	50 93 4b 01 	sts	0x014B, r21	; 0x80014b <_rx_delay_centering+0x1>
 5c4:	40 93 4a 01 	sts	0x014A, r20	; 0x80014a <_rx_delay_centering>
			_rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
 5c8:	f9 01       	movw	r30, r18
 5ca:	e8 0f       	add	r30, r24
 5cc:	f9 1f       	adc	r31, r25
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	e2 5d       	subi	r30, 0xD2	; 210
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	45 91       	lpm	r20, Z+
 5dc:	54 91       	lpm	r21, Z
 5de:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <_rx_delay_intrabit+0x1>
 5e2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <_rx_delay_intrabit>
			_rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
 5e6:	f9 01       	movw	r30, r18
 5e8:	e8 0f       	add	r30, r24
 5ea:	f9 1f       	adc	r31, r25
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	e0 5d       	subi	r30, 0xD0	; 208
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	45 91       	lpm	r20, Z+
 5fa:	54 91       	lpm	r21, Z
 5fc:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <_rx_delay_stopbit+0x1>
 600:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <_rx_delay_stopbit>
			_tx_delay = pgm_read_word(&table[i].tx_delay);
 604:	f9 01       	movw	r30, r18
 606:	e8 0f       	add	r30, r24
 608:	f9 1f       	adc	r31, r25
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	ee 5c       	subi	r30, 0xCE	; 206
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	85 91       	lpm	r24, Z+
 618:	94 91       	lpm	r25, Z
 61a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_tx_delay+0x1>
 61e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_tx_delay>
			// Set up RX interrupts, but only if we have a valid RX baud rate
			PCICR |= (1<<PCIE0);
 622:	e8 e6       	ldi	r30, 0x68	; 104
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	81 60       	ori	r24, 0x01	; 1
 62a:	80 83       	st	Z, r24
			PCMSK0 |= (1<<RXPIN);
 62c:	eb e6       	ldi	r30, 0x6B	; 107
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	80 68       	ori	r24, 0x80	; 128
 634:	80 83       	st	Z, r24
			tunedDelay(_tx_delay);
 636:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_tx_delay>
 63a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_tx_delay+0x1>

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	2f ef       	ldi	r18, 0xFF	; 255
 644:	8f 3f       	cpi	r24, 0xFF	; 255
 646:	92 07       	cpc	r25, r18
 648:	d9 f7       	brne	.-10     	; 0x640 <softSerialBegin+0xf6>
			_tx_delay = pgm_read_word(&table[i].tx_delay);
			// Set up RX interrupts, but only if we have a valid RX baud rate
			PCICR |= (1<<PCIE0);
			PCMSK0 |= (1<<RXPIN);
			tunedDelay(_tx_delay);
			sei();
 64a:	78 94       	sei
			return;
 64c:	05 c0       	rjmp	.+10     	; 0x658 <softSerialBegin+0x10e>
	_buffer_overflow = false;
	SERDDR |= (1<<TXPIN); // set TX for output
	SERDDR &= ~(1<<RXPIN); // set RX for input
	SERPORT |= (1<<TXPIN)|(1<<RXPIN); // assumes no inverse logic

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	8d 30       	cpi	r24, 0x0D	; 13
 652:	91 05       	cpc	r25, r1
 654:	08 f4       	brcc	.+2      	; 0x658 <softSerialBegin+0x10e>
 656:	91 cf       	rjmp	.-222    	; 0x57a <softSerialBegin+0x30>
		}
	}

	// No valid rate found
	// Indicate an error
}
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>

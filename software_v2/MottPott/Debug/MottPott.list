
MottPott.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ec  080036ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080036ec  080036ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ec  080036ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08003700  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003700  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121d9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000295a  00000000  00000000  00032250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00034bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d62  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016122  00000000  00000000  00036a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016076  00000000  00000000  0004cb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b1f4  00000000  00000000  00062bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d88  00000000  00000000  000eddb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f1b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003608 	.word	0x08003608

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003608 	.word	0x08003608

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f003 f9be 	bl	80035b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000234:	4b2e      	ldr	r3, [pc, #184]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <MX_ADC1_Init+0xd4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <MX_ADC1_Init+0xd0>)
 800023c:	2280      	movs	r2, #128	; 0x80
 800023e:	05d2      	lsls	r2, r2, #23
 8000240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000242:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b29      	ldr	r3, [pc, #164]	; (80002f0 <MX_ADC1_Init+0xd0>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b28      	ldr	r3, [pc, #160]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000254:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000256:	2204      	movs	r2, #4
 8000258:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800025a:	4b25      	ldr	r3, [pc, #148]	; (80002f0 <MX_ADC1_Init+0xd0>)
 800025c:	2200      	movs	r2, #0
 800025e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000262:	2200      	movs	r2, #0
 8000264:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000268:	2200      	movs	r2, #0
 800026a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800026c:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <MX_ADC1_Init+0xd0>)
 800026e:	2201      	movs	r2, #1
 8000270:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000272:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000274:	2220      	movs	r2, #32
 8000276:	2100      	movs	r1, #0
 8000278:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <MX_ADC1_Init+0xd0>)
 800027c:	2200      	movs	r2, #0
 800027e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000282:	2200      	movs	r2, #0
 8000284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000288:	222c      	movs	r2, #44	; 0x2c
 800028a:	2100      	movs	r1, #0
 800028c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000290:	2200      	movs	r2, #0
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <MX_ADC1_Init+0xd0>)
 8000296:	2205      	movs	r2, #5
 8000298:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_ADC1_Init+0xd0>)
 800029c:	2205      	movs	r2, #5
 800029e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <MX_ADC1_Init+0xd0>)
 80002a2:	223c      	movs	r2, #60	; 0x3c
 80002a4:	2100      	movs	r1, #0
 80002a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_ADC1_Init+0xd0>)
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	0592      	lsls	r2, r2, #22
 80002ae:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_ADC1_Init+0xd0>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fd6e 	bl	8000d94 <HAL_ADC_Init>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80002bc:	f000 f922 	bl	8000504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <MX_ADC1_Init+0xd8>)
 80002c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3a      	adds	r2, r7, #4
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_ADC1_Init+0xd0>)
 80002d6:	0011      	movs	r1, r2
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 ff23 	bl	8001124 <HAL_ADC_ConfigChannel>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80002e2:	f000 f90f 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b004      	add	sp, #16
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40012400 	.word	0x40012400
 80002f8:	1c000080 	.word	0x1c000080

080002fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b091      	sub	sp, #68	; 0x44
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000304:	232c      	movs	r3, #44	; 0x2c
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	0018      	movs	r0, r3
 800030a:	2314      	movs	r3, #20
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f003 f94e 	bl	80035b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	2410      	movs	r4, #16
 8000316:	193b      	adds	r3, r7, r4
 8000318:	0018      	movs	r0, r3
 800031a:	231c      	movs	r3, #28
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f003 f946 	bl	80035b0 <memset>
  if(adcHandle->Instance==ADC1)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <HAL_ADC_MspInit+0xb0>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d139      	bne.n	80003a2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	01d2      	lsls	r2, r2, #7
 8000334:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000336:	193b      	adds	r3, r7, r4
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fe72 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000348:	f000 f8dc 	bl	8000504 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <HAL_ADC_MspInit+0xb4>)
 800034e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <HAL_ADC_MspInit+0xb4>)
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	0349      	lsls	r1, r1, #13
 8000356:	430a      	orrs	r2, r1
 8000358:	641a      	str	r2, [r3, #64]	; 0x40
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_ADC_MspInit+0xb4>)
 800035c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	035b      	lsls	r3, r3, #13
 8000362:	4013      	ands	r3, r2
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_ADC_MspInit+0xb4>)
 800036a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <HAL_ADC_MspInit+0xb4>)
 800036e:	2101      	movs	r1, #1
 8000370:	430a      	orrs	r2, r1
 8000372:	635a      	str	r2, [r3, #52]	; 0x34
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <HAL_ADC_MspInit+0xb4>)
 8000376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = WIPER_Pin;
 8000380:	212c      	movs	r1, #44	; 0x2c
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2203      	movs	r2, #3
 800038c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(WIPER_GPIO_Port, &GPIO_InitStruct);
 8000394:	187a      	adds	r2, r7, r1
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f94b 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b011      	add	sp, #68	; 0x44
 80003a8:	bd90      	pop	{r4, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40012400 	.word	0x40012400
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b089      	sub	sp, #36	; 0x24
 80003b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	240c      	movs	r4, #12
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	0018      	movs	r0, r3
 80003c0:	2314      	movs	r3, #20
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f003 f8f3 	bl	80035b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b22      	ldr	r3, [pc, #136]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003d0:	2101      	movs	r1, #1
 80003d2:	430a      	orrs	r2, r1
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003da:	2201      	movs	r2, #1
 80003dc:	4013      	ands	r3, r2
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003e8:	2102      	movs	r1, #2
 80003ea:	430a      	orrs	r2, r1
 80003ec:	635a      	str	r2, [r3, #52]	; 0x34
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f2:	2202      	movs	r2, #2
 80003f4:	4013      	ands	r3, r2
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_SLEEP_Pin|TP2_Pin|TP1_Pin, GPIO_PIN_RESET);
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_GPIO_Init+0xa4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	21c2      	movs	r1, #194	; 0xc2
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fa8b 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INT_Pin|USR_BTN_Pin;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2221      	movs	r2, #33	; 0x21
 800040a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	193a      	adds	r2, r7, r4
 800041a:	23a0      	movs	r3, #160	; 0xa0
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f001 f909 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOT_SLEEP_Pin|TP2_Pin|TP1_Pin;
 8000426:	0021      	movs	r1, r4
 8000428:	187b      	adds	r3, r7, r1
 800042a:	22c2      	movs	r2, #194	; 0xc2
 800042c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2201      	movs	r2, #1
 8000432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <MX_GPIO_Init+0xa4>)
 8000444:	0019      	movs	r1, r3
 8000446:	0010      	movs	r0, r2
 8000448:	f001 f8f6 	bl	8001638 <HAL_GPIO_Init>

}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b009      	add	sp, #36	; 0x24
 8000452:	bd90      	pop	{r4, r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	50000400 	.word	0x50000400

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 fb1f 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f80b 	bl	800047e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f7ff ffa4 	bl	80003b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800046c:	f7ff fed8 	bl	8000220 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000470:	f000 f84e 	bl	8000510 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000474:	f000 f956 	bl	8000724 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000478:	f000 fa6a 	bl	8000950 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047c:	e7fe      	b.n	800047c <main+0x20>

0800047e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047e:	b590      	push	{r4, r7, lr}
 8000480:	b08d      	sub	sp, #52	; 0x34
 8000482:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000484:	2414      	movs	r4, #20
 8000486:	193b      	adds	r3, r7, r4
 8000488:	0018      	movs	r0, r3
 800048a:	231c      	movs	r3, #28
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f003 f88e 	bl	80035b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000494:	003b      	movs	r3, r7
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 f887 	bl	80035b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2240      	movs	r2, #64	; 0x40
 80004ba:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fa4a 	bl	8001958 <HAL_RCC_OscConfig>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80004c8:	f000 f81c 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	003b      	movs	r3, r7
 80004ce:	2207      	movs	r2, #7
 80004d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2101      	movs	r1, #1
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fc2c 	bl	8001d4c <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004f8:	f000 f804 	bl	8000504 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b00d      	add	sp, #52	; 0x34
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_SPI1_Init+0x6c>)
 8000516:	4a1a      	ldr	r2, [pc, #104]	; (8000580 <MX_SPI1_Init+0x70>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_SPI1_Init+0x6c>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_SPI1_Init+0x6c>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_SPI1_Init+0x6c>)
 8000528:	22e0      	movs	r2, #224	; 0xe0
 800052a:	00d2      	lsls	r2, r2, #3
 800052c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_SPI1_Init+0x6c>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_SPI1_Init+0x6c>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_SPI1_Init+0x6c>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_SPI1_Init+0x6c>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <MX_SPI1_Init+0x6c>)
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_SPI1_Init+0x6c>)
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <MX_SPI1_Init+0x6c>)
 8000554:	2207      	movs	r2, #7
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_SPI1_Init+0x6c>)
 800055a:	2200      	movs	r2, #0
 800055c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <MX_SPI1_Init+0x6c>)
 8000560:	2200      	movs	r2, #0
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <MX_SPI1_Init+0x6c>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fe4c 	bl	8002204 <HAL_SPI_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000570:	f7ff ffc8 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	2000008c 	.word	0x2000008c
 8000580:	40013000 	.word	0x40013000

08000584 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b093      	sub	sp, #76	; 0x4c
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	2334      	movs	r3, #52	; 0x34
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	0018      	movs	r0, r3
 8000592:	2314      	movs	r3, #20
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f003 f80a 	bl	80035b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	2418      	movs	r4, #24
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0018      	movs	r0, r3
 80005a2:	231c      	movs	r3, #28
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f003 f802 	bl	80035b0 <memset>
  if(spiHandle->Instance==SPI1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a35      	ldr	r2, [pc, #212]	; (8000688 <HAL_SPI_MspInit+0x104>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d163      	bne.n	800067e <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fd2e 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80005d0:	f7ff ff98 	bl	8000504 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <HAL_SPI_MspInit+0x108>)
 80005d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <HAL_SPI_MspInit+0x108>)
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	0149      	lsls	r1, r1, #5
 80005de:	430a      	orrs	r2, r1
 80005e0:	641a      	str	r2, [r3, #64]	; 0x40
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <HAL_SPI_MspInit+0x108>)
 80005e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	015b      	lsls	r3, r3, #5
 80005ea:	4013      	ands	r3, r2
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <HAL_SPI_MspInit+0x108>)
 80005f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <HAL_SPI_MspInit+0x108>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	430a      	orrs	r2, r1
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <HAL_SPI_MspInit+0x108>)
 80005fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000600:	2201      	movs	r2, #1
 8000602:	4013      	ands	r3, r2
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <HAL_SPI_MspInit+0x108>)
 800060a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_SPI_MspInit+0x108>)
 800060e:	2102      	movs	r1, #2
 8000610:	430a      	orrs	r2, r1
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <HAL_SPI_MspInit+0x108>)
 8000616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000618:	2202      	movs	r2, #2
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000620:	2134      	movs	r1, #52	; 0x34
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0212      	lsls	r2, r2, #8
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	000c      	movs	r4, r1
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2202      	movs	r2, #2
 8000630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	193a      	adds	r2, r7, r4
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fff3 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2238      	movs	r2, #56	; 0x38
 8000658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2202      	movs	r2, #2
 800065e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	187b      	adds	r3, r7, r1
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_SPI_MspInit+0x10c>)
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f000 ffdd 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b013      	add	sp, #76	; 0x4c
 8000684:	bd90      	pop	{r4, r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40013000 	.word	0x40013000
 800068c:	40021000 	.word	0x40021000
 8000690:	50000400 	.word	0x50000400

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	641a      	str	r2, [r3, #64]	; 0x40
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0549      	lsls	r1, r1, #21
 80006bc:	430a      	orrs	r2, r1
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_MspInit+0x44>)
 80006c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	055b      	lsls	r3, r3, #21
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 fa30 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SystemInit+0x14>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0512      	lsls	r2, r2, #20
 8000716:	609a      	str	r2, [r3, #8]
#endif
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b098      	sub	sp, #96	; 0x60
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072a:	2354      	movs	r3, #84	; 0x54
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0018      	movs	r0, r3
 8000730:	230c      	movs	r3, #12
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f002 ff3b 	bl	80035b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	2338      	movs	r3, #56	; 0x38
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	0018      	movs	r0, r3
 8000740:	231c      	movs	r3, #28
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f002 ff33 	bl	80035b0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	0018      	movs	r0, r3
 800074e:	2334      	movs	r3, #52	; 0x34
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 ff2c 	bl	80035b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000758:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <MX_TIM1_Init+0x164>)
 800075a:	4a4c      	ldr	r2, [pc, #304]	; (800088c <MX_TIM1_Init+0x168>)
 800075c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <MX_TIM1_Init+0x164>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b48      	ldr	r3, [pc, #288]	; (8000888 <MX_TIM1_Init+0x164>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <MX_TIM1_Init+0x164>)
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <MX_TIM1_Init+0x16c>)
 800076e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b45      	ldr	r3, [pc, #276]	; (8000888 <MX_TIM1_Init+0x164>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000776:	4b44      	ldr	r3, [pc, #272]	; (8000888 <MX_TIM1_Init+0x164>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b42      	ldr	r3, [pc, #264]	; (8000888 <MX_TIM1_Init+0x164>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <MX_TIM1_Init+0x164>)
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fdf5 	bl	8002374 <HAL_TIM_PWM_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f7ff feb9 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2154      	movs	r1, #84	; 0x54
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a6:	187a      	adds	r2, r7, r1
 80007a8:	4b37      	ldr	r3, [pc, #220]	; (8000888 <MX_TIM1_Init+0x164>)
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fa41 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f7ff fea5 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2138      	movs	r1, #56	; 0x38
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2260      	movs	r2, #96	; 0x60
 80007c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e6:	1879      	adds	r1, r7, r1
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_TIM1_Init+0x164>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fe19 	bl	8002424 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80007f6:	f7ff fe85 	bl	8000504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007fa:	2338      	movs	r3, #56	; 0x38
 80007fc:	18f9      	adds	r1, r7, r3
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_TIM1_Init+0x164>)
 8000800:	220c      	movs	r2, #12
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fe0e 	bl	8002424 <HAL_TIM_PWM_ConfigChannel>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800080c:	f7ff fe7a 	bl	8000504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0192      	lsls	r2, r2, #6
 8000834:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	0492      	lsls	r2, r2, #18
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_TIM1_Init+0x164>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fa45 	bl	8002cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000872:	f7ff fe47 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <MX_TIM1_Init+0x164>)
 8000878:	0018      	movs	r0, r3
 800087a:	f000 f82b 	bl	80008d4 <HAL_TIM_MspPostInit>

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b018      	add	sp, #96	; 0x60
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	200000f0 	.word	0x200000f0
 800088c:	40012c00 	.word	0x40012c00
 8000890:	0000ffff 	.word	0x0000ffff

08000894 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_TIM_PWM_MspInit+0x38>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10d      	bne.n	80008c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80008a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0109      	lsls	r1, r1, #4
 80008b0:	430a      	orrs	r2, r1
 80008b2:	641a      	str	r2, [r3, #64]	; 0x40
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80008b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	240c      	movs	r4, #12
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f002 fe62 	bl	80035b0 <memset>
  if(timHandle->Instance==TIM1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <HAL_TIM_MspPostInit+0x74>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d123      	bne.n	800093e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_TIM_MspPostInit+0x78>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_TIM_MspPostInit+0x78>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_TIM_MspPostInit+0x78>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOT1_Pin|MOT2_Pin;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2290      	movs	r2, #144	; 0x90
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2202      	movs	r2, #2
 800091c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2202      	movs	r2, #2
 800092e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	187a      	adds	r2, r7, r1
 8000932:	23a0      	movs	r3, #160	; 0xa0
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fe7d 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b009      	add	sp, #36	; 0x24
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40012c00 	.word	0x40012c00
 800094c:	40021000 	.word	0x40021000

08000950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <MX_USART2_UART_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	0192      	lsls	r2, r2, #6
 800096e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000978:	220c      	movs	r2, #12
 800097a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x64>)
 800099c:	2300      	movs	r3, #0
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	f002 fd93 	bl	80034cc <HAL_RS485Ex_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80009aa:	f7ff fdab 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000013c 	.word	0x2000013c
 80009b8:	40004400 	.word	0x40004400

080009bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2414      	movs	r4, #20
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 fdee 	bl	80035b0 <memset>
  if(uartHandle->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <HAL_UART_MspInit+0x8c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d130      	bne.n	8000a40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0x90>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x90>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a12:	0021      	movs	r1, r4
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	220e      	movs	r2, #14
 8000a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	187a      	adds	r2, r7, r1
 8000a34:	23a0      	movs	r3, #160	; 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fdfc 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b00b      	add	sp, #44	; 0x2c
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopForever+0xe>)
  adds r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopForever+0x12>)
  b LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a70:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a72:	3204      	adds	r2, #4

08000a74 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopForever+0x16>)
  cmp r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a7a:	f7ff fe47 	bl	800070c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a7e:	f002 fd9f 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff fceb 	bl	800045c <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   r0, =_estack
 8000a88:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000a8c:	080036f4 	.word	0x080036f4
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a9c:	200001d0 	.word	0x200001d0

08000aa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_IRQHandler>

08000aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 f80e 	bl	8000ad0 <HAL_InitTick>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac0:	f7ff fde8 	bl	8000694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	230f      	movs	r3, #15
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <HAL_InitTick+0x88>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d02b      	beq.n	8000b40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_InitTick+0x8c>)
 8000aea:	681c      	ldr	r4, [r3, #0]
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_InitTick+0x88>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	0019      	movs	r1, r3
 8000af2:	23fa      	movs	r3, #250	; 0xfa
 8000af4:	0098      	lsls	r0, r3, #2
 8000af6:	f7ff fb07 	bl	8000108 <__udivsi3>
 8000afa:	0003      	movs	r3, r0
 8000afc:	0019      	movs	r1, r3
 8000afe:	0020      	movs	r0, r4
 8000b00:	f7ff fb02 	bl	8000108 <__udivsi3>
 8000b04:	0003      	movs	r3, r0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fd89 	bl	800161e <HAL_SYSTICK_Config>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d112      	bne.n	8000b36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d80a      	bhi.n	8000b2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	425b      	negs	r3, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fd68 	bl	80015f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_InitTick+0x90>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e00d      	b.n	8000b48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e008      	b.n	8000b48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b36:	230f      	movs	r3, #15
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e003      	b.n	8000b48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b40:	230f      	movs	r3, #15
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b48:	230f      	movs	r3, #15
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b005      	add	sp, #20
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_IncTick+0x18>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_IncTick+0x1c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	18d2      	adds	r2, r2, r3
 8000b72:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <HAL_IncTick+0x18>)
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200001cc 	.word	0x200001cc
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <HAL_GetTick+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	200001cc 	.word	0x200001cc

08000b98 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ba8:	401a      	ands	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	ff3fffff 	.word	0xff3fffff

08000bc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	23c0      	movs	r3, #192	; 0xc0
 8000bce:	041b      	lsls	r3, r3, #16
 8000bd0:	4013      	ands	r3, r2
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	2104      	movs	r1, #4
 8000bee:	400a      	ands	r2, r1
 8000bf0:	2107      	movs	r1, #7
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	43d2      	mvns	r2, r2
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	400b      	ands	r3, r1
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	4099      	lsls	r1, r3
 8000c04:	000b      	movs	r3, r1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b004      	add	sp, #16
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	2104      	movs	r1, #4
 8000c26:	400a      	ands	r2, r1
 8000c28:	2107      	movs	r1, #7
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2104      	movs	r1, #4
 8000c34:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c36:	40da      	lsrs	r2, r3
 8000c38:	0013      	movs	r3, r2
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b084      	sub	sp, #16
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	211f      	movs	r1, #31
 8000c56:	400a      	ands	r2, r1
 8000c58:	210f      	movs	r1, #15
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	000a      	movs	r2, r1
 8000c5e:	43d2      	mvns	r2, r2
 8000c60:	401a      	ands	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0e9b      	lsrs	r3, r3, #26
 8000c66:	210f      	movs	r1, #15
 8000c68:	4019      	ands	r1, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	201f      	movs	r0, #31
 8000c6e:	4003      	ands	r3, r0
 8000c70:	4099      	lsls	r1, r3
 8000c72:	000b      	movs	r3, r1
 8000c74:	431a      	orrs	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	0a5b      	lsrs	r3, r3, #9
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	0252      	lsls	r2, r2, #9
 8000cb6:	0a52      	lsrs	r2, r2, #9
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	0212      	lsls	r2, r2, #8
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
 8000ce8:	4904      	ldr	r1, [pc, #16]	; (8000cfc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000cea:	400b      	ands	r3, r1
 8000cec:	431a      	orrs	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	7fffff00 	.word	0x7fffff00

08000d00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <LL_ADC_EnableInternalRegulator+0x24>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	0552      	lsls	r2, r2, #21
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	6fffffe8 	.word	0x6fffffe8

08000d28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	055b      	lsls	r3, r3, #21
 8000d38:	401a      	ands	r2, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	055b      	lsls	r3, r3, #21
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d101      	bne.n	8000d46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d101      	bne.n	8000d68 <LL_ADC_IsEnabled+0x18>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <LL_ADC_IsEnabled+0x1a>
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d101      	bne.n	8000d8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9c:	231f      	movs	r3, #31
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e1a0      	b.n	80010fc <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10a      	bne.n	8000dd8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff fa99 	bl	80002fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2254      	movs	r2, #84	; 0x54
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ffa3 	bl	8000d28 <LL_ADC_IsInternalRegulatorEnabled>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d114      	bne.n	8000e10 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff ff88 	bl	8000d00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000df0:	4bc4      	ldr	r3, [pc, #784]	; (8001104 <HAL_ADC_Init+0x370>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	49c4      	ldr	r1, [pc, #784]	; (8001108 <HAL_ADC_Init+0x374>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff f986 	bl	8000108 <__udivsi3>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e02:	e002      	b.n	8000e0a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f9      	bne.n	8000e04 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff ff87 	bl	8000d28 <LL_ADC_IsInternalRegulatorEnabled>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	2210      	movs	r2, #16
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2e:	2201      	movs	r2, #1
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e36:	231f      	movs	r3, #31
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff ff95 	bl	8000d72 <LL_ADC_REG_IsConversionOngoing>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	2210      	movs	r2, #16
 8000e52:	4013      	ands	r3, r2
 8000e54:	d000      	beq.n	8000e58 <HAL_ADC_Init+0xc4>
 8000e56:	e144      	b.n	80010e2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d000      	beq.n	8000e60 <HAL_ADC_Init+0xcc>
 8000e5e:	e140      	b.n	80010e2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	4aa9      	ldr	r2, [pc, #676]	; (800110c <HAL_ADC_Init+0x378>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	2202      	movs	r2, #2
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff6b 	bl	8000d50 <LL_ADC_IsEnabled>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d000      	beq.n	8000e80 <HAL_ADC_Init+0xec>
 8000e7e:	e0ad      	b.n	8000fdc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e1b      	ldrb	r3, [r3, #24]
 8000e88:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e8a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e5b      	ldrb	r3, [r3, #25]
 8000e90:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e92:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e9b      	ldrb	r3, [r3, #26]
 8000e98:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e9a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_ADC_Init+0x116>
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	015b      	lsls	r3, r3, #5
 8000ea8:	e000      	b.n	8000eac <HAL_ADC_Init+0x118>
 8000eaa:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000eac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000eb2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	da04      	bge.n	8000ec6 <HAL_ADC_Init+0x132>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	e001      	b.n	8000eca <HAL_ADC_Init+0x136>
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000eca:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	212c      	movs	r1, #44	; 0x2c
 8000ed0:	5c5b      	ldrb	r3, [r3, r1]
 8000ed2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ed4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	5c9b      	ldrb	r3, [r3, r2]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d115      	bne.n	8000f12 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7e9b      	ldrb	r3, [r3, #26]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d105      	bne.n	8000efa <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	0252      	lsls	r2, r2, #9
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	e00b      	b.n	8000f12 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	2220      	movs	r2, #32
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1e:	23e0      	movs	r3, #224	; 0xe0
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4a76      	ldr	r2, [pc, #472]	; (8001110 <HAL_ADC_Init+0x37c>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	0f9b      	lsrs	r3, r3, #30
 8000f4c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f52:	4313      	orrs	r3, r2
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	223c      	movs	r2, #60	; 0x3c
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d111      	bne.n	8000f88 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	0f9b      	lsrs	r3, r3, #30
 8000f6a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f70:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f76:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f7c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	2201      	movs	r2, #1
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4a61      	ldr	r2, [pc, #388]	; (8001114 <HAL_ADC_Init+0x380>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	0019      	movs	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	23c0      	movs	r3, #192	; 0xc0
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d018      	beq.n	8000fdc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d012      	beq.n	8000fdc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d00c      	beq.n	8000fdc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000fc2:	4b55      	ldr	r3, [pc, #340]	; (8001118 <HAL_ADC_Init+0x384>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a55      	ldr	r2, [pc, #340]	; (800111c <HAL_ADC_Init+0x388>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	0019      	movs	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	23f0      	movs	r3, #240	; 0xf0
 8000fd2:	039b      	lsls	r3, r3, #14
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	4b50      	ldr	r3, [pc, #320]	; (8001118 <HAL_ADC_Init+0x384>)
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f7ff fdf7 	bl	8000bda <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff4:	494a      	ldr	r1, [pc, #296]	; (8001120 <HAL_ADC_Init+0x38c>)
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	f7ff fdef 	bl	8000bda <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2110      	movs	r1, #16
 8001010:	4249      	negs	r1, r1
 8001012:	430a      	orrs	r2, r1
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
 8001016:	e03a      	b.n	800108e <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	429a      	cmp	r2, r3
 8001022:	d134      	bne.n	800108e <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	e00c      	b.n	8001044 <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	40da      	lsrs	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	220f      	movs	r2, #15
 8001038:	4013      	ands	r3, r2
 800103a:	2b0f      	cmp	r3, #15
 800103c:	d006      	beq.n	800104c <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b07      	cmp	r3, #7
 8001048:	d9ef      	bls.n	800102a <HAL_ADC_Init+0x296>
 800104a:	e000      	b.n	800104e <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 800104c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d109      	bne.n	8001068 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2110      	movs	r1, #16
 8001060:	4249      	negs	r1, r1
 8001062:	430a      	orrs	r2, r1
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
 8001066:	e012      	b.n	800108e <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	3b01      	subs	r3, #1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	221c      	movs	r2, #28
 8001078:	4013      	ands	r3, r2
 800107a:	2210      	movs	r2, #16
 800107c:	4252      	negs	r2, r2
 800107e:	409a      	lsls	r2, r3
 8001080:	0011      	movs	r1, r2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff fdbd 	bl	8000c14 <LL_ADC_GetSamplingTimeCommonChannels>
 800109a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d10b      	bne.n	80010bc <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	2203      	movs	r2, #3
 80010b0:	4393      	bics	r3, r2
 80010b2:	2201      	movs	r2, #1
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010ba:	e01c      	b.n	80010f6 <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	2212      	movs	r2, #18
 80010c2:	4393      	bics	r3, r2
 80010c4:	2210      	movs	r2, #16
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	2201      	movs	r2, #1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80010d8:	231f      	movs	r3, #31
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010e0:	e009      	b.n	80010f6 <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	2210      	movs	r2, #16
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010ee:	231f      	movs	r3, #31
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80010f6:	231f      	movs	r3, #31
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b008      	add	sp, #32
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	00030d40 	.word	0x00030d40
 800110c:	fffffefd 	.word	0xfffffefd
 8001110:	fffe0201 	.word	0xfffe0201
 8001114:	1ffffc02 	.word	0x1ffffc02
 8001118:	40012708 	.word	0x40012708
 800111c:	ffc3ffff 	.word	0xffc3ffff
 8001120:	7fffff04 	.word	0x7fffff04

08001124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112e:	2317      	movs	r3, #23
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2254      	movs	r2, #84	; 0x54
 800113e:	5c9b      	ldrb	r3, [r3, r2]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x24>
 8001144:	2302      	movs	r3, #2
 8001146:	e1be      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x3a2>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2254      	movs	r2, #84	; 0x54
 800114c:	2101      	movs	r1, #1
 800114e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff fe0c 	bl	8000d72 <LL_ADC_REG_IsConversionOngoing>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d000      	beq.n	8001160 <HAL_ADC_ConfigChannel+0x3c>
 800115e:	e1a1      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d100      	bne.n	800116a <HAL_ADC_ConfigChannel+0x46>
 8001168:	e152      	b.n	8001410 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	429a      	cmp	r2, r3
 8001174:	d004      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800117a:	4ac2      	ldr	r2, [pc, #776]	; (8001484 <HAL_ADC_ConfigChannel+0x360>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d108      	bne.n	8001192 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0019      	movs	r1, r3
 800118a:	0010      	movs	r0, r2
 800118c:	f7ff fd79 	bl	8000c82 <LL_ADC_REG_SetSequencerChAdd>
 8001190:	e0ed      	b.n	800136e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	211f      	movs	r1, #31
 800119c:	400b      	ands	r3, r1
 800119e:	210f      	movs	r1, #15
 80011a0:	4099      	lsls	r1, r3
 80011a2:	000b      	movs	r3, r1
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4013      	ands	r3, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	0a5b      	lsrs	r3, r3, #9
 80011b2:	d105      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x9c>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0e9b      	lsrs	r3, r3, #26
 80011ba:	221f      	movs	r2, #31
 80011bc:	4013      	ands	r3, r2
 80011be:	e0bc      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	d000      	beq.n	80011cc <HAL_ADC_ConfigChannel+0xa8>
 80011ca:	e0b5      	b.n	8001338 <HAL_ADC_ConfigChannel+0x214>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2202      	movs	r2, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d000      	beq.n	80011d8 <HAL_ADC_ConfigChannel+0xb4>
 80011d6:	e0ad      	b.n	8001334 <HAL_ADC_ConfigChannel+0x210>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2204      	movs	r2, #4
 80011de:	4013      	ands	r3, r2
 80011e0:	d000      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0xc0>
 80011e2:	e0a5      	b.n	8001330 <HAL_ADC_ConfigChannel+0x20c>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2208      	movs	r2, #8
 80011ea:	4013      	ands	r3, r2
 80011ec:	d000      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0xcc>
 80011ee:	e09d      	b.n	800132c <HAL_ADC_ConfigChannel+0x208>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2210      	movs	r2, #16
 80011f6:	4013      	ands	r3, r2
 80011f8:	d000      	beq.n	80011fc <HAL_ADC_ConfigChannel+0xd8>
 80011fa:	e095      	b.n	8001328 <HAL_ADC_ConfigChannel+0x204>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2220      	movs	r2, #32
 8001202:	4013      	ands	r3, r2
 8001204:	d000      	beq.n	8001208 <HAL_ADC_ConfigChannel+0xe4>
 8001206:	e08d      	b.n	8001324 <HAL_ADC_ConfigChannel+0x200>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2240      	movs	r2, #64	; 0x40
 800120e:	4013      	ands	r3, r2
 8001210:	d000      	beq.n	8001214 <HAL_ADC_ConfigChannel+0xf0>
 8001212:	e085      	b.n	8001320 <HAL_ADC_ConfigChannel+0x1fc>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	4013      	ands	r3, r2
 800121c:	d000      	beq.n	8001220 <HAL_ADC_ConfigChannel+0xfc>
 800121e:	e07d      	b.n	800131c <HAL_ADC_ConfigChannel+0x1f8>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4013      	ands	r3, r2
 800122a:	d000      	beq.n	800122e <HAL_ADC_ConfigChannel+0x10a>
 800122c:	e074      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1f4>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4013      	ands	r3, r2
 8001238:	d000      	beq.n	800123c <HAL_ADC_ConfigChannel+0x118>
 800123a:	e06b      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1f0>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4013      	ands	r3, r2
 8001246:	d000      	beq.n	800124a <HAL_ADC_ConfigChannel+0x126>
 8001248:	e062      	b.n	8001310 <HAL_ADC_ConfigChannel+0x1ec>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4013      	ands	r3, r2
 8001254:	d000      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x134>
 8001256:	e059      	b.n	800130c <HAL_ADC_ConfigChannel+0x1e8>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	4013      	ands	r3, r2
 8001262:	d151      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1e4>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	019b      	lsls	r3, r3, #6
 800126c:	4013      	ands	r3, r2
 800126e:	d149      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1e0>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4013      	ands	r3, r2
 800127a:	d141      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1dc>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	4013      	ands	r3, r2
 8001286:	d139      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d8>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	4013      	ands	r3, r2
 8001292:	d131      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d129      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x1d0>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	02db      	lsls	r3, r3, #11
 80012a8:	4013      	ands	r3, r2
 80012aa:	d121      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1cc>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	4013      	ands	r3, r2
 80012b6:	d119      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x1c8>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	035b      	lsls	r3, r3, #13
 80012c0:	4013      	ands	r3, r2
 80012c2:	d111      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1c4>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	039b      	lsls	r3, r3, #14
 80012cc:	4013      	ands	r3, r2
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x1c0>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	03db      	lsls	r3, r3, #15
 80012d8:	4013      	ands	r3, r2
 80012da:	d001      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x1bc>
 80012dc:	2316      	movs	r3, #22
 80012de:	e02c      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012e0:	2300      	movs	r3, #0
 80012e2:	e02a      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012e4:	2315      	movs	r3, #21
 80012e6:	e028      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012e8:	2314      	movs	r3, #20
 80012ea:	e026      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012ec:	2313      	movs	r3, #19
 80012ee:	e024      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012f0:	2312      	movs	r3, #18
 80012f2:	e022      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012f4:	2311      	movs	r3, #17
 80012f6:	e020      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012f8:	2310      	movs	r3, #16
 80012fa:	e01e      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 80012fc:	230f      	movs	r3, #15
 80012fe:	e01c      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001300:	230e      	movs	r3, #14
 8001302:	e01a      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001304:	230d      	movs	r3, #13
 8001306:	e018      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001308:	230c      	movs	r3, #12
 800130a:	e016      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 800130c:	230b      	movs	r3, #11
 800130e:	e014      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001310:	230a      	movs	r3, #10
 8001312:	e012      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001314:	2309      	movs	r3, #9
 8001316:	e010      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001318:	2308      	movs	r3, #8
 800131a:	e00e      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 800131c:	2307      	movs	r3, #7
 800131e:	e00c      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001320:	2306      	movs	r3, #6
 8001322:	e00a      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001324:	2305      	movs	r3, #5
 8001326:	e008      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001328:	2304      	movs	r3, #4
 800132a:	e006      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 800132c:	2303      	movs	r3, #3
 800132e:	e004      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_ADC_ConfigChannel+0x216>
 8001338:	2300      	movs	r3, #0
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	6852      	ldr	r2, [r2, #4]
 800133e:	201f      	movs	r0, #31
 8001340:	4002      	ands	r2, r0
 8001342:	4093      	lsls	r3, r2
 8001344:	000a      	movs	r2, r1
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	d808      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	001a      	movs	r2, r3
 800136a:	f7ff fc6a 	bl	8000c42 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	001a      	movs	r2, r3
 800137c:	f7ff fca4 	bl	8000cc8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db00      	blt.n	800138a <HAL_ADC_ConfigChannel+0x266>
 8001388:	e096      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_ADC_ConfigChannel+0x364>)
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fc17 	bl	8000bc0 <LL_ADC_GetCommonPathInternalCh>
 8001392:	0003      	movs	r3, r0
 8001394:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a3c      	ldr	r2, [pc, #240]	; (800148c <HAL_ADC_ConfigChannel+0x368>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d123      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013a8:	d11e      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0412      	lsls	r2, r2, #16
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4a35      	ldr	r2, [pc, #212]	; (8001488 <HAL_ADC_ConfigChannel+0x364>)
 80013b4:	0019      	movs	r1, r3
 80013b6:	0010      	movs	r0, r2
 80013b8:	f7ff fbee 	bl	8000b98 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_ADC_ConfigChannel+0x36c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4934      	ldr	r1, [pc, #208]	; (8001494 <HAL_ADC_ConfigChannel+0x370>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7fe fea0 	bl	8000108 <__udivsi3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	001a      	movs	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	3301      	adds	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013e6:	e067      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2a      	ldr	r2, [pc, #168]	; (8001498 <HAL_ADC_ConfigChannel+0x374>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d162      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	03db      	lsls	r3, r3, #15
 80013f8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013fa:	d15d      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	03d2      	lsls	r2, r2, #15
 8001402:	4313      	orrs	r3, r2
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <HAL_ADC_ConfigChannel+0x364>)
 8001406:	0019      	movs	r1, r3
 8001408:	0010      	movs	r0, r2
 800140a:	f7ff fbc5 	bl	8000b98 <LL_ADC_SetCommonPathInternalCh>
 800140e:	e053      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	061b      	lsls	r3, r3, #24
 8001418:	429a      	cmp	r2, r3
 800141a:	d004      	beq.n	8001426 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_ADC_ConfigChannel+0x360>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d107      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	0019      	movs	r1, r3
 8001430:	0010      	movs	r0, r2
 8001432:	f7ff fc37 	bl	8000ca4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da3c      	bge.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_ADC_ConfigChannel+0x364>)
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fbbd 	bl	8000bc0 <LL_ADC_GetCommonPathInternalCh>
 8001446:	0003      	movs	r3, r0
 8001448:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_ADC_ConfigChannel+0x368>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d108      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <HAL_ADC_ConfigChannel+0x378>)
 8001458:	4013      	ands	r3, r2
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <HAL_ADC_ConfigChannel+0x364>)
 800145c:	0019      	movs	r1, r3
 800145e:	0010      	movs	r0, r2
 8001460:	f7ff fb9a 	bl	8000b98 <LL_ADC_SetCommonPathInternalCh>
 8001464:	e028      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_ADC_ConfigChannel+0x374>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d123      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_ADC_ConfigChannel+0x37c>)
 8001474:	4013      	ands	r3, r2
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_ADC_ConfigChannel+0x364>)
 8001478:	0019      	movs	r1, r3
 800147a:	0010      	movs	r0, r2
 800147c:	f7ff fb8c 	bl	8000b98 <LL_ADC_SetCommonPathInternalCh>
 8001480:	e01a      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x394>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	80000004 	.word	0x80000004
 8001488:	40012708 	.word	0x40012708
 800148c:	a4000200 	.word	0xa4000200
 8001490:	20000000 	.word	0x20000000
 8001494:	00030d40 	.word	0x00030d40
 8001498:	a8000400 	.word	0xa8000400
 800149c:	ff7fffff 	.word	0xff7fffff
 80014a0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	2220      	movs	r2, #32
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014b0:	2317      	movs	r3, #23
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2254      	movs	r2, #84	; 0x54
 80014bc:	2100      	movs	r1, #0
 80014be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80014c0:	2317      	movs	r3, #23
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b006      	add	sp, #24
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	0002      	movs	r2, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	d828      	bhi.n	8001538 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e6:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <__NVIC_SetPriority+0xd4>)
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	33c0      	adds	r3, #192	; 0xc0
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	589b      	ldr	r3, [r3, r2]
 80014f6:	1dfa      	adds	r2, r7, #7
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	0011      	movs	r1, r2
 80014fc:	2203      	movs	r2, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	21ff      	movs	r1, #255	; 0xff
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	22ff      	movs	r2, #255	; 0xff
 8001514:	401a      	ands	r2, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0018      	movs	r0, r3
 800151c:	2303      	movs	r3, #3
 800151e:	4003      	ands	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	481f      	ldr	r0, [pc, #124]	; (80015a4 <__NVIC_SetPriority+0xd4>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	430a      	orrs	r2, r1
 8001530:	33c0      	adds	r3, #192	; 0xc0
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001536:	e031      	b.n	800159c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <__NVIC_SetPriority+0xd8>)
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	0019      	movs	r1, r3
 8001540:	230f      	movs	r3, #15
 8001542:	400b      	ands	r3, r1
 8001544:	3b08      	subs	r3, #8
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3306      	adds	r3, #6
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	3304      	adds	r3, #4
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1dfa      	adds	r2, r7, #7
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	0011      	movs	r1, r2
 8001558:	2203      	movs	r2, #3
 800155a:	400a      	ands	r2, r1
 800155c:	00d2      	lsls	r2, r2, #3
 800155e:	21ff      	movs	r1, #255	; 0xff
 8001560:	4091      	lsls	r1, r2
 8001562:	000a      	movs	r2, r1
 8001564:	43d2      	mvns	r2, r2
 8001566:	401a      	ands	r2, r3
 8001568:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	019b      	lsls	r3, r3, #6
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	401a      	ands	r2, r3
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	0018      	movs	r0, r3
 8001578:	2303      	movs	r3, #3
 800157a:	4003      	ands	r3, r0
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <__NVIC_SetPriority+0xd8>)
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	001c      	movs	r4, r3
 8001588:	230f      	movs	r3, #15
 800158a:	4023      	ands	r3, r4
 800158c:	3b08      	subs	r3, #8
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	430a      	orrs	r2, r1
 8001592:	3306      	adds	r3, #6
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	18c3      	adds	r3, r0, r3
 8001598:	3304      	adds	r3, #4
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b003      	add	sp, #12
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1e5a      	subs	r2, r3, #1
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	045b      	lsls	r3, r3, #17
 80015bc:	429a      	cmp	r2, r3
 80015be:	d301      	bcc.n	80015c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c0:	2301      	movs	r3, #1
 80015c2:	e010      	b.n	80015e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <SysTick_Config+0x44>)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	3a01      	subs	r2, #1
 80015ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015cc:	2301      	movs	r3, #1
 80015ce:	425b      	negs	r3, r3
 80015d0:	2103      	movs	r1, #3
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff ff7c 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x44>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x44>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	210f      	movs	r1, #15
 8001600:	187b      	adds	r3, r7, r1
 8001602:	1c02      	adds	r2, r0, #0
 8001604:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	187b      	adds	r3, r7, r1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b25b      	sxtb	r3, r3
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <__NVIC_SetPriority>
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b004      	add	sp, #16
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ffbf 	bl	80015ac <SysTick_Config>
 800162e:	0003      	movs	r3, r0
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001646:	e153      	b.n	80018f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4091      	lsls	r1, r2
 8001652:	000a      	movs	r2, r1
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <HAL_GPIO_Init+0x28>
 800165e:	e144      	b.n	80018ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x38>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b12      	cmp	r3, #18
 800166e:	d125      	bne.n	80016bc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	58d3      	ldr	r3, [r2, r3]
 800167c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2207      	movs	r2, #7
 8001682:	4013      	ands	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	409a      	lsls	r2, r3
 800168a:	0013      	movs	r3, r2
 800168c:	43da      	mvns	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	220f      	movs	r2, #15
 800169a:	401a      	ands	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2107      	movs	r1, #7
 80016a0:	400b      	ands	r3, r1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	6979      	ldr	r1, [r7, #20]
 80016ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	409a      	lsls	r2, r3
 80016ca:	0013      	movs	r3, r2
 80016cc:	43da      	mvns	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	4013      	ands	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	401a      	ands	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d00b      	beq.n	8001710 <HAL_GPIO_Init+0xd8>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001704:	2b11      	cmp	r3, #17
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	409a      	lsls	r2, r3
 800171e:	0013      	movs	r3, r2
 8001720:	43da      	mvns	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4013      	ands	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	43da      	mvns	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	4013      	ands	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	2201      	movs	r2, #1
 800175e:	401a      	ands	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d017      	beq.n	80017aa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	43da      	mvns	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	4013      	ands	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	055b      	lsls	r3, r3, #21
 80017b2:	4013      	ands	r3, r2
 80017b4:	d100      	bne.n	80017b8 <HAL_GPIO_Init+0x180>
 80017b6:	e098      	b.n	80018ea <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80017b8:	4a53      	ldr	r2, [pc, #332]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3318      	adds	r3, #24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	589b      	ldr	r3, [r3, r2]
 80017c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4013      	ands	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	220f      	movs	r2, #15
 80017d0:	409a      	lsls	r2, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	43da      	mvns	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4013      	ands	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	23a0      	movs	r3, #160	; 0xa0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x1e2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_GPIO_Init+0x2d4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x1de>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a47      	ldr	r2, [pc, #284]	; (8001910 <HAL_GPIO_Init+0x2d8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x1da>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_GPIO_Init+0x2dc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x1d6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a45      	ldr	r2, [pc, #276]	; (8001918 <HAL_GPIO_Init+0x2e0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x1d2>
 8001806:	2304      	movs	r3, #4
 8001808:	e008      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 800180a:	2305      	movs	r3, #5
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 800181a:	2300      	movs	r3, #0
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	2103      	movs	r1, #3
 8001820:	400a      	ands	r2, r1
 8001822:	00d2      	lsls	r2, r2, #3
 8001824:	4093      	lsls	r3, r2
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800182c:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3318      	adds	r3, #24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800183a:	4a33      	ldr	r2, [pc, #204]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	58d3      	ldr	r3, [r2, r3]
 8001840:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43da      	mvns	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	4013      	ands	r3, r2
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001860:	4929      	ldr	r1, [pc, #164]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800186a:	2384      	movs	r3, #132	; 0x84
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43da      	mvns	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	4013      	ands	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	029b      	lsls	r3, r3, #10
 8001882:	4013      	ands	r3, r2
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800188e:	491e      	ldr	r1, [pc, #120]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001890:	2284      	movs	r2, #132	; 0x84
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43da      	mvns	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	4013      	ands	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	035b      	lsls	r3, r3, #13
 80018ae:	4013      	ands	r3, r2
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43da      	mvns	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	039b      	lsls	r3, r3, #14
 80018d8:	4013      	ands	r3, r2
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	3301      	adds	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	40da      	lsrs	r2, r3
 80018f8:	1e13      	subs	r3, r2, #0
 80018fa:	d000      	beq.n	80018fe <HAL_GPIO_Init+0x2c6>
 80018fc:	e6a4      	b.n	8001648 <HAL_GPIO_Init+0x10>
  }
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b006      	add	sp, #24
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021800 	.word	0x40021800
 800190c:	50000400 	.word	0x50000400
 8001910:	50000800 	.word	0x50000800
 8001914:	50000c00 	.word	0x50000c00
 8001918:	50001400 	.word	0x50001400

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	0008      	movs	r0, r1
 8001926:	0011      	movs	r1, r2
 8001928:	1cbb      	adds	r3, r7, #2
 800192a:	1c02      	adds	r2, r0, #0
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	1c7b      	adds	r3, r7, #1
 8001930:	1c0a      	adds	r2, r1, #0
 8001932:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001934:	1c7b      	adds	r3, r7, #1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193c:	1cbb      	adds	r3, r7, #2
 800193e:	881a      	ldrh	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001944:	e003      	b.n	800194e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001946:	1cbb      	adds	r3, r7, #2
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1e5      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d100      	bne.n	8001976 <HAL_RCC_OscConfig+0x1e>
 8001974:	e06f      	b.n	8001a56 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001976:	4bc4      	ldr	r3, [pc, #784]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2238      	movs	r2, #56	; 0x38
 800197c:	4013      	ands	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d10b      	bne.n	800199e <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4bc0      	ldr	r3, [pc, #768]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	4013      	ands	r3, r2
 8001990:	d061      	beq.n	8001a56 <HAL_RCC_OscConfig+0xfe>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d15d      	bne.n	8001a56 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1cb      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_OscConfig+0x62>
 80019aa:	4bb7      	ldr	r3, [pc, #732]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4bb6      	ldr	r3, [pc, #728]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0249      	lsls	r1, r1, #9
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e020      	b.n	80019fc <HAL_RCC_OscConfig+0xa4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	23a0      	movs	r3, #160	; 0xa0
 80019c0:	02db      	lsls	r3, r3, #11
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d10e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x8c>
 80019c6:	4bb0      	ldr	r3, [pc, #704]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4baf      	ldr	r3, [pc, #700]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	02c9      	lsls	r1, r1, #11
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	4bac      	ldr	r3, [pc, #688]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4bab      	ldr	r3, [pc, #684]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0249      	lsls	r1, r1, #9
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xa4>
 80019e4:	4ba8      	ldr	r3, [pc, #672]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4ba7      	ldr	r3, [pc, #668]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019ea:	49a8      	ldr	r1, [pc, #672]	; (8001c8c <HAL_RCC_OscConfig+0x334>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	4ba5      	ldr	r3, [pc, #660]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4ba4      	ldr	r3, [pc, #656]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 80019f6:	49a6      	ldr	r1, [pc, #664]	; (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d014      	beq.n	8001a2e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8be 	bl	8000b84 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f8b9 	bl	8000b84 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e18a      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a20:	4b99      	ldr	r3, [pc, #612]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0xb6>
 8001a2c:	e013      	b.n	8001a56 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8a9 	bl	8000b84 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff f8a4 	bl	8000b84 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e175      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4a:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <HAL_RCC_OscConfig+0x10a>
 8001a60:	e08c      	b.n	8001b7c <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2238      	movs	r2, #56	; 0x38
 8001a68:	4013      	ands	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d135      	bne.n	8001ade <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a72:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x132>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e155      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a81      	ldr	r2, [pc, #516]	; (8001c94 <HAL_RCC_OscConfig+0x33c>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d112      	bne.n	8001acc <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aa6:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7b      	ldr	r2, [pc, #492]	; (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001aba:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0adb      	lsrs	r3, r3, #11
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x344>)
 8001ac6:	40da      	lsrs	r2, r3
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0x348>)
 8001aca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001acc:	4b75      	ldr	r3, [pc, #468]	; (8001ca4 <HAL_RCC_OscConfig+0x34c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7fe fffd 	bl	8000ad0 <HAL_InitTick>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d050      	beq.n	8001b7c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e12b      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d030      	beq.n	8001b48 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ae6:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	4b64      	ldr	r3, [pc, #400]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0049      	lsls	r1, r1, #1
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f83c 	bl	8000b84 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff f837 	bl	8000b84 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e108      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b24:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_RCC_OscConfig+0x33c>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	021a      	lsls	r2, r3, #8
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	e019      	b.n	8001b7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001b48:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b4e:	4956      	ldr	r1, [pc, #344]	; (8001ca8 <HAL_RCC_OscConfig+0x350>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f816 	bl	8000b84 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f811 	bl	8000b84 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0e2      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b70:	4b45      	ldr	r3, [pc, #276]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2208      	movs	r2, #8
 8001b82:	4013      	ands	r3, r2
 8001b84:	d047      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2238      	movs	r2, #56	; 0x38
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b18      	cmp	r3, #24
 8001b90:	d10a      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d03c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2be>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d138      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0c6      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe ffe2 	bl	8000b84 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7fe ffdd 	bl	8000b84 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0ae      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d0f1      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x26e>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7fe ffc8 	bl	8000b84 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7fe ffc3 	bl	8000b84 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e094      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f1      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2ca>
 8001c20:	e088      	b.n	8001d34 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	230f      	movs	r3, #15
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2238      	movs	r2, #56	; 0x38
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d100      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2ea>
 8001c40:	e078      	b.n	8001d34 <HAL_RCC_OscConfig+0x3dc>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d000      	beq.n	8001c4c <HAL_RCC_OscConfig+0x2f4>
 8001c4a:	e073      	b.n	8001d34 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e072      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x30e>
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c64:	e02e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d11e      	bne.n	8001cac <HAL_RCC_OscConfig+0x354>
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c74:	2104      	movs	r1, #4
 8001c76:	430a      	orrs	r2, r1
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c7e:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <HAL_RCC_OscConfig+0x330>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	430a      	orrs	r2, r1
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c86:	e01d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	fffeffff 	.word	0xfffeffff
 8001c90:	fffbffff 	.word	0xfffbffff
 8001c94:	ffff80ff 	.word	0xffff80ff
 8001c98:	ffffc7ff 	.word	0xffffc7ff
 8001c9c:	02dc6c00 	.word	0x02dc6c00
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	fffffeff 	.word	0xfffffeff
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d014      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7fe ff5a 	bl	8000b84 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7fe ff55 	bl	8000b84 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x3ec>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e025      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x37e>
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff45 	bl	8000b84 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001cfe:	e009      	b.n	8001d14 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff40 	bl	8000b84 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <HAL_RCC_OscConfig+0x3ec>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e010      	b.n	8001d36 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_RCC_OscConfig+0x3e8>)
 8001d2e:	4906      	ldr	r1, [pc, #24]	; (8001d48 <HAL_RCC_OscConfig+0x3f0>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b006      	add	sp, #24
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	40021000 	.word	0x40021000
 8001d44:	00001388 	.word	0x00001388
 8001d48:	efffffff 	.word	0xefffffff

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0e9      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2207      	movs	r2, #7
 8001d66:	4013      	ands	r3, r2
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d91e      	bls.n	8001dac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2207      	movs	r2, #7
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d80:	f7fe ff00 	bl	8000b84 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8a:	f7fe fefb 	bl	8000b84 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a6a      	ldr	r2, [pc, #424]	; (8001f40 <HAL_RCC_ClockConfig+0x1f4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0ca      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2202      	movs	r2, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	d017      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dc0:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <HAL_RCC_ClockConfig+0x1fc>)
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	21b0      	movs	r1, #176	; 0xb0
 8001dcc:	0109      	lsls	r1, r1, #4
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_ClockConfig+0x200>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d055      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001df0:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	221c      	movs	r2, #28
 8001df6:	4393      	bics	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	d11f      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e08b      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d113      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e07f      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e3c:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d108      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e074      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e06d      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e58:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	4393      	bics	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7fe fe8a 	bl	8000b84 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e76:	f7fe fe85 	bl	8000b84 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a2f      	ldr	r2, [pc, #188]	; (8001f40 <HAL_RCC_ClockConfig+0x1f4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e054      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2238      	movs	r2, #56	; 0x38
 8001e90:	401a      	ands	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1ec      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d21e      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe62 	bl	8000b84 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7fe fe5d 	bl	8000b84 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_RCC_ClockConfig+0x1f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e02c      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2204      	movs	r2, #4
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_RCC_ClockConfig+0x204>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f06:	f000 f82b 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f0a:	0001      	movs	r1, r0
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	220f      	movs	r2, #15
 8001f14:	401a      	ands	r2, r3
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_RCC_ClockConfig+0x208>)
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	58d3      	ldr	r3, [r2, r3]
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	4013      	ands	r3, r2
 8001f20:	000a      	movs	r2, r1
 8001f22:	40da      	lsrs	r2, r3
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCC_ClockConfig+0x20c>)
 8001f26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_RCC_ClockConfig+0x210>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe fdcf 	bl	8000ad0 <HAL_InitTick>
 8001f32:	0003      	movs	r3, r0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	00001388 	.word	0x00001388
 8001f44:	40021000 	.word	0x40021000
 8001f48:	ffff84ff 	.word	0xffff84ff
 8001f4c:	fffff0ff 	.word	0xfffff0ff
 8001f50:	ffff8fff 	.word	0xffff8fff
 8001f54:	08003620 	.word	0x08003620
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2238      	movs	r2, #56	; 0x38
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d10f      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0adb      	lsrs	r3, r3, #11
 8001f76:	2207      	movs	r2, #7
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	0013      	movs	r3, r2
 8001f80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f82:	6839      	ldr	r1, [r7, #0]
 8001f84:	4815      	ldr	r0, [pc, #84]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x7c>)
 8001f86:	f7fe f8bf 	bl	8000108 <__udivsi3>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	e01e      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2238      	movs	r2, #56	; 0x38
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x80>)
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2238      	movs	r2, #56	; 0x38
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d103      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2238      	movs	r2, #56	; 0x38
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b18      	cmp	r3, #24
 8001fc0:	d103      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fc2:	23fa      	movs	r3, #250	; 0xfa
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	e001      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001fce:	687b      	ldr	r3, [r7, #4]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	02dc6c00 	.word	0x02dc6c00
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001ffc:	f7ff fff2 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002000:	0001      	movs	r1, r0
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0b1b      	lsrs	r3, r3, #12
 8002008:	2207      	movs	r2, #7
 800200a:	401a      	ands	r2, r3
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	58d3      	ldr	r3, [r2, r3]
 8002012:	221f      	movs	r2, #31
 8002014:	4013      	ands	r3, r2
 8002016:	40d9      	lsrs	r1, r3
 8002018:	000b      	movs	r3, r1
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	08003660 	.word	0x08003660

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002030:	2313      	movs	r3, #19
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002038:	2312      	movs	r3, #18
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d100      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800204c:	e079      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2011      	movs	r0, #17
 8002050:	183b      	adds	r3, r7, r0
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	055b      	lsls	r3, r3, #21
 800205e:	4013      	ands	r3, r2
 8002060:	d110      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002066:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	430a      	orrs	r2, r1
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002070:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	183b      	adds	r3, r7, r0
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002084:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002088:	23c0      	movs	r3, #192	; 0xc0
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d014      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	430a      	orrs	r2, r1
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020bc:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020be:	494c      	ldr	r1, [pc, #304]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d016      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fd57 	bl	8000b84 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020da:	e00c      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fd52 	bl	8000b84 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d904      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80020ec:	2313      	movs	r3, #19
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2203      	movs	r2, #3
 80020f2:	701a      	strb	r2, [r3, #0]
          break;
 80020f4:	e004      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0ed      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002100:	2313      	movs	r3, #19
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	4a37      	ldr	r2, [pc, #220]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800211a:	430a      	orrs	r2, r1
 800211c:	65da      	str	r2, [r3, #92]	; 0x5c
 800211e:	e005      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	2312      	movs	r3, #18
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2213      	movs	r2, #19
 8002126:	18ba      	adds	r2, r7, r2
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212c:	2311      	movs	r3, #17
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800213a:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800213c:	492e      	ldr	r1, [pc, #184]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	400a      	ands	r2, r1
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	2203      	movs	r2, #3
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800215c:	430a      	orrs	r2, r1
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2240      	movs	r2, #64	; 0x40
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	4a23      	ldr	r2, [pc, #140]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800217a:	430a      	orrs	r2, r1
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	01db      	lsls	r3, r3, #7
 8002186:	4013      	ands	r3, r2
 8002188:	d008      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	0899      	lsrs	r1, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002198:	430a      	orrs	r2, r1
 800219a:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da09      	bge.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	22e0      	movs	r2, #224	; 0xe0
 80021ca:	4393      	bics	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80021d8:	2312      	movs	r3, #18
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000
 80021ec:	fffffcff 	.word	0xfffffcff
 80021f0:	fffeffff 	.word	0xfffeffff
 80021f4:	00001388 	.word	0x00001388
 80021f8:	efffffff 	.word	0xefffffff
 80021fc:	ffffcfff 	.word	0xffffcfff
 8002200:	ffff3fff 	.word	0xffff3fff

08002204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0a8      	b.n	8002368 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	2382      	movs	r3, #130	; 0x82
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	429a      	cmp	r2, r3
 8002228:	d009      	beq.n	800223e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
 8002230:	e005      	b.n	800223e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	225d      	movs	r2, #93	; 0x5d
 8002248:	5c9b      	ldrb	r3, [r3, r2]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	225c      	movs	r2, #92	; 0x5c
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	0018      	movs	r0, r3
 800225c:	f7fe f992 	bl	8000584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	225d      	movs	r2, #93	; 0x5d
 8002264:	2102      	movs	r1, #2
 8002266:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	23e0      	movs	r3, #224	; 0xe0
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	429a      	cmp	r2, r3
 8002282:	d902      	bls.n	800228a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e002      	b.n	8002290 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	015b      	lsls	r3, r3, #5
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	23f0      	movs	r3, #240	; 0xf0
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	429a      	cmp	r2, r3
 800229a:	d008      	beq.n	80022ae <HAL_SPI_Init+0xaa>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	23e0      	movs	r3, #224	; 0xe0
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d002      	beq.n	80022ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	2382      	movs	r3, #130	; 0x82
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	2384      	movs	r3, #132	; 0x84
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	400b      	ands	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2102      	movs	r1, #2
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2101      	movs	r1, #1
 80022d4:	400b      	ands	r3, r1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6999      	ldr	r1, [r3, #24]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	400b      	ands	r3, r1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2138      	movs	r1, #56	; 0x38
 80022ea:	400b      	ands	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	400b      	ands	r3, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	0011      	movs	r1, r2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	401a      	ands	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	2204      	movs	r2, #4
 8002314:	401a      	ands	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2110      	movs	r1, #16
 800231c:	400b      	ands	r3, r1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	2108      	movs	r1, #8
 8002326:	400b      	ands	r3, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	23f0      	movs	r3, #240	; 0xf0
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	400b      	ands	r3, r1
 8002334:	431a      	orrs	r2, r3
 8002336:	0011      	movs	r1, r2
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	015b      	lsls	r3, r3, #5
 800233e:	401a      	ands	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4907      	ldr	r1, [pc, #28]	; (8002370 <HAL_SPI_Init+0x16c>)
 8002354:	400a      	ands	r2, r1
 8002356:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	225d      	movs	r2, #93	; 0x5d
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b004      	add	sp, #16
 800236e:	bd80      	pop	{r7, pc}
 8002370:	fffff7ff 	.word	0xfffff7ff

08002374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e04a      	b.n	800241c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223d      	movs	r2, #61	; 0x3d
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223c      	movs	r2, #60	; 0x3c
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe fa79 	bl	8000894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223d      	movs	r2, #61	; 0x3d
 80023a6:	2102      	movs	r1, #2
 80023a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f000 f935 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2248      	movs	r2, #72	; 0x48
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223e      	movs	r2, #62	; 0x3e
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223f      	movs	r2, #63	; 0x3f
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2240      	movs	r2, #64	; 0x40
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2241      	movs	r2, #65	; 0x41
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2242      	movs	r2, #66	; 0x42
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2243      	movs	r2, #67	; 0x43
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2244      	movs	r2, #68	; 0x44
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2245      	movs	r2, #69	; 0x45
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2246      	movs	r2, #70	; 0x46
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2247      	movs	r2, #71	; 0x47
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	223d      	movs	r2, #61	; 0x3d
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002430:	2317      	movs	r3, #23
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	223c      	movs	r2, #60	; 0x3c
 800243c:	5c9b      	ldrb	r3, [r3, r2]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002442:	2302      	movs	r3, #2
 8002444:	e0e5      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	223c      	movs	r2, #60	; 0x3c
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b14      	cmp	r3, #20
 8002452:	d900      	bls.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002454:	e0d1      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	0011      	movs	r1, r2
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f946 	bl	80026fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2108      	movs	r1, #8
 800247c:	430a      	orrs	r2, r1
 800247e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6999      	ldr	r1, [r3, #24]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	619a      	str	r2, [r3, #24]
      break;
 80024a2:	e0af      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 f9a5 	bl	80027fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0109      	lsls	r1, r1, #4
 80024c0:	430a      	orrs	r2, r1
 80024c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4954      	ldr	r1, [pc, #336]	; (8002620 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6999      	ldr	r1, [r3, #24]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	619a      	str	r2, [r3, #24]
      break;
 80024e8:	e08c      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fa00 	bl	80028f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2108      	movs	r1, #8
 8002504:	430a      	orrs	r2, r1
 8002506:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2104      	movs	r1, #4
 8002514:	438a      	bics	r2, r1
 8002516:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69d9      	ldr	r1, [r3, #28]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	61da      	str	r2, [r3, #28]
      break;
 800252a:	e06b      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	0011      	movs	r1, r2
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fa61 	bl	80029fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0109      	lsls	r1, r1, #4
 8002548:	430a      	orrs	r2, r1
 800254a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4932      	ldr	r1, [pc, #200]	; (8002620 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002558:	400a      	ands	r2, r1
 800255a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69d9      	ldr	r1, [r3, #28]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]
      break;
 8002570:	e048      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 faa2 	bl	8002ac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2108      	movs	r1, #8
 800258c:	430a      	orrs	r2, r1
 800258e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2104      	movs	r1, #4
 800259c:	438a      	bics	r2, r1
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025b2:	e027      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fadb 	bl	8002b78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	0109      	lsls	r1, r1, #4
 80025d0:	430a      	orrs	r2, r1
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4910      	ldr	r1, [pc, #64]	; (8002620 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025f8:	e004      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80025fa:	2317      	movs	r3, #23
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
      break;
 8002602:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	223c      	movs	r2, #60	; 0x3c
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

  return status;
 800260c:	2317      	movs	r3, #23
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b006      	add	sp, #24
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	08003680 	.word	0x08003680
 8002620:	fffffbff 	.word	0xfffffbff

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <TIM_Base_SetConfig+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_Base_SetConfig+0x20>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <TIM_Base_SetConfig+0xc4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d108      	bne.n	8002656 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2270      	movs	r2, #112	; 0x70
 8002648:	4393      	bics	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <TIM_Base_SetConfig+0xc0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <TIM_Base_SetConfig+0xc4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <TIM_Base_SetConfig+0xc8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <TIM_Base_SetConfig+0xcc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <TIM_Base_SetConfig+0xd0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_Base_SetConfig+0xd4>)
 8002682:	4013      	ands	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	4393      	bics	r3, r2
 8002696:	001a      	movs	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <TIM_Base_SetConfig+0xc0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0xaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <TIM_Base_SetConfig+0xcc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0xaa>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <TIM_Base_SetConfig+0xd0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d103      	bne.n	80026d6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	615a      	str	r2, [r3, #20]
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40002000 	.word	0x40002000
 80026f0:	40014400 	.word	0x40014400
 80026f4:	40014800 	.word	0x40014800
 80026f8:	fffffcff 	.word	0xfffffcff

080026fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	2201      	movs	r2, #1
 800270c:	4393      	bics	r3, r2
 800270e:	001a      	movs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <TIM_OC1_SetConfig+0xe8>)
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2203      	movs	r2, #3
 8002732:	4393      	bics	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2202      	movs	r2, #2
 8002744:	4393      	bics	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <TIM_OC1_SetConfig+0xec>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_OC1_SetConfig+0x6e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <TIM_OC1_SetConfig+0xf0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_OC1_SetConfig+0x6e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <TIM_OC1_SetConfig+0xf4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10c      	bne.n	8002784 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2208      	movs	r2, #8
 800276e:	4393      	bics	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2204      	movs	r2, #4
 8002780:	4393      	bics	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <TIM_OC1_SetConfig+0xec>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <TIM_OC1_SetConfig+0xa0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <TIM_OC1_SetConfig+0xf0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_OC1_SetConfig+0xa0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <TIM_OC1_SetConfig+0xf4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d111      	bne.n	80027c0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <TIM_OC1_SetConfig+0xf8>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <TIM_OC1_SetConfig+0xfc>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b006      	add	sp, #24
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	fffeff8f 	.word	0xfffeff8f
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	fffffeff 	.word	0xfffffeff
 80027f8:	fffffdff 	.word	0xfffffdff

080027fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2210      	movs	r2, #16
 800280c:	4393      	bics	r3, r2
 800280e:	001a      	movs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <TIM_OC2_SetConfig+0xe0>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <TIM_OC2_SetConfig+0xe4>)
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2220      	movs	r2, #32
 8002846:	4393      	bics	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <TIM_OC2_SetConfig+0xe8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10d      	bne.n	800287a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	4393      	bics	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	4393      	bics	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <TIM_OC2_SetConfig+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_OC2_SetConfig+0x96>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <TIM_OC2_SetConfig+0xec>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_OC2_SetConfig+0x96>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <TIM_OC2_SetConfig+0xf0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d113      	bne.n	80028ba <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <TIM_OC2_SetConfig+0xf4>)
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <TIM_OC2_SetConfig+0xf8>)
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	621a      	str	r2, [r3, #32]
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b006      	add	sp, #24
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	feff8fff 	.word	0xfeff8fff
 80028e0:	fffffcff 	.word	0xfffffcff
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800
 80028f0:	fffffbff 	.word	0xfffffbff
 80028f4:	fffff7ff 	.word	0xfffff7ff

080028f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a33      	ldr	r2, [pc, #204]	; (80029d4 <TIM_OC3_SetConfig+0xdc>)
 8002908:	401a      	ands	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <TIM_OC3_SetConfig+0xe0>)
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2203      	movs	r2, #3
 800292c:	4393      	bics	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <TIM_OC3_SetConfig+0xe4>)
 800293e:	4013      	ands	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <TIM_OC3_SetConfig+0xe8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10d      	bne.n	8002972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <TIM_OC3_SetConfig+0xec>)
 800295a:	4013      	ands	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <TIM_OC3_SetConfig+0xf0>)
 800296e:	4013      	ands	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <TIM_OC3_SetConfig+0xe8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_OC3_SetConfig+0x92>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <TIM_OC3_SetConfig+0xf4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_OC3_SetConfig+0x92>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <TIM_OC3_SetConfig+0xf8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d113      	bne.n	80029b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <TIM_OC3_SetConfig+0xfc>)
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <TIM_OC3_SetConfig+0x100>)
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	fffffeff 	.word	0xfffffeff
 80029d8:	fffeff8f 	.word	0xfffeff8f
 80029dc:	fffffdff 	.word	0xfffffdff
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	fffff7ff 	.word	0xfffff7ff
 80029e8:	fffffbff 	.word	0xfffffbff
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800
 80029f4:	ffffefff 	.word	0xffffefff
 80029f8:	ffffdfff 	.word	0xffffdfff

080029fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <TIM_OC4_SetConfig+0xa8>)
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <TIM_OC4_SetConfig+0xac>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <TIM_OC4_SetConfig+0xb0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <TIM_OC4_SetConfig+0xb4>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	031b      	lsls	r3, r3, #12
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <TIM_OC4_SetConfig+0xb8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_OC4_SetConfig+0x70>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <TIM_OC4_SetConfig+0xbc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_OC4_SetConfig+0x70>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a15      	ldr	r2, [pc, #84]	; (8002abc <TIM_OC4_SetConfig+0xc0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d109      	bne.n	8002a80 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <TIM_OC4_SetConfig+0xc4>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b006      	add	sp, #24
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	ffffefff 	.word	0xffffefff
 8002aa8:	feff8fff 	.word	0xfeff8fff
 8002aac:	fffffcff 	.word	0xfffffcff
 8002ab0:	ffffdfff 	.word	0xffffdfff
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	ffffbfff 	.word	0xffffbfff

08002ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <TIM_OC5_SetConfig+0x9c>)
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <TIM_OC5_SetConfig+0xa0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <TIM_OC5_SetConfig+0xa4>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <TIM_OC5_SetConfig+0xa8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_OC5_SetConfig+0x66>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <TIM_OC5_SetConfig+0xac>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_OC5_SetConfig+0x66>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <TIM_OC5_SetConfig+0xb0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d109      	bne.n	8002b3e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <TIM_OC5_SetConfig+0x9c>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	621a      	str	r2, [r3, #32]
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b006      	add	sp, #24
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	fffeffff 	.word	0xfffeffff
 8002b64:	fffeff8f 	.word	0xfffeff8f
 8002b68:	fffdffff 	.word	0xfffdffff
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40014400 	.word	0x40014400
 8002b74:	40014800 	.word	0x40014800

08002b78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <TIM_OC6_SetConfig+0xa0>)
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <TIM_OC6_SetConfig+0xa4>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <TIM_OC6_SetConfig+0xa8>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <TIM_OC6_SetConfig+0xac>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_OC6_SetConfig+0x68>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <TIM_OC6_SetConfig+0xb0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_OC6_SetConfig+0x68>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <TIM_OC6_SetConfig+0xb4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d109      	bne.n	8002bf4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <TIM_OC6_SetConfig+0xb8>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	ffefffff 	.word	0xffefffff
 8002c1c:	feff8fff 	.word	0xfeff8fff
 8002c20:	ffdfffff 	.word	0xffdfffff
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40014400 	.word	0x40014400
 8002c2c:	40014800 	.word	0x40014800
 8002c30:	fffbffff 	.word	0xfffbffff

08002c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223c      	movs	r2, #60	; 0x3c
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e04a      	b.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	223c      	movs	r2, #60	; 0x3c
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223d      	movs	r2, #61	; 0x3d
 8002c58:	2102      	movs	r1, #2
 8002c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2270      	movs	r2, #112	; 0x70
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a11      	ldr	r2, [pc, #68]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	4393      	bics	r3, r2
 8002cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	223d      	movs	r2, #61	; 0x3d
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	223c      	movs	r2, #60	; 0x3c
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	ff0fffff 	.word	0xff0fffff
 8002cf4:	40000400 	.word	0x40000400

08002cf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	223c      	movs	r2, #60	; 0x3c
 8002d0a:	5c9b      	ldrb	r3, [r3, r2]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e079      	b.n	8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	223c      	movs	r2, #60	; 0x3c
 8002d18:	2101      	movs	r1, #1
 8002d1a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	22ff      	movs	r2, #255	; 0xff
 8002d20:	4393      	bics	r3, r2
 8002d22:	001a      	movs	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002d30:	401a      	ands	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a35      	ldr	r2, [pc, #212]	; (8002e14 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002d3e:	401a      	ands	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a33      	ldr	r2, [pc, #204]	; (8002e18 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002d68:	401a      	ands	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002d76:	401a      	ands	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002d84:	401a      	ands	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d106      	bne.n	8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002d9e:	401a      	ands	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d121      	bne.n	8002df6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002db6:	401a      	ands	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	051b      	lsls	r3, r3, #20
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d106      	bne.n	8002df6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002dec:	401a      	ands	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223c      	movs	r2, #60	; 0x3c
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	fffffcff 	.word	0xfffffcff
 8002e14:	fffffbff 	.word	0xfffffbff
 8002e18:	fffff7ff 	.word	0xfffff7ff
 8002e1c:	ffffefff 	.word	0xffffefff
 8002e20:	ffffdfff 	.word	0xffffdfff
 8002e24:	ffffbfff 	.word	0xffffbfff
 8002e28:	fff0ffff 	.word	0xfff0ffff
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	efffffff 	.word	0xefffffff
 8002e34:	ff0fffff 	.word	0xff0fffff
 8002e38:	feffffff 	.word	0xfeffffff
 8002e3c:	fdffffff 	.word	0xfdffffff
 8002e40:	dfffffff 	.word	0xdfffffff

08002e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4c:	231e      	movs	r3, #30
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4aab      	ldr	r2, [pc, #684]	; (8003120 <UART_SetConfig+0x2dc>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4aa6      	ldr	r2, [pc, #664]	; (8003124 <UART_SetConfig+0x2e0>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a9d      	ldr	r2, [pc, #628]	; (8003128 <UART_SetConfig+0x2e4>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	4393      	bics	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a93      	ldr	r2, [pc, #588]	; (800312c <UART_SetConfig+0x2e8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d127      	bne.n	8002f32 <UART_SetConfig+0xee>
 8002ee2:	4b93      	ldr	r3, [pc, #588]	; (8003130 <UART_SetConfig+0x2ec>)
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d017      	beq.n	8002f1e <UART_SetConfig+0xda>
 8002eee:	d81b      	bhi.n	8002f28 <UART_SetConfig+0xe4>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d00a      	beq.n	8002f0a <UART_SetConfig+0xc6>
 8002ef4:	d818      	bhi.n	8002f28 <UART_SetConfig+0xe4>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <UART_SetConfig+0xbc>
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d00a      	beq.n	8002f14 <UART_SetConfig+0xd0>
 8002efe:	e013      	b.n	8002f28 <UART_SetConfig+0xe4>
 8002f00:	231f      	movs	r3, #31
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e021      	b.n	8002f4e <UART_SetConfig+0x10a>
 8002f0a:	231f      	movs	r3, #31
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e01c      	b.n	8002f4e <UART_SetConfig+0x10a>
 8002f14:	231f      	movs	r3, #31
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2204      	movs	r2, #4
 8002f1a:	701a      	strb	r2, [r3, #0]
 8002f1c:	e017      	b.n	8002f4e <UART_SetConfig+0x10a>
 8002f1e:	231f      	movs	r3, #31
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2208      	movs	r2, #8
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e012      	b.n	8002f4e <UART_SetConfig+0x10a>
 8002f28:	231f      	movs	r3, #31
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e00d      	b.n	8002f4e <UART_SetConfig+0x10a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7f      	ldr	r2, [pc, #508]	; (8003134 <UART_SetConfig+0x2f0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d104      	bne.n	8002f46 <UART_SetConfig+0x102>
 8002f3c:	231f      	movs	r3, #31
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e003      	b.n	8002f4e <UART_SetConfig+0x10a>
 8002f46:	231f      	movs	r3, #31
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d000      	beq.n	8002f5c <UART_SetConfig+0x118>
 8002f5a:	e06f      	b.n	800303c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002f5c:	231f      	movs	r3, #31
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d01f      	beq.n	8002fa6 <UART_SetConfig+0x162>
 8002f66:	dc22      	bgt.n	8002fae <UART_SetConfig+0x16a>
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d017      	beq.n	8002f9c <UART_SetConfig+0x158>
 8002f6c:	dc1f      	bgt.n	8002fae <UART_SetConfig+0x16a>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <UART_SetConfig+0x134>
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d005      	beq.n	8002f82 <UART_SetConfig+0x13e>
 8002f76:	e01a      	b.n	8002fae <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f78:	f7ff f83e 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	61bb      	str	r3, [r7, #24]
        break;
 8002f80:	e01c      	b.n	8002fbc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002f82:	4b6b      	ldr	r3, [pc, #428]	; (8003130 <UART_SetConfig+0x2ec>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2207      	movs	r2, #7
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4869      	ldr	r0, [pc, #420]	; (8003138 <UART_SetConfig+0x2f4>)
 8002f92:	f7fd f8b9 	bl	8000108 <__udivsi3>
 8002f96:	0003      	movs	r3, r0
 8002f98:	61bb      	str	r3, [r7, #24]
        break;
 8002f9a:	e00f      	b.n	8002fbc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9c:	f7fe ffe0 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	61bb      	str	r3, [r7, #24]
        break;
 8002fa4:	e00a      	b.n	8002fbc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	61bb      	str	r3, [r7, #24]
        break;
 8002fac:	e006      	b.n	8002fbc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fb2:	231e      	movs	r3, #30
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
        break;
 8002fba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d100      	bne.n	8002fc4 <UART_SetConfig+0x180>
 8002fc2:	e097      	b.n	80030f4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	; (800313c <UART_SetConfig+0x2f8>)
 8002fca:	0052      	lsls	r2, r2, #1
 8002fcc:	5ad3      	ldrh	r3, [r2, r3]
 8002fce:	0019      	movs	r1, r3
 8002fd0:	69b8      	ldr	r0, [r7, #24]
 8002fd2:	f7fd f899 	bl	8000108 <__udivsi3>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	005a      	lsls	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	18d2      	adds	r2, r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fd f88d 	bl	8000108 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d91c      	bls.n	8003032 <UART_SetConfig+0x1ee>
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d217      	bcs.n	8003032 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	b29a      	uxth	r2, r3
 8003006:	200e      	movs	r0, #14
 8003008:	183b      	adds	r3, r7, r0
 800300a:	210f      	movs	r1, #15
 800300c:	438a      	bics	r2, r1
 800300e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	2207      	movs	r2, #7
 8003018:	4013      	ands	r3, r2
 800301a:	b299      	uxth	r1, r3
 800301c:	183b      	adds	r3, r7, r0
 800301e:	183a      	adds	r2, r7, r0
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	183a      	adds	r2, r7, r0
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	e060      	b.n	80030f4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003032:	231e      	movs	r3, #30
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e05b      	b.n	80030f4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303c:	231f      	movs	r3, #31
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d01f      	beq.n	8003086 <UART_SetConfig+0x242>
 8003046:	dc22      	bgt.n	800308e <UART_SetConfig+0x24a>
 8003048:	2b04      	cmp	r3, #4
 800304a:	d017      	beq.n	800307c <UART_SetConfig+0x238>
 800304c:	dc1f      	bgt.n	800308e <UART_SetConfig+0x24a>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <UART_SetConfig+0x214>
 8003052:	2b02      	cmp	r3, #2
 8003054:	d005      	beq.n	8003062 <UART_SetConfig+0x21e>
 8003056:	e01a      	b.n	800308e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7fe ffce 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 800305c:	0003      	movs	r3, r0
 800305e:	61bb      	str	r3, [r7, #24]
        break;
 8003060:	e01c      	b.n	800309c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <UART_SetConfig+0x2ec>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2207      	movs	r2, #7
 800306a:	4013      	ands	r3, r2
 800306c:	3301      	adds	r3, #1
 800306e:	0019      	movs	r1, r3
 8003070:	4831      	ldr	r0, [pc, #196]	; (8003138 <UART_SetConfig+0x2f4>)
 8003072:	f7fd f849 	bl	8000108 <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
        break;
 800307a:	e00f      	b.n	800309c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307c:	f7fe ff70 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8003080:	0003      	movs	r3, r0
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e00a      	b.n	800309c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	61bb      	str	r3, [r7, #24]
        break;
 800308c:	e006      	b.n	800309c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003092:	231e      	movs	r3, #30
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
        break;
 800309a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d028      	beq.n	80030f4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a6:	4b25      	ldr	r3, [pc, #148]	; (800313c <UART_SetConfig+0x2f8>)
 80030a8:	0052      	lsls	r2, r2, #1
 80030aa:	5ad3      	ldrh	r3, [r2, r3]
 80030ac:	0019      	movs	r1, r3
 80030ae:	69b8      	ldr	r0, [r7, #24]
 80030b0:	f7fd f82a 	bl	8000108 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	001a      	movs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	18d2      	adds	r2, r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f7fd f81e 	bl	8000108 <__udivsi3>
 80030cc:	0003      	movs	r3, r0
 80030ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d90a      	bls.n	80030ec <UART_SetConfig+0x2a8>
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d205      	bcs.n	80030ec <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e003      	b.n	80030f4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80030ec:	231e      	movs	r3, #30
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	226a      	movs	r2, #106	; 0x6a
 80030f8:	2101      	movs	r1, #1
 80030fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2268      	movs	r2, #104	; 0x68
 8003100:	2101      	movs	r1, #1
 8003102:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003110:	231e      	movs	r3, #30
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	781b      	ldrb	r3, [r3, #0]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b008      	add	sp, #32
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	cfff69f3 	.word	0xcfff69f3
 8003124:	ffffcfff 	.word	0xffffcfff
 8003128:	11fff4ff 	.word	0x11fff4ff
 800312c:	40013800 	.word	0x40013800
 8003130:	40021000 	.word	0x40021000
 8003134:	40004400 	.word	0x40004400
 8003138:	02dc6c00 	.word	0x02dc6c00
 800313c:	080036d4 	.word	0x080036d4

08003140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d00b      	beq.n	800316a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <UART_AdvFeatureConfig+0x144>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	2202      	movs	r2, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d00b      	beq.n	800318c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a43      	ldr	r2, [pc, #268]	; (8003288 <UART_AdvFeatureConfig+0x148>)
 800317c:	4013      	ands	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	2204      	movs	r2, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d00b      	beq.n	80031ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a3b      	ldr	r2, [pc, #236]	; (800328c <UART_AdvFeatureConfig+0x14c>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	2208      	movs	r2, #8
 80031b4:	4013      	ands	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <UART_AdvFeatureConfig+0x150>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	2210      	movs	r2, #16
 80031d6:	4013      	ands	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <UART_AdvFeatureConfig+0x154>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	2220      	movs	r2, #32
 80031f8:	4013      	ands	r3, r2
 80031fa:	d00b      	beq.n	8003214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4a25      	ldr	r2, [pc, #148]	; (8003298 <UART_AdvFeatureConfig+0x158>)
 8003204:	4013      	ands	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2240      	movs	r2, #64	; 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d01d      	beq.n	800325a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <UART_AdvFeatureConfig+0x15c>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	035b      	lsls	r3, r3, #13
 800323e:	429a      	cmp	r2, r3
 8003240:	d10b      	bne.n	800325a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <UART_AdvFeatureConfig+0x160>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	4013      	ands	r3, r2
 8003262:	d00b      	beq.n	800327c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <UART_AdvFeatureConfig+0x164>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}
 8003284:	fffdffff 	.word	0xfffdffff
 8003288:	fffeffff 	.word	0xfffeffff
 800328c:	fffbffff 	.word	0xfffbffff
 8003290:	ffff7fff 	.word	0xffff7fff
 8003294:	ffffefff 	.word	0xffffefff
 8003298:	ffffdfff 	.word	0xffffdfff
 800329c:	ffefffff 	.word	0xffefffff
 80032a0:	ff9fffff 	.word	0xff9fffff
 80032a4:	fff7ffff 	.word	0xfff7ffff

080032a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	228c      	movs	r2, #140	; 0x8c
 80032b4:	2100      	movs	r1, #0
 80032b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b8:	f7fd fc64 	bl	8000b84 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2208      	movs	r2, #8
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d10c      	bne.n	80032e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2280      	movs	r2, #128	; 0x80
 80032d2:	0391      	lsls	r1, r2, #14
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <UART_CheckIdleState+0x90>)
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	f000 f82e 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e023      	b.n	8003330 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d10c      	bne.n	8003310 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	03d1      	lsls	r1, r2, #15
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <UART_CheckIdleState+0x90>)
 8003300:	9200      	str	r2, [sp, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	f000 f81a 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d001      	beq.n	8003310 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e00f      	b.n	8003330 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2284      	movs	r2, #132	; 0x84
 8003314:	2120      	movs	r1, #32
 8003316:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2288      	movs	r2, #136	; 0x88
 800331c:	2120      	movs	r1, #32
 800331e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}
 8003338:	01ffffff 	.word	0x01ffffff

0800333c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b094      	sub	sp, #80	; 0x50
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334c:	e0a7      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003350:	3301      	adds	r3, #1
 8003352:	d100      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003354:	e0a3      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fd fc15 	bl	8000b84 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <UART_WaitOnFlagUntilTimeout+0x30>
 8003366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003368:	2b00      	cmp	r3, #0
 800336a:	d13f      	bne.n	80033ec <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336c:	f3ef 8310 	mrs	r3, PRIMASK
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003374:	647b      	str	r3, [r7, #68]	; 0x44
 8003376:	2301      	movs	r3, #1
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	494e      	ldr	r1, [pc, #312]	; (80034c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	643b      	str	r3, [r7, #64]	; 0x40
 80033a8:	2301      	movs	r3, #1
 80033aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2284      	movs	r2, #132	; 0x84
 80033d4:	2120      	movs	r1, #32
 80033d6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2288      	movs	r2, #136	; 0x88
 80033dc:	2120      	movs	r1, #32
 80033de:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e069      	b.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d052      	beq.n	800349e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	401a      	ands	r2, r3
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	429a      	cmp	r2, r3
 800340a:	d148      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003416:	f3ef 8310 	mrs	r3, PRIMASK
 800341a:	613b      	str	r3, [r7, #16]
  return(result);
 800341c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	2301      	movs	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4924      	ldr	r1, [pc, #144]	; (80034c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003438:	400a      	ands	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f383 8810 	msr	PRIMASK, r3
}
 8003446:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003448:	f3ef 8310 	mrs	r3, PRIMASK
 800344c:	61fb      	str	r3, [r7, #28]
  return(result);
 800344e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	64bb      	str	r3, [r7, #72]	; 0x48
 8003452:	2301      	movs	r3, #1
 8003454:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	438a      	bics	r2, r1
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2284      	movs	r2, #132	; 0x84
 800347e:	2120      	movs	r1, #32
 8003480:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2288      	movs	r2, #136	; 0x88
 8003486:	2120      	movs	r1, #32
 8003488:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	228c      	movs	r2, #140	; 0x8c
 800348e:	2120      	movs	r1, #32
 8003490:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e010      	b.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	425a      	negs	r2, r3
 80034ae:	4153      	adcs	r3, r2
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	001a      	movs	r2, r3
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d100      	bne.n	80034be <UART_WaitOnFlagUntilTimeout+0x182>
 80034bc:	e747      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b014      	add	sp, #80	; 0x50
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	fffffe5f 	.word	0xfffffe5f

080034cc <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e05d      	b.n	80035a0 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2284      	movs	r2, #132	; 0x84
 80034e8:	589b      	ldr	r3, [r3, r2]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fd fa5f 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2284      	movs	r2, #132	; 0x84
 8003502:	2124      	movs	r1, #36	; 0x24
 8003504:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	438a      	bics	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff fc93 	bl	8002e44 <UART_SetConfig>
 800351e:	0003      	movs	r3, r0
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e03b      	b.n	80035a0 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff fe04 	bl	8003140 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	01c9      	lsls	r1, r1, #7
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_RS485Ex_Init+0xdc>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	055b      	lsls	r3, r3, #21
 8003564:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <HAL_RS485Ex_Init+0xe0>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2101      	movs	r1, #1
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	0018      	movs	r0, r3
 800359a:	f7ff fe85 	bl	80032a8 <UART_CheckIdleState>
 800359e:	0003      	movs	r3, r0
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b006      	add	sp, #24
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	ffff7fff 	.word	0xffff7fff
 80035ac:	fc00ffff 	.word	0xfc00ffff

080035b0 <memset>:
 80035b0:	0003      	movs	r3, r0
 80035b2:	1882      	adds	r2, r0, r2
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d100      	bne.n	80035ba <memset+0xa>
 80035b8:	4770      	bx	lr
 80035ba:	7019      	strb	r1, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	e7f9      	b.n	80035b4 <memset+0x4>

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	2600      	movs	r6, #0
 80035c4:	4c0c      	ldr	r4, [pc, #48]	; (80035f8 <__libc_init_array+0x38>)
 80035c6:	4d0d      	ldr	r5, [pc, #52]	; (80035fc <__libc_init_array+0x3c>)
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	2600      	movs	r6, #0
 80035d2:	f000 f819 	bl	8003608 <_init>
 80035d6:	4c0a      	ldr	r4, [pc, #40]	; (8003600 <__libc_init_array+0x40>)
 80035d8:	4d0a      	ldr	r5, [pc, #40]	; (8003604 <__libc_init_array+0x44>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	00b3      	lsls	r3, r6, #2
 80035e6:	58eb      	ldr	r3, [r5, r3]
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	00b3      	lsls	r3, r6, #2
 80035f0:	58eb      	ldr	r3, [r5, r3]
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	080036ec 	.word	0x080036ec
 80035fc:	080036ec 	.word	0x080036ec
 8003600:	080036f0 	.word	0x080036f0
 8003604:	080036ec 	.word	0x080036ec

08003608 <_init>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr

08003614 <_fini>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

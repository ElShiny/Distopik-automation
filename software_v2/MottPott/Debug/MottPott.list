
MottPott.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da8  08001da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001da8  08001da8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da8  08001da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da8  08001da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dac  08001dac  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001dbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001dbc  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d61  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ef  00000000  00000000  00026d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00028388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011fdf  00000000  00000000  000290d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000908c  00000000  00000000  0003b0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e664  00000000  00000000  0004413b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b279f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e4  00000000  00000000  000b27f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d30 	.word	0x08001d30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001d30 	.word	0x08001d30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa2a 	bl	800067e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f883 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f905 	bl	800043c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f8c3 	bl	80003bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t arr[2] = {0xCF, 0xAE};
 8000236:	2314      	movs	r3, #20
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	4a3a      	ldr	r2, [pc, #232]	; (8000324 <main+0x104>)
 800023c:	801a      	strh	r2, [r3, #0]


  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr, 2, 100) == HAL_BUSY){}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	2314      	movs	r3, #20
 8000242:	18fa      	adds	r2, r7, r3
 8000244:	4838      	ldr	r0, [pc, #224]	; (8000328 <main+0x108>)
 8000246:	2364      	movs	r3, #100	; 0x64
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2302      	movs	r3, #2
 800024c:	2168      	movs	r1, #104	; 0x68
 800024e:	f000 fd4d 	bl	8000cec <HAL_I2C_Master_Transmit>
 8000252:	0003      	movs	r3, r0
 8000254:	2b02      	cmp	r3, #2
 8000256:	d0f3      	beq.n	8000240 <main+0x20>
  uint8_t arr1[2] = {0xA0, 0x01};
 8000258:	2310      	movs	r3, #16
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	22d0      	movs	r2, #208	; 0xd0
 800025e:	0052      	lsls	r2, r2, #1
 8000260:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr1, 2, 100) == HAL_BUSY){}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	2310      	movs	r3, #16
 8000266:	18fa      	adds	r2, r7, r3
 8000268:	482f      	ldr	r0, [pc, #188]	; (8000328 <main+0x108>)
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2302      	movs	r3, #2
 8000270:	2168      	movs	r1, #104	; 0x68
 8000272:	f000 fd3b 	bl	8000cec <HAL_I2C_Master_Transmit>
 8000276:	0003      	movs	r3, r0
 8000278:	2b02      	cmp	r3, #2
 800027a:	d0f3      	beq.n	8000264 <main+0x44>
  uint8_t arr2[2] = {0xA1, 30};
 800027c:	230c      	movs	r3, #12
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	4a2a      	ldr	r2, [pc, #168]	; (800032c <main+0x10c>)
 8000282:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr2, 2, 100) == HAL_BUSY){}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	230c      	movs	r3, #12
 8000288:	18fa      	adds	r2, r7, r3
 800028a:	4827      	ldr	r0, [pc, #156]	; (8000328 <main+0x108>)
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2302      	movs	r3, #2
 8000292:	2168      	movs	r1, #104	; 0x68
 8000294:	f000 fd2a 	bl	8000cec <HAL_I2C_Master_Transmit>
 8000298:	0003      	movs	r3, r0
 800029a:	2b02      	cmp	r3, #2
 800029c:	d0f3      	beq.n	8000286 <main+0x66>

	for(int a = 0x90; a < 0x9F; a++){
 800029e:	2390      	movs	r3, #144	; 0x90
 80002a0:	61fb      	str	r3, [r7, #28]
 80002a2:	e017      	b.n	80002d4 <main+0xb4>
		uint8_t arr3[2] = {a, 60};
 80002a4:	69fb      	ldr	r3, [r7, #28]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	2108      	movs	r1, #8
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	701a      	strb	r2, [r3, #0]
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	223c      	movs	r2, #60	; 0x3c
 80002b2:	705a      	strb	r2, [r3, #1]
		while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr3, 2, 100) == HAL_BUSY){}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	2308      	movs	r3, #8
 80002b8:	18fa      	adds	r2, r7, r3
 80002ba:	481b      	ldr	r0, [pc, #108]	; (8000328 <main+0x108>)
 80002bc:	2364      	movs	r3, #100	; 0x64
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2302      	movs	r3, #2
 80002c2:	2168      	movs	r1, #104	; 0x68
 80002c4:	f000 fd12 	bl	8000cec <HAL_I2C_Master_Transmit>
 80002c8:	0003      	movs	r3, r0
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d0f3      	beq.n	80002b6 <main+0x96>
	for(int a = 0x90; a < 0x9F; a++){
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	3301      	adds	r3, #1
 80002d2:	61fb      	str	r3, [r7, #28]
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	2b9e      	cmp	r3, #158	; 0x9e
 80002d8:	dde4      	ble.n	80002a4 <main+0x84>
	}

	for(int i = 0 ; i<30; i++){
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
 80002de:	e01d      	b.n	800031c <main+0xfc>
	  uint8_t arr5[4] = {led_adr_arr[i], 255,255,100};
 80002e0:	4a13      	ldr	r2, [pc, #76]	; (8000330 <main+0x110>)
 80002e2:	69bb      	ldr	r3, [r7, #24]
 80002e4:	18d3      	adds	r3, r2, r3
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	705a      	strb	r2, [r3, #1]
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	709a      	strb	r2, [r3, #2]
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2264      	movs	r2, #100	; 0x64
 80002fc:	70da      	strb	r2, [r3, #3]
	  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr5, 4, 100) == HAL_BUSY){}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	1d3a      	adds	r2, r7, #4
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <main+0x108>)
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2304      	movs	r3, #4
 800030a:	2168      	movs	r1, #104	; 0x68
 800030c:	f000 fcee 	bl	8000cec <HAL_I2C_Master_Transmit>
 8000310:	0003      	movs	r3, r0
 8000312:	2b02      	cmp	r3, #2
 8000314:	d0f4      	beq.n	8000300 <main+0xe0>
	for(int i = 0 ; i<30; i++){
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	3301      	adds	r3, #1
 800031a:	61bb      	str	r3, [r7, #24]
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	2b1d      	cmp	r3, #29
 8000320:	ddde      	ble.n	80002e0 <main+0xc0>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000322:	e7fe      	b.n	8000322 <main+0x102>
 8000324:	ffffaecf 	.word	0xffffaecf
 8000328:	20000028 	.word	0x20000028
 800032c:	00001ea1 	.word	0x00001ea1
 8000330:	08001d48 	.word	0x08001d48

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b08d      	sub	sp, #52	; 0x34
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	2414      	movs	r4, #20
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	231c      	movs	r3, #28
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f001 fceb 	bl	8001d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	2314      	movs	r3, #20
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f001 fce4 	bl	8001d20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	193b      	adds	r3, r7, r4
 800035a:	2202      	movs	r2, #2
 800035c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	193b      	adds	r3, r7, r4
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	193b      	adds	r3, r7, r4
 800036e:	2240      	movs	r2, #64	; 0x40
 8000370:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	193b      	adds	r3, r7, r4
 8000374:	0018      	movs	r0, r3
 8000376:	f001 f87b 	bl	8001470 <HAL_RCC_OscConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800037e:	f000 f87f 	bl	8000480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	003b      	movs	r3, r7
 8000384:	2207      	movs	r2, #7
 8000386:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000388:	003b      	movs	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	003b      	movs	r3, r7
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800039a:	003b      	movs	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	003b      	movs	r3, r7
 80003a2:	2101      	movs	r1, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fa5d 	bl	8001864 <HAL_RCC_ClockConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003ae:	f000 f867 	bl	8000480 <Error_Handler>
  }
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00d      	add	sp, #52	; 0x34
 80003b8:	bd90      	pop	{r4, r7, pc}
	...

080003bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_I2C1_Init+0x74>)
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_I2C1_Init+0x78>)
 80003c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <MX_I2C1_Init+0x74>)
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <MX_I2C1_Init+0x7c>)
 80003ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <MX_I2C1_Init+0x74>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_I2C1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_I2C1_Init+0x74>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 fbe1 	bl	8000bc0 <HAL_I2C_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000402:	f000 f83d 	bl	8000480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <MX_I2C1_Init+0x74>)
 8000408:	2100      	movs	r1, #0
 800040a:	0018      	movs	r0, r3
 800040c:	f000 ff98 	bl	8001340 <HAL_I2CEx_ConfigAnalogFilter>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000414:	f000 f834 	bl	8000480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_I2C1_Init+0x74>)
 800041a:	2100      	movs	r1, #0
 800041c:	0018      	movs	r0, r3
 800041e:	f000 ffdb 	bl	80013d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 f82b 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000028 	.word	0x20000028
 8000434:	40005400 	.word	0x40005400
 8000438:	2010091a 	.word	0x2010091a

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_GPIO_Init+0x40>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <MX_GPIO_Init+0x40>)
 8000448:	2104      	movs	r1, #4
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_GPIO_Init+0x40>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000452:	2204      	movs	r2, #4
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_GPIO_Init+0x40>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_GPIO_Init+0x40>)
 8000460:	2102      	movs	r1, #2
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <MX_GPIO_Init+0x40>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046a:	2202      	movs	r2, #2
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	40021000 	.word	0x40021000

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x44>)
 8000494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_MspInit+0x44>)
 8000498:	2101      	movs	r1, #1
 800049a:	430a      	orrs	r2, r1
 800049c:	641a      	str	r2, [r3, #64]	; 0x40
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x44>)
 80004a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a2:	2201      	movs	r2, #1
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_MspInit+0x44>)
 80004ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_MspInit+0x44>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0549      	lsls	r1, r1, #21
 80004b4:	430a      	orrs	r2, r1
 80004b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_MspInit+0x44>)
 80004ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	055b      	lsls	r3, r3, #21
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b093      	sub	sp, #76	; 0x4c
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	0018      	movs	r0, r3
 80004e2:	2314      	movs	r3, #20
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f001 fc1a 	bl	8001d20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	2418      	movs	r4, #24
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	0018      	movs	r0, r3
 80004f2:	231c      	movs	r3, #28
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f001 fc12 	bl	8001d20 <memset>
  if(hi2c->Instance==I2C1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a34      	ldr	r2, [pc, #208]	; (80005d4 <HAL_I2C_MspInit+0x100>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d162      	bne.n	80005cc <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2240      	movs	r2, #64	; 0x40
 800050a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000512:	193b      	adds	r3, r7, r4
 8000514:	0018      	movs	r0, r3
 8000516:	f001 faf1 	bl	8001afc <HAL_RCCEx_PeriphCLKConfig>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800051e:	f7ff ffaf 	bl	8000480 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 8000524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000526:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 8000528:	2104      	movs	r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 8000530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000532:	2204      	movs	r2, #4
 8000534:	4013      	ands	r3, r2
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 800053c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 8000540:	2102      	movs	r1, #2
 8000542:	430a      	orrs	r2, r1
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 8000548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054a:	2202      	movs	r2, #2
 800054c:	4013      	ands	r3, r2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000552:	2134      	movs	r1, #52	; 0x34
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	01d2      	lsls	r2, r2, #7
 800055a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055c:	000c      	movs	r4, r1
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2212      	movs	r2, #18
 8000562:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	220e      	movs	r2, #14
 8000574:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000576:	193b      	adds	r3, r7, r4
 8000578:	4a18      	ldr	r2, [pc, #96]	; (80005dc <HAL_I2C_MspInit+0x108>)
 800057a:	0019      	movs	r1, r3
 800057c:	0010      	movs	r0, r2
 800057e:	f000 f9ad 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2212      	movs	r2, #18
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2206      	movs	r2, #6
 80005a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_I2C_MspInit+0x10c>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	0010      	movs	r0, r2
 80005ac:	f000 f996 	bl	80008dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 80005b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0389      	lsls	r1, r1, #14
 80005ba:	430a      	orrs	r2, r1
 80005bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_I2C_MspInit+0x104>)
 80005c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	039b      	lsls	r3, r3, #14
 80005c6:	4013      	ands	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b013      	add	sp, #76	; 0x4c
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40005400 	.word	0x40005400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	50000800 	.word	0x50000800
 80005e0:	50000400 	.word	0x50000400

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 f89a 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <SystemInit+0x14>)
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	0512      	lsls	r2, r2, #20
 800061e:	609a      	str	r2, [r3, #8]
#endif
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000630:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000632:	e003      	b.n	800063c <LoopCopyDataInit>

08000634 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000636:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000638:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800063a:	3104      	adds	r1, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <LoopForever+0xa>)
  ldr r3, =_edata
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <LoopForever+0xe>)
  adds r2, r0, r1
 8000640:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000644:	d3f6      	bcc.n	8000634 <CopyDataInit>
  ldr r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopForever+0x12>)
  b LoopFillZerobss
 8000648:	e002      	b.n	8000650 <LoopFillZerobss>

0800064a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  str  r3, [r2]
 800064c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064e:	3204      	adds	r2, #4

08000650 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <LoopForever+0x16>)
  cmp r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000654:	d3f9      	bcc.n	800064a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000656:	f7ff ffdd 	bl	8000614 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800065a:	f001 fb3d 	bl	8001cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fddf 	bl	8000220 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000668:	08001db0 	.word	0x08001db0
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000670:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000674:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000678:	20000078 	.word	0x20000078

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>

0800067e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f80e 	bl	80006ac <HAL_InitTick>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d003      	beq.n	800069c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e001      	b.n	80006a0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800069c:	f7ff fef6 	bl	800048c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	781b      	ldrb	r3, [r3, #0]
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <HAL_InitTick+0x88>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d02b      	beq.n	800071c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_InitTick+0x8c>)
 80006c6:	681c      	ldr	r4, [r3, #0]
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HAL_InitTick+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	0019      	movs	r1, r3
 80006ce:	23fa      	movs	r3, #250	; 0xfa
 80006d0:	0098      	lsls	r0, r3, #2
 80006d2:	f7ff fd19 	bl	8000108 <__udivsi3>
 80006d6:	0003      	movs	r3, r0
 80006d8:	0019      	movs	r1, r3
 80006da:	0020      	movs	r0, r4
 80006dc:	f7ff fd14 	bl	8000108 <__udivsi3>
 80006e0:	0003      	movs	r3, r0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f8ed 	bl	80008c2 <HAL_SYSTICK_Config>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d112      	bne.n	8000712 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d80a      	bhi.n	8000708 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	2301      	movs	r3, #1
 80006f6:	425b      	negs	r3, r3
 80006f8:	2200      	movs	r2, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f8cc 	bl	8000898 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_InitTick+0x90>)
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e00d      	b.n	8000724 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000708:	230f      	movs	r3, #15
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e008      	b.n	8000724 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000712:	230f      	movs	r3, #15
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e003      	b.n	8000724 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800071c:	230f      	movs	r3, #15
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000724:	230f      	movs	r3, #15
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b005      	add	sp, #20
 8000730:	bd90      	pop	{r4, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000008 	.word	0x20000008
 8000738:	20000000 	.word	0x20000000
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <HAL_IncTick+0x18>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_IncTick+0x1c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	18d2      	adds	r2, r2, r3
 800074e:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_IncTick+0x18>)
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000074 	.word	0x20000074
 800075c:	20000008 	.word	0x20000008

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	20000074 	.word	0x20000074

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	0002      	movs	r2, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b7f      	cmp	r3, #127	; 0x7f
 8000788:	d828      	bhi.n	80007dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078a:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <__NVIC_SetPriority+0xd4>)
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	089b      	lsrs	r3, r3, #2
 8000794:	33c0      	adds	r3, #192	; 0xc0
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	589b      	ldr	r3, [r3, r2]
 800079a:	1dfa      	adds	r2, r7, #7
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	0011      	movs	r1, r2
 80007a0:	2203      	movs	r2, #3
 80007a2:	400a      	ands	r2, r1
 80007a4:	00d2      	lsls	r2, r2, #3
 80007a6:	21ff      	movs	r1, #255	; 0xff
 80007a8:	4091      	lsls	r1, r2
 80007aa:	000a      	movs	r2, r1
 80007ac:	43d2      	mvns	r2, r2
 80007ae:	401a      	ands	r2, r3
 80007b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	019b      	lsls	r3, r3, #6
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	401a      	ands	r2, r3
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	0018      	movs	r0, r3
 80007c0:	2303      	movs	r3, #3
 80007c2:	4003      	ands	r3, r0
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <__NVIC_SetPriority+0xd4>)
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	089b      	lsrs	r3, r3, #2
 80007d2:	430a      	orrs	r2, r1
 80007d4:	33c0      	adds	r3, #192	; 0xc0
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007da:	e031      	b.n	8000840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	4a1b      	ldr	r2, [pc, #108]	; (800084c <__NVIC_SetPriority+0xd8>)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	0019      	movs	r1, r3
 80007e4:	230f      	movs	r3, #15
 80007e6:	400b      	ands	r3, r1
 80007e8:	3b08      	subs	r3, #8
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	3306      	adds	r3, #6
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	18d3      	adds	r3, r2, r3
 80007f2:	3304      	adds	r3, #4
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1dfa      	adds	r2, r7, #7
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	0011      	movs	r1, r2
 80007fc:	2203      	movs	r2, #3
 80007fe:	400a      	ands	r2, r1
 8000800:	00d2      	lsls	r2, r2, #3
 8000802:	21ff      	movs	r1, #255	; 0xff
 8000804:	4091      	lsls	r1, r2
 8000806:	000a      	movs	r2, r1
 8000808:	43d2      	mvns	r2, r2
 800080a:	401a      	ands	r2, r3
 800080c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	019b      	lsls	r3, r3, #6
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	401a      	ands	r2, r3
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	0018      	movs	r0, r3
 800081c:	2303      	movs	r3, #3
 800081e:	4003      	ands	r3, r0
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <__NVIC_SetPriority+0xd8>)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	001c      	movs	r4, r3
 800082c:	230f      	movs	r3, #15
 800082e:	4023      	ands	r3, r4
 8000830:	3b08      	subs	r3, #8
 8000832:	089b      	lsrs	r3, r3, #2
 8000834:	430a      	orrs	r2, r1
 8000836:	3306      	adds	r3, #6
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	18c3      	adds	r3, r0, r3
 800083c:	3304      	adds	r3, #4
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b003      	add	sp, #12
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	045b      	lsls	r3, r3, #17
 8000860:	429a      	cmp	r2, r3
 8000862:	d301      	bcc.n	8000868 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000864:	2301      	movs	r3, #1
 8000866:	e010      	b.n	800088a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <SysTick_Config+0x44>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	3a01      	subs	r2, #1
 800086e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	2103      	movs	r1, #3
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff ff7c 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x44>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	210f      	movs	r1, #15
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	1c02      	adds	r2, r0, #0
 80008a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff ff5d 	bl	8000774 <__NVIC_SetPriority>
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ffbf 	bl	8000850 <SysTick_Config>
 80008d2:	0003      	movs	r3, r0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}

080008dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80008ea:	e153      	b.n	8000b94 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4091      	lsls	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d100      	bne.n	8000904 <HAL_GPIO_Init+0x28>
 8000902:	e144      	b.n	8000b8e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0x38>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b12      	cmp	r3, #18
 8000912:	d125      	bne.n	8000960 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	58d3      	ldr	r3, [r2, r3]
 8000920:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	2207      	movs	r2, #7
 8000926:	4013      	ands	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	409a      	lsls	r2, r3
 800092e:	0013      	movs	r3, r2
 8000930:	43da      	mvns	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	220f      	movs	r2, #15
 800093e:	401a      	ands	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	2107      	movs	r1, #7
 8000944:	400b      	ands	r3, r1
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	409a      	lsls	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	4313      	orrs	r3, r2
 8000950:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	6979      	ldr	r1, [r7, #20]
 800095e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	43da      	mvns	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4013      	ands	r3, r2
 8000976:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2203      	movs	r2, #3
 800097e:	401a      	ands	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	409a      	lsls	r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	4313      	orrs	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d00b      	beq.n	80009b4 <HAL_GPIO_Init+0xd8>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d007      	beq.n	80009b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a8:	2b11      	cmp	r3, #17
 80009aa:	d003      	beq.n	80009b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b12      	cmp	r3, #18
 80009b2:	d130      	bne.n	8000a16 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	43da      	mvns	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	4013      	ands	r3, r2
 80009ca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	409a      	lsls	r2, r3
 80009d6:	0013      	movs	r3, r2
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	4313      	orrs	r3, r2
 80009dc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ea:	2201      	movs	r2, #1
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	4013      	ands	r3, r2
 80009f8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	401a      	ands	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d017      	beq.n	8000a4e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	4013      	ands	r3, r2
 8000a34:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	055b      	lsls	r3, r3, #21
 8000a56:	4013      	ands	r3, r2
 8000a58:	d100      	bne.n	8000a5c <HAL_GPIO_Init+0x180>
 8000a5a:	e098      	b.n	8000b8e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000a5c:	4a53      	ldr	r2, [pc, #332]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3318      	adds	r3, #24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	589b      	ldr	r3, [r3, r2]
 8000a68:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	4013      	ands	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	220f      	movs	r2, #15
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d019      	beq.n	8000abe <HAL_GPIO_Init+0x1e2>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a48      	ldr	r2, [pc, #288]	; (8000bb0 <HAL_GPIO_Init+0x2d4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x1de>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a47      	ldr	r2, [pc, #284]	; (8000bb4 <HAL_GPIO_Init+0x2d8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x1da>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a46      	ldr	r2, [pc, #280]	; (8000bb8 <HAL_GPIO_Init+0x2dc>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x1d6>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a45      	ldr	r2, [pc, #276]	; (8000bbc <HAL_GPIO_Init+0x2e0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x1d2>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	e008      	b.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000aae:	2305      	movs	r3, #5
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e004      	b.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e002      	b.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	00d2      	lsls	r2, r2, #3
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ad0:	4936      	ldr	r1, [pc, #216]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3318      	adds	r3, #24
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000ade:	4a33      	ldr	r2, [pc, #204]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	58d3      	ldr	r3, [r2, r3]
 8000ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	43da      	mvns	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	4013      	ands	r3, r2
 8000aee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	025b      	lsls	r3, r3, #9
 8000af8:	4013      	ands	r3, r2
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b04:	4929      	ldr	r1, [pc, #164]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000b0c:	4a27      	ldr	r2, [pc, #156]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b0e:	2384      	movs	r3, #132	; 0x84
 8000b10:	58d3      	ldr	r3, [r2, r3]
 8000b12:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	029b      	lsls	r3, r3, #10
 8000b26:	4013      	ands	r3, r2
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000b32:	491e      	ldr	r1, [pc, #120]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b34:	2284      	movs	r2, #132	; 0x84
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43da      	mvns	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	4013      	ands	r3, r2
 8000b48:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	035b      	lsls	r3, r3, #13
 8000b52:	4013      	ands	r3, r2
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43da      	mvns	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	4013      	ands	r3, r2
 8000b72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	039b      	lsls	r3, r3, #14
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3301      	adds	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	40da      	lsrs	r2, r3
 8000b9c:	1e13      	subs	r3, r2, #0
 8000b9e:	d000      	beq.n	8000ba2 <HAL_GPIO_Init+0x2c6>
 8000ba0:	e6a4      	b.n	80008ec <HAL_GPIO_Init+0x10>
  }
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b006      	add	sp, #24
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	50000400 	.word	0x50000400
 8000bb4:	50000800 	.word	0x50000800
 8000bb8:	50000c00 	.word	0x50000c00
 8000bbc:	50001400 	.word	0x50001400

08000bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e082      	b.n	8000cd8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2241      	movs	r2, #65	; 0x41
 8000bd6:	5c9b      	ldrb	r3, [r3, r2]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	2100      	movs	r1, #0
 8000be4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fc73 	bl	80004d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2241      	movs	r2, #65	; 0x41
 8000bf2:	2124      	movs	r1, #36	; 0x24
 8000bf4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	438a      	bics	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <HAL_I2C_Init+0x120>)
 8000c10:	400a      	ands	r2, r1
 8000c12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4931      	ldr	r1, [pc, #196]	; (8000ce4 <HAL_I2C_Init+0x124>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d108      	bne.n	8000c3e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0209      	lsls	r1, r1, #8
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	e007      	b.n	8000c4e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2184      	movs	r1, #132	; 0x84
 8000c48:	0209      	lsls	r1, r1, #8
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d104      	bne.n	8000c60 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <HAL_I2C_Init+0x128>)
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	491a      	ldr	r1, [pc, #104]	; (8000ce4 <HAL_I2C_Init+0x124>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69d9      	ldr	r1, [r3, #28]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1a      	ldr	r2, [r3, #32]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2241      	movs	r2, #65	; 0x41
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2242      	movs	r2, #66	; 0x42
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	f0ffffff 	.word	0xf0ffffff
 8000ce4:	ffff7fff 	.word	0xffff7fff
 8000ce8:	02008000 	.word	0x02008000

08000cec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	0008      	movs	r0, r1
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	1c02      	adds	r2, r0, #0
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	2308      	movs	r3, #8
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	1c0a      	adds	r2, r1, #0
 8000d08:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2241      	movs	r2, #65	; 0x41
 8000d0e:	5c9b      	ldrb	r3, [r3, r2]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b20      	cmp	r3, #32
 8000d14:	d000      	beq.n	8000d18 <HAL_I2C_Master_Transmit+0x2c>
 8000d16:	e0e7      	b.n	8000ee8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	5c9b      	ldrb	r3, [r3, r2]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <HAL_I2C_Master_Transmit+0x3a>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e0e1      	b.n	8000eea <HAL_I2C_Master_Transmit+0x1fe>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d2e:	f7ff fd17 	bl	8000760 <HAL_GetTick>
 8000d32:	0003      	movs	r3, r0
 8000d34:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	0219      	lsls	r1, r3, #8
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2319      	movs	r3, #25
 8000d42:	2201      	movs	r2, #1
 8000d44:	f000 f8fc 	bl	8000f40 <I2C_WaitOnFlagUntilTimeout>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0cc      	b.n	8000eea <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2241      	movs	r2, #65	; 0x41
 8000d54:	2121      	movs	r1, #33	; 0x21
 8000d56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2242      	movs	r2, #66	; 0x42
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2208      	movs	r2, #8
 8000d70:	18ba      	adds	r2, r7, r2
 8000d72:	8812      	ldrh	r2, [r2, #0]
 8000d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d911      	bls.n	8000daa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	22ff      	movs	r2, #255	; 0xff
 8000d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	045c      	lsls	r4, r3, #17
 8000d96:	230a      	movs	r3, #10
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	8819      	ldrh	r1, [r3, #0]
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <HAL_I2C_Master_Transmit+0x208>)
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	0023      	movs	r3, r4
 8000da4:	f000 fa92 	bl	80012cc <I2C_TransferConfig>
 8000da8:	e075      	b.n	8000e96 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	049c      	lsls	r4, r3, #18
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	8819      	ldrh	r1, [r3, #0]
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <HAL_I2C_Master_Transmit+0x208>)
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	0023      	movs	r3, r4
 8000dcc:	f000 fa7e 	bl	80012cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000dd0:	e061      	b.n	8000e96 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 f8f0 	bl	8000fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e081      	b.n	8000eea <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d03a      	beq.n	8000e96 <HAL_I2C_Master_Transmit+0x1aa>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d136      	bne.n	8000e96 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	0013      	movs	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	f000 f883 	bl	8000f40 <I2C_WaitOnFlagUntilTimeout>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e053      	b.n	8000eea <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d911      	bls.n	8000e70 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	22ff      	movs	r2, #255	; 0xff
 8000e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	045c      	lsls	r4, r3, #17
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	8819      	ldrh	r1, [r3, #0]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	2300      	movs	r3, #0
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	0023      	movs	r3, r4
 8000e6a:	f000 fa2f 	bl	80012cc <I2C_TransferConfig>
 8000e6e:	e012      	b.n	8000e96 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	049c      	lsls	r4, r3, #18
 8000e84:	230a      	movs	r3, #10
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	8819      	ldrh	r1, [r3, #0]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	0023      	movs	r3, r4
 8000e92:	f000 fa1b 	bl	80012cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d198      	bne.n	8000dd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 f8c8 	bl	800103c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e01a      	b.n	8000eea <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2220      	movs	r2, #32
 8000eba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <HAL_I2C_Master_Transmit+0x20c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2241      	movs	r2, #65	; 0x41
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2242      	movs	r2, #66	; 0x42
 8000ed8:	2100      	movs	r1, #0
 8000eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2240      	movs	r2, #64	; 0x40
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e000      	b.n	8000eea <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8000ee8:	2302      	movs	r3, #2
  }
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b007      	add	sp, #28
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	80002000 	.word	0x80002000
 8000ef8:	fe00e800 	.word	0xfe00e800

08000efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d103      	bne.n	8000f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d007      	beq.n	8000f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699a      	ldr	r2, [r3, #24]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	619a      	str	r2, [r3, #24]
  }
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f50:	e021      	b.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	d01e      	beq.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f58:	f7ff fc02 	bl	8000760 <HAL_GetTick>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d302      	bcc.n	8000f6e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d113      	bne.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	2220      	movs	r2, #32
 8000f74:	431a      	orrs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2241      	movs	r2, #65	; 0x41
 8000f7e:	2120      	movs	r1, #32
 8000f80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2242      	movs	r2, #66	; 0x42
 8000f86:	2100      	movs	r1, #0
 8000f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2240      	movs	r2, #64	; 0x40
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	425a      	negs	r2, r3
 8000fa6:	4153      	adcs	r3, r2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	001a      	movs	r2, r3
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d0ce      	beq.n	8000f52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b004      	add	sp, #16
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fca:	e02b      	b.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 f86e 	bl	80010b4 <I2C_IsErrorOccurred>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d001      	beq.n	8000fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e029      	b.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	d01e      	beq.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fe6:	f7ff fbbb 	bl	8000760 <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d302      	bcc.n	8000ffc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d113      	bne.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	2220      	movs	r2, #32
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2241      	movs	r2, #65	; 0x41
 800100c:	2120      	movs	r1, #32
 800100e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2242      	movs	r2, #66	; 0x42
 8001014:	2100      	movs	r1, #0
 8001016:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e007      	b.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	2b02      	cmp	r3, #2
 8001030:	d1cc      	bne.n	8000fcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}

0800103c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001048:	e028      	b.n	800109c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 f82f 	bl	80010b4 <I2C_IsErrorOccurred>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e026      	b.n	80010ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800105e:	f7ff fb7f 	bl	8000760 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	429a      	cmp	r2, r3
 800106c:	d302      	bcc.n	8001074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d113      	bne.n	800109c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	2220      	movs	r2, #32
 800107a:	431a      	orrs	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2241      	movs	r2, #65	; 0x41
 8001084:	2120      	movs	r1, #32
 8001086:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2242      	movs	r2, #66	; 0x42
 800108c:	2100      	movs	r1, #0
 800108e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e007      	b.n	80010ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2220      	movs	r2, #32
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b20      	cmp	r3, #32
 80010a8:	d1cf      	bne.n	800104a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c0:	2327      	movs	r3, #39	; 0x27
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2210      	movs	r2, #16
 80010dc:	4013      	ands	r3, r2
 80010de:	d100      	bne.n	80010e2 <I2C_IsErrorOccurred+0x2e>
 80010e0:	e08e      	b.n	8001200 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2210      	movs	r2, #16
 80010e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010ea:	e06c      	b.n	80011c6 <I2C_IsErrorOccurred+0x112>
 80010ec:	2427      	movs	r4, #39	; 0x27
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	193a      	adds	r2, r7, r4
 80010f2:	7812      	ldrb	r2, [r2, #0]
 80010f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	d064      	beq.n	80011c6 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010fc:	f7ff fb30 	bl	8000760 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	429a      	cmp	r2, r3
 800110a:	d306      	bcc.n	800111a <I2C_IsErrorOccurred+0x66>
 800110c:	193b      	adds	r3, r7, r4
 800110e:	193a      	adds	r2, r7, r4
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d155      	bne.n	80011c6 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	01db      	lsls	r3, r3, #7
 8001124:	4013      	ands	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001128:	2013      	movs	r0, #19
 800112a:	183b      	adds	r3, r7, r0
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	2142      	movs	r1, #66	; 0x42
 8001130:	5c52      	ldrb	r2, [r2, r1]
 8001132:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	401a      	ands	r2, r3
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	429a      	cmp	r2, r3
 8001146:	d137      	bne.n	80011b8 <I2C_IsErrorOccurred+0x104>
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	01db      	lsls	r3, r3, #7
 800114e:	429a      	cmp	r2, r3
 8001150:	d032      	beq.n	80011b8 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8001152:	183b      	adds	r3, r7, r0
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b20      	cmp	r3, #32
 8001158:	d02e      	beq.n	80011b8 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	01c9      	lsls	r1, r1, #7
 8001168:	430a      	orrs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800116c:	f7ff faf8 	bl	8000760 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001174:	e020      	b.n	80011b8 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001176:	f7ff faf3 	bl	8000760 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2027      	movs	r0, #39	; 0x27
 8001182:	183a      	adds	r2, r7, r0
 8001184:	1839      	adds	r1, r7, r0
 8001186:	7809      	ldrb	r1, [r1, #0]
 8001188:	7011      	strb	r1, [r2, #0]
 800118a:	2b19      	cmp	r3, #25
 800118c:	d914      	bls.n	80011b8 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	2220      	movs	r2, #32
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2241      	movs	r2, #65	; 0x41
 800119e:	2120      	movs	r1, #32
 80011a0:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2242      	movs	r2, #66	; 0x42
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	2100      	movs	r1, #0
 80011b0:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80011b2:	183b      	adds	r3, r7, r0
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2220      	movs	r2, #32
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d1d7      	bne.n	8001176 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2220      	movs	r2, #32
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d004      	beq.n	80011de <I2C_IsErrorOccurred+0x12a>
 80011d4:	2327      	movs	r3, #39	; 0x27
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d086      	beq.n	80010ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80011de:	2327      	movs	r3, #39	; 0x27
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d103      	bne.n	80011f0 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2220      	movs	r2, #32
 80011ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2204      	movs	r2, #4
 80011f4:	4313      	orrs	r3, r2
 80011f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80011f8:	2327      	movs	r3, #39	; 0x27
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4013      	ands	r3, r2
 8001210:	d00c      	beq.n	800122c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2201      	movs	r2, #1
 8001216:	4313      	orrs	r3, r2
 8001218:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	0052      	lsls	r2, r2, #1
 8001222:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001224:	2327      	movs	r3, #39	; 0x27
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4013      	ands	r3, r2
 8001234:	d00c      	beq.n	8001250 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2208      	movs	r2, #8
 800123a:	4313      	orrs	r3, r2
 800123c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001248:	2327      	movs	r3, #39	; 0x27
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4013      	ands	r3, r2
 8001258:	d00c      	beq.n	8001274 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2202      	movs	r2, #2
 800125e:	4313      	orrs	r3, r2
 8001260:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800126c:	2327      	movs	r3, #39	; 0x27
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001274:	2327      	movs	r3, #39	; 0x27
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01d      	beq.n	80012ba <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff fe3b 	bl	8000efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <I2C_IsErrorOccurred+0x214>)
 8001292:	400a      	ands	r2, r1
 8001294:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	431a      	orrs	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2241      	movs	r2, #65	; 0x41
 80012a6:	2120      	movs	r1, #32
 80012a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2242      	movs	r2, #66	; 0x42
 80012ae:	2100      	movs	r1, #0
 80012b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2240      	movs	r2, #64	; 0x40
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80012ba:	2327      	movs	r3, #39	; 0x27
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b00b      	add	sp, #44	; 0x2c
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	fe00e800 	.word	0xfe00e800

080012cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	0008      	movs	r0, r1
 80012d6:	0011      	movs	r1, r2
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	240a      	movs	r4, #10
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	1c02      	adds	r2, r0, #0
 80012e0:	801a      	strh	r2, [r3, #0]
 80012e2:	2009      	movs	r0, #9
 80012e4:	183b      	adds	r3, r7, r0
 80012e6:	1c0a      	adds	r2, r1, #0
 80012e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	059b      	lsls	r3, r3, #22
 80012f0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80012f2:	183b      	adds	r3, r7, r0
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0419      	lsls	r1, r3, #16
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	4313      	orrs	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001316:	0d51      	lsrs	r1, r2, #21
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	00d2      	lsls	r2, r2, #3
 800131c:	400a      	ands	r2, r1
 800131e:	4907      	ldr	r1, [pc, #28]	; (800133c <I2C_TransferConfig+0x70>)
 8001320:	430a      	orrs	r2, r1
 8001322:	43d2      	mvns	r2, r2
 8001324:	401a      	ands	r2, r3
 8001326:	0011      	movs	r1, r2
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b007      	add	sp, #28
 8001338:	bd90      	pop	{r4, r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	03ff63ff 	.word	0x03ff63ff

08001340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2241      	movs	r2, #65	; 0x41
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b20      	cmp	r3, #32
 8001354:	d138      	bne.n	80013c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2240      	movs	r2, #64	; 0x40
 800135a:	5c9b      	ldrb	r3, [r3, r2]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001360:	2302      	movs	r3, #2
 8001362:	e032      	b.n	80013ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	2101      	movs	r1, #1
 800136a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2241      	movs	r2, #65	; 0x41
 8001370:	2124      	movs	r1, #36	; 0x24
 8001372:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2101      	movs	r1, #1
 8001380:	438a      	bics	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4911      	ldr	r1, [pc, #68]	; (80013d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6819      	ldr	r1, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2241      	movs	r2, #65	; 0x41
 80013b8:	2120      	movs	r1, #32
 80013ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	2100      	movs	r1, #0
 80013c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013c8:	2302      	movs	r3, #2
  }
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	ffffefff 	.word	0xffffefff

080013d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2241      	movs	r2, #65	; 0x41
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d139      	bne.n	8001462 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2240      	movs	r2, #64	; 0x40
 80013f2:	5c9b      	ldrb	r3, [r3, r2]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e033      	b.n	8001464 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	2101      	movs	r1, #1
 8001402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2241      	movs	r2, #65	; 0x41
 8001408:	2124      	movs	r1, #36	; 0x24
 800140a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2241      	movs	r2, #65	; 0x41
 8001452:	2120      	movs	r1, #32
 8001454:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001462:	2302      	movs	r3, #2
  }
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}
 800146c:	fffff0ff 	.word	0xfffff0ff

08001470 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1e5      	b.n	800184e <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2201      	movs	r2, #1
 8001488:	4013      	ands	r3, r2
 800148a:	d100      	bne.n	800148e <HAL_RCC_OscConfig+0x1e>
 800148c:	e06f      	b.n	800156e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148e:	4bc4      	ldr	r3, [pc, #784]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2238      	movs	r2, #56	; 0x38
 8001494:	4013      	ands	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d10b      	bne.n	80014b6 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149e:	4bc0      	ldr	r3, [pc, #768]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d061      	beq.n	800156e <HAL_RCC_OscConfig+0xfe>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d15d      	bne.n	800156e <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1cb      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	429a      	cmp	r2, r3
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_OscConfig+0x62>
 80014c2:	4bb7      	ldr	r3, [pc, #732]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4bb6      	ldr	r3, [pc, #728]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0249      	lsls	r1, r1, #9
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e020      	b.n	8001514 <HAL_RCC_OscConfig+0xa4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	02db      	lsls	r3, r3, #11
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10e      	bne.n	80014fc <HAL_RCC_OscConfig+0x8c>
 80014de:	4bb0      	ldr	r3, [pc, #704]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4baf      	ldr	r3, [pc, #700]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	02c9      	lsls	r1, r1, #11
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	4bac      	ldr	r3, [pc, #688]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4bab      	ldr	r3, [pc, #684]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0249      	lsls	r1, r1, #9
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xa4>
 80014fc:	4ba8      	ldr	r3, [pc, #672]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4ba7      	ldr	r3, [pc, #668]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001502:	49a8      	ldr	r1, [pc, #672]	; (80017a4 <HAL_RCC_OscConfig+0x334>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4ba5      	ldr	r3, [pc, #660]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4ba4      	ldr	r3, [pc, #656]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800150e:	49a6      	ldr	r1, [pc, #664]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d014      	beq.n	8001546 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff f920 	bl	8000760 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001526:	f7ff f91b 	bl	8000760 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e18a      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001538:	4b99      	ldr	r3, [pc, #612]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0xb6>
 8001544:	e013      	b.n	800156e <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff f90b 	bl	8000760 <HAL_GetTick>
 800154a:	0003      	movs	r3, r0
 800154c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff f906 	bl	8000760 <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e175      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001562:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x10a>
 8001578:	e08c      	b.n	8001694 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2238      	movs	r2, #56	; 0x38
 8001580:	4013      	ands	r3, r2
 8001582:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d135      	bne.n	80015f6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4013      	ands	r3, r2
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x132>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e155      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a81      	ldr	r2, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x33c>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	021a      	lsls	r2, r3, #8
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d112      	bne.n	80015e4 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7b      	ldr	r2, [pc, #492]	; (80017b0 <HAL_RCC_OscConfig+0x340>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0adb      	lsrs	r3, r3, #11
 80015d8:	2207      	movs	r2, #7
 80015da:	4013      	ands	r3, r2
 80015dc:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x344>)
 80015de:	40da      	lsrs	r2, r3
 80015e0:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x348>)
 80015e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015e4:	4b75      	ldr	r3, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x34c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff f85f 	bl	80006ac <HAL_InitTick>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d050      	beq.n	8001694 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e12b      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d030      	beq.n	8001660 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015fe:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6b      	ldr	r2, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x340>)
 8001604:	4013      	ands	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	4b64      	ldr	r3, [pc, #400]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0049      	lsls	r1, r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff f89e 	bl	8000760 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff f899 	bl	8000760 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e108      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4013      	ands	r3, r2
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x33c>)
 800164e:	4013      	ands	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	021a      	lsls	r2, r3, #8
 8001658:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e019      	b.n	8001694 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001660:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001666:	4956      	ldr	r1, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x350>)
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff f878 	bl	8000760 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff f873 	bl	8000760 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0e2      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4013      	ands	r3, r2
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2208      	movs	r2, #8
 800169a:	4013      	ands	r3, r2
 800169c:	d047      	beq.n	800172e <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2238      	movs	r2, #56	; 0x38
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b18      	cmp	r3, #24
 80016a8:	d10a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d03c      	beq.n	800172e <HAL_RCC_OscConfig+0x2be>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d138      	bne.n	800172e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0c6      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d019      	beq.n	80016fc <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80016ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff f844 	bl	8000760 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff f83f 	bl	8000760 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0ae      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f1      	beq.n	80016de <HAL_RCC_OscConfig+0x26e>
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 80016fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff f82a 	bl	8000760 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff f825 	bl	8000760 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e094      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d1f1      	bne.n	8001712 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2204      	movs	r2, #4
 8001734:	4013      	ands	r3, r2
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x2ca>
 8001738:	e088      	b.n	800184c <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	230f      	movs	r3, #15
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2238      	movs	r2, #56	; 0x38
 8001748:	4013      	ands	r3, r2
 800174a:	2b20      	cmp	r3, #32
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 8001758:	e078      	b.n	800184c <HAL_RCC_OscConfig+0x3dc>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d000      	beq.n	8001764 <HAL_RCC_OscConfig+0x2f4>
 8001762:	e073      	b.n	800184c <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e072      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x30e>
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c
 800177c:	e02e      	b.n	80017dc <HAL_RCC_OscConfig+0x36c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d11e      	bne.n	80017c4 <HAL_RCC_OscConfig+0x354>
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001788:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 800178c:	2104      	movs	r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001796:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_RCC_OscConfig+0x330>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	65da      	str	r2, [r3, #92]	; 0x5c
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0x36c>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	fffeffff 	.word	0xfffeffff
 80017a8:	fffbffff 	.word	0xfffbffff
 80017ac:	ffff80ff 	.word	0xffff80ff
 80017b0:	ffffc7ff 	.word	0xffffc7ff
 80017b4:	02dc6c00 	.word	0x02dc6c00
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004
 80017c0:	fffffeff 	.word	0xfffffeff
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 80017c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	438a      	bics	r2, r1
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 80017d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 80017d6:	2104      	movs	r1, #4
 80017d8:	438a      	bics	r2, r1
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d014      	beq.n	800180e <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7fe ffbc 	bl	8000760 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7fe ffb7 	bl	8000760 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a18      	ldr	r2, [pc, #96]	; (800185c <HAL_RCC_OscConfig+0x3ec>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e025      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x37e>
 800180c:	e013      	b.n	8001836 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7fe ffa7 	bl	8000760 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001816:	e009      	b.n	800182c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7fe ffa2 	bl	8000760 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_RCC_OscConfig+0x3ec>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e010      	b.n	800184e <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001836:	230f      	movs	r3, #15
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 8001842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_RCC_OscConfig+0x3e8>)
 8001846:	4906      	ldr	r1, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x3f0>)
 8001848:	400a      	ands	r2, r1
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b006      	add	sp, #24
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40021000 	.word	0x40021000
 800185c:	00001388 	.word	0x00001388
 8001860:	efffffff 	.word	0xefffffff

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0e9      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2207      	movs	r2, #7
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d91e      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2207      	movs	r2, #7
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001898:	f7fe ff62 	bl	8000760 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a0:	e009      	b.n	80018b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a2:	f7fe ff5d 	bl	8000760 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <HAL_RCC_ClockConfig+0x1f4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0ca      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2207      	movs	r2, #7
 80018bc:	4013      	ands	r3, r2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1ee      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d017      	beq.n	80018fe <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a60      	ldr	r2, [pc, #384]	; (8001a60 <HAL_RCC_ClockConfig+0x1fc>)
 80018de:	401a      	ands	r2, r3
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018e2:	21b0      	movs	r1, #176	; 0xb0
 80018e4:	0109      	lsls	r1, r1, #4
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_ClockConfig+0x200>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	4013      	ands	r3, r2
 8001906:	d055      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001908:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	221c      	movs	r2, #28
 800190e:	4393      	bics	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	4013      	ands	r3, r2
 800192e:	d11f      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e08b      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4013      	ands	r3, r2
 8001946:	d113      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e07f      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d106      	bne.n	8001962 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001954:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d108      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e074      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e06d      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2207      	movs	r2, #7
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001980:	430a      	orrs	r2, r1
 8001982:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001984:	f7fe feec 	bl	8000760 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198c:	e009      	b.n	80019a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f7fe fee7 	bl	8000760 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <HAL_RCC_ClockConfig+0x1f4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e054      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2238      	movs	r2, #56	; 0x38
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1ec      	bne.n	800198e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2207      	movs	r2, #7
 80019ba:	4013      	ands	r3, r2
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d21e      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2207      	movs	r2, #7
 80019c8:	4393      	bics	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d4:	f7fe fec4 	bl	8000760 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	f7fe febf 	bl	8000760 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_RCC_ClockConfig+0x1f4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e02c      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2204      	movs	r2, #4
 8001a06:	4013      	ands	r3, r2
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x204>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	f000 f82b 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a22:	0001      	movs	r1, r0
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_RCC_ClockConfig+0x208>)
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	58d3      	ldr	r3, [r2, r3]
 8001a34:	221f      	movs	r2, #31
 8001a36:	4013      	ands	r3, r2
 8001a38:	000a      	movs	r2, r1
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_ClockConfig+0x20c>)
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_RCC_ClockConfig+0x210>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fe31 	bl	80006ac <HAL_InitTick>
 8001a4a:	0003      	movs	r3, r0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	ffff84ff 	.word	0xffff84ff
 8001a64:	fffff0ff 	.word	0xfffff0ff
 8001a68:	ffff8fff 	.word	0xffff8fff
 8001a6c:	08001d68 	.word	0x08001d68
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2238      	movs	r2, #56	; 0x38
 8001a84:	4013      	ands	r3, r2
 8001a86:	d10f      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0adb      	lsrs	r3, r3, #11
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4013      	ands	r3, r2
 8001a92:	2201      	movs	r2, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a9a:	6839      	ldr	r1, [r7, #0]
 8001a9c:	4815      	ldr	r0, [pc, #84]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001a9e:	f7fe fb33 	bl	8000108 <__udivsi3>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	e01e      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2238      	movs	r2, #56	; 0x38
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2238      	movs	r2, #56	; 0x38
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d103      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e00b      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2238      	movs	r2, #56	; 0x38
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b18      	cmp	r3, #24
 8001ad8:	d103      	bne.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ada:	23fa      	movs	r3, #250	; 0xfa
 8001adc:	01db      	lsls	r3, r3, #7
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001ae6:	687b      	ldr	r3, [r7, #4]
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	02dc6c00 	.word	0x02dc6c00
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b04:	2313      	movs	r3, #19
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b20:	e079      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2011      	movs	r0, #17
 8001b24:	183b      	adds	r3, r7, r0
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	055b      	lsls	r3, r3, #21
 8001b32:	4013      	ands	r3, r2
 8001b34:	d110      	bne.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3a:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	0549      	lsls	r1, r1, #21
 8001b40:	430a      	orrs	r2, r1
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b44:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	055b      	lsls	r3, r3, #21
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	183b      	adds	r3, r7, r0
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001b58:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d019      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d014      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b7e:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b82:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	0249      	lsls	r1, r1, #9
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b90:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b92:	494c      	ldr	r1, [pc, #304]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fddb 	bl	8000760 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001bae:	e00c      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7fe fdd6 	bl	8000760 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d904      	bls.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001bc0:	2313      	movs	r3, #19
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	701a      	strb	r2, [r3, #0]
          break;
 8001bc8:	e004      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0ed      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001bd4:	2313      	movs	r3, #19
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	4a37      	ldr	r2, [pc, #220]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf2:	e005      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bf4:	2312      	movs	r3, #18
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	2213      	movs	r2, #19
 8001bfa:	18ba      	adds	r2, r7, r2
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c00:	2311      	movs	r3, #17
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d105      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c10:	492e      	ldr	r1, [pc, #184]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	2203      	movs	r2, #3
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	01db      	lsls	r3, r3, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d008      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	0899      	lsrs	r1, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da09      	bge.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	22e0      	movs	r2, #224	; 0xe0
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001cac:	2312      	movs	r3, #18
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b006      	add	sp, #24
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	fffffcff 	.word	0xfffffcff
 8001cc4:	fffeffff 	.word	0xfffeffff
 8001cc8:	00001388 	.word	0x00001388
 8001ccc:	efffffff 	.word	0xefffffff
 8001cd0:	ffffcfff 	.word	0xffffcfff
 8001cd4:	ffff3fff 	.word	0xffff3fff

08001cd8 <__libc_init_array>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	2600      	movs	r6, #0
 8001cdc:	4d0c      	ldr	r5, [pc, #48]	; (8001d10 <__libc_init_array+0x38>)
 8001cde:	4c0d      	ldr	r4, [pc, #52]	; (8001d14 <__libc_init_array+0x3c>)
 8001ce0:	1b64      	subs	r4, r4, r5
 8001ce2:	10a4      	asrs	r4, r4, #2
 8001ce4:	42a6      	cmp	r6, r4
 8001ce6:	d109      	bne.n	8001cfc <__libc_init_array+0x24>
 8001ce8:	2600      	movs	r6, #0
 8001cea:	f000 f821 	bl	8001d30 <_init>
 8001cee:	4d0a      	ldr	r5, [pc, #40]	; (8001d18 <__libc_init_array+0x40>)
 8001cf0:	4c0a      	ldr	r4, [pc, #40]	; (8001d1c <__libc_init_array+0x44>)
 8001cf2:	1b64      	subs	r4, r4, r5
 8001cf4:	10a4      	asrs	r4, r4, #2
 8001cf6:	42a6      	cmp	r6, r4
 8001cf8:	d105      	bne.n	8001d06 <__libc_init_array+0x2e>
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	00b3      	lsls	r3, r6, #2
 8001cfe:	58eb      	ldr	r3, [r5, r3]
 8001d00:	4798      	blx	r3
 8001d02:	3601      	adds	r6, #1
 8001d04:	e7ee      	b.n	8001ce4 <__libc_init_array+0xc>
 8001d06:	00b3      	lsls	r3, r6, #2
 8001d08:	58eb      	ldr	r3, [r5, r3]
 8001d0a:	4798      	blx	r3
 8001d0c:	3601      	adds	r6, #1
 8001d0e:	e7f2      	b.n	8001cf6 <__libc_init_array+0x1e>
 8001d10:	08001da8 	.word	0x08001da8
 8001d14:	08001da8 	.word	0x08001da8
 8001d18:	08001da8 	.word	0x08001da8
 8001d1c:	08001dac 	.word	0x08001dac

08001d20 <memset>:
 8001d20:	0003      	movs	r3, r0
 8001d22:	1882      	adds	r2, r0, r2
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d100      	bne.n	8001d2a <memset+0xa>
 8001d28:	4770      	bx	lr
 8001d2a:	7019      	strb	r1, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	e7f9      	b.n	8001d24 <memset+0x4>

08001d30 <_init>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr

08001d3c <_fini>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr

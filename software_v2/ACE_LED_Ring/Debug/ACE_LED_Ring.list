
ACE_LED_Ring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ac  080036ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080036ac  080036ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ac  080036ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080036c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080036c0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c95  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cc  00000000  00000000  00030cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00033598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ed2  00000000  00000000  00034f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fb6  00000000  00000000  00049e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b6c6  00000000  00000000  0005cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d847e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e78  00000000  00000000  000d84d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035fc 	.word	0x080035fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080035fc 	.word	0x080035fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__clzsi2>:
 8000220:	211c      	movs	r1, #28
 8000222:	2301      	movs	r3, #1
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	4298      	cmp	r0, r3
 8000228:	d301      	bcc.n	800022e <__clzsi2+0xe>
 800022a:	0c00      	lsrs	r0, r0, #16
 800022c:	3910      	subs	r1, #16
 800022e:	0a1b      	lsrs	r3, r3, #8
 8000230:	4298      	cmp	r0, r3
 8000232:	d301      	bcc.n	8000238 <__clzsi2+0x18>
 8000234:	0a00      	lsrs	r0, r0, #8
 8000236:	3908      	subs	r1, #8
 8000238:	091b      	lsrs	r3, r3, #4
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0x22>
 800023e:	0900      	lsrs	r0, r0, #4
 8000240:	3904      	subs	r1, #4
 8000242:	a202      	add	r2, pc, #8	; (adr r2, 800024c <__clzsi2+0x2c>)
 8000244:	5c10      	ldrb	r0, [r2, r0]
 8000246:	1840      	adds	r0, r0, r1
 8000248:	4770      	bx	lr
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	02020304 	.word	0x02020304
 8000250:	01010101 	.word	0x01010101
	...

0800025c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b08d      	sub	sp, #52	; 0x34
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	681c      	ldr	r4, [r3, #0]
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	61bb      	str	r3, [r7, #24]
#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
#else
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000270:	231f      	movs	r3, #31
 8000272:	617b      	str	r3, [r7, #20]

  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	085b      	lsrs	r3, r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
 800027e:	e00e      	b.n	800029e <LL_GPIO_SetPinMode+0x42>
  {
    result <<= 1U;
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8000286:	69bb      	ldr	r3, [r7, #24]
 8000288:	2201      	movs	r2, #1
 800028a:	4013      	ands	r3, r2
 800028c:	693a      	ldr	r2, [r7, #16]
 800028e:	4313      	orrs	r3, r2
 8000290:	613b      	str	r3, [r7, #16]
    s--;
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	3b01      	subs	r3, #1
 8000296:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	085b      	lsrs	r3, r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ed      	bne.n	8000280 <LL_GPIO_SetPinMode+0x24>
  }
  result <<= s;                        /* shift when v's highest bits are zero */
 80002a4:	693a      	ldr	r2, [r7, #16]
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	409a      	lsls	r2, r3
 80002aa:	0013      	movs	r3, r2
 80002ac:	613b      	str	r3, [r7, #16]
#endif
  return result;
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <LL_GPIO_SetPinMode+0x60>
  {
    return 32U;
 80002b8:	2320      	movs	r3, #32
 80002ba:	e004      	b.n	80002c6 <LL_GPIO_SetPinMode+0x6a>
  }
  return __builtin_clz(value);
 80002bc:	69f8      	ldr	r0, [r7, #28]
 80002be:	f7ff ffaf 	bl	8000220 <__clzsi2>
 80002c2:	0003      	movs	r3, r0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	2203      	movs	r2, #3
 80002ca:	409a      	lsls	r2, r3
 80002cc:	0013      	movs	r3, r2
 80002ce:	43db      	mvns	r3, r3
 80002d0:	401c      	ands	r4, r3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80002d6:	231f      	movs	r3, #31
 80002d8:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80002da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002dc:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80002de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002e0:	085b      	lsrs	r3, r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80002e4:	e00e      	b.n	8000304 <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80002ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ee:	2201      	movs	r2, #1
 80002f0:	4013      	ands	r3, r2
 80002f2:	6a3a      	ldr	r2, [r7, #32]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	623b      	str	r3, [r7, #32]
    s--;
 80002f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fa:	3b01      	subs	r3, #1
 80002fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 80002fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000300:	085b      	lsrs	r3, r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
 8000304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1ed      	bne.n	80002e6 <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800030a:	6a3a      	ldr	r2, [r7, #32]
 800030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030e:	409a      	lsls	r2, r3
 8000310:	0013      	movs	r3, r2
 8000312:	623b      	str	r3, [r7, #32]
  return result;
 8000314:	6a3b      	ldr	r3, [r7, #32]
 8000316:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 800031e:	2320      	movs	r3, #32
 8000320:	e004      	b.n	800032c <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 8000322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000324:	f7ff ff7c 	bl	8000220 <__clzsi2>
 8000328:	0003      	movs	r3, r0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	409a      	lsls	r2, r3
 8000332:	0013      	movs	r3, r2
 8000334:	0022      	movs	r2, r4
 8000336:	431a      	orrs	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b00d      	add	sp, #52	; 0x34
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b08d      	sub	sp, #52	; 0x34
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68dc      	ldr	r4, [r3, #12]
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000358:	231f      	movs	r3, #31
 800035a:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	085b      	lsrs	r3, r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
 8000366:	e00e      	b.n	8000386 <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	2201      	movs	r2, #1
 8000372:	4013      	ands	r3, r2
 8000374:	693a      	ldr	r2, [r7, #16]
 8000376:	4313      	orrs	r3, r2
 8000378:	613b      	str	r3, [r7, #16]
    s--;
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3b01      	subs	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	085b      	lsrs	r3, r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1ed      	bne.n	8000368 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 800038c:	693a      	ldr	r2, [r7, #16]
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	409a      	lsls	r2, r3
 8000392:	0013      	movs	r3, r2
 8000394:	613b      	str	r3, [r7, #16]
  return result;
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d101      	bne.n	80003a4 <LL_GPIO_SetPinPull+0x60>
    return 32U;
 80003a0:	2320      	movs	r3, #32
 80003a2:	e004      	b.n	80003ae <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 80003a4:	69f8      	ldr	r0, [r7, #28]
 80003a6:	f7ff ff3b 	bl	8000220 <__clzsi2>
 80003aa:	0003      	movs	r3, r0
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	2203      	movs	r2, #3
 80003b2:	409a      	lsls	r2, r3
 80003b4:	0013      	movs	r3, r2
 80003b6:	43db      	mvns	r3, r3
 80003b8:	401c      	ands	r4, r3
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80003be:	231f      	movs	r3, #31
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80003c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c4:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80003c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c8:	085b      	lsrs	r3, r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80003cc:	e00e      	b.n	80003ec <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 80003ce:	6a3b      	ldr	r3, [r7, #32]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	6a3a      	ldr	r2, [r7, #32]
 80003dc:	4313      	orrs	r3, r2
 80003de:	623b      	str	r3, [r7, #32]
    s--;
 80003e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e2:	3b01      	subs	r3, #1
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 80003e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80003ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1ed      	bne.n	80003ce <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 80003f2:	6a3a      	ldr	r2, [r7, #32]
 80003f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f6:	409a      	lsls	r2, r3
 80003f8:	0013      	movs	r3, r2
 80003fa:	623b      	str	r3, [r7, #32]
  return result;
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000402:	2b00      	cmp	r3, #0
 8000404:	d101      	bne.n	800040a <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 8000406:	2320      	movs	r3, #32
 8000408:	e004      	b.n	8000414 <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 800040a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800040c:	f7ff ff08 	bl	8000220 <__clzsi2>
 8000410:	0003      	movs	r3, r0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	409a      	lsls	r2, r3
 800041a:	0013      	movs	r3, r2
 800041c:	0022      	movs	r2, r4
 800041e:	431a      	orrs	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	60da      	str	r2, [r3, #12]
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b00d      	add	sp, #52	; 0x34
 800042a:	bd90      	pop	{r4, r7, pc}

0800042c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}

08000444 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << \
 800044e:	4a0f      	ldr	r2, [pc, #60]	; (800048c <LL_EXTI_SetEXTISource+0x48>)
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	2103      	movs	r1, #3
 8000454:	400b      	ands	r3, r1
 8000456:	3318      	adds	r3, #24
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	589b      	ldr	r3, [r3, r2]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	0c12      	lsrs	r2, r2, #16
 8000460:	2107      	movs	r1, #7
 8000462:	4091      	lsls	r1, r2
 8000464:	000a      	movs	r2, r1
 8000466:	43d2      	mvns	r2, r2
 8000468:	401a      	ands	r2, r3
 800046a:	0011      	movs	r1, r2
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	0c1b      	lsrs	r3, r3, #16
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	409a      	lsls	r2, r3
 8000474:	4805      	ldr	r0, [pc, #20]	; (800048c <LL_EXTI_SetEXTISource+0x48>)
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2403      	movs	r4, #3
 800047a:	4023      	ands	r3, r4
 800047c:	430a      	orrs	r2, r1
 800047e:	3318      	adds	r3, #24
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	501a      	str	r2, [r3, r0]
             (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b003      	add	sp, #12
 800048a:	bd90      	pop	{r4, r7, pc}
 800048c:	40021800 	.word	0x40021800

08000490 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800049a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80004a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4013      	ands	r3, r2
 80004ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ae:	68fb      	ldr	r3, [r7, #12]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000

080004bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b089      	sub	sp, #36	; 0x24
 80004c0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80004c2:	2418      	movs	r4, #24
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2308      	movs	r3, #8
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 f88d 	bl	80035ec <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2318      	movs	r3, #24
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 f886 	bl	80035ec <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80004e0:	2004      	movs	r0, #4
 80004e2:	f7ff ffd5 	bl	8000490 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f7ff ffd2 	bl	8000490 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80004ec:	2002      	movs	r0, #2
 80004ee:	f7ff ffcf 	bl	8000490 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(ACE_EN_GPIO_Port, ACE_EN_Pin);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	021b      	lsls	r3, r3, #8
 80004f6:	4a88      	ldr	r2, [pc, #544]	; (8000718 <MX_GPIO_Init+0x25c>)
 80004f8:	0019      	movs	r1, r3
 80004fa:	0010      	movs	r0, r2
 80004fc:	f7ff ff96 	bl	800042c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TP1_GPIO_Port, TP1_Pin);
 8000500:	4b86      	ldr	r3, [pc, #536]	; (800071c <MX_GPIO_Init+0x260>)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff91 	bl	800042c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ACE_EN_Pin;
 800050a:	003b      	movs	r3, r7
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	0212      	lsls	r2, r2, #8
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000512:	003b      	movs	r3, r7
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800051e:	003b      	movs	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000524:	003b      	movs	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE_EN_GPIO_Port, &GPIO_InitStruct);
 800052a:	003b      	movs	r3, r7
 800052c:	4a7a      	ldr	r2, [pc, #488]	; (8000718 <MX_GPIO_Init+0x25c>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f002 ff79 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_Pin;
 8000536:	003b      	movs	r3, r7
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800053c:	003b      	movs	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000542:	003b      	movs	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000548:	003a      	movs	r2, r7
 800054a:	23a0      	movs	r3, #160	; 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f002 ff69 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000556:	003b      	movs	r3, r7
 8000558:	2220      	movs	r2, #32
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800055c:	003b      	movs	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000562:	003b      	movs	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000568:	003a      	movs	r2, r7
 800056a:	23a0      	movs	r3, #160	; 0xa0
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f002 ff59 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE8_Pin;
 8000576:	003b      	movs	r3, r7
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE8_GPIO_Port, &GPIO_InitStruct);
 8000588:	003a      	movs	r2, r7
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f002 ff49 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE7_Pin;
 8000596:	003b      	movs	r3, r7
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE7_GPIO_Port, &GPIO_InitStruct);
 80005a8:	003a      	movs	r2, r7
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 ff39 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE6_Pin;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE6_GPIO_Port, &GPIO_InitStruct);
 80005c8:	003b      	movs	r3, r7
 80005ca:	4a54      	ldr	r2, [pc, #336]	; (800071c <MX_GPIO_Init+0x260>)
 80005cc:	0019      	movs	r1, r3
 80005ce:	0010      	movs	r0, r2
 80005d0:	f002 ff2a 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE5_Pin;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2202      	movs	r2, #2
 80005d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80005da:	003b      	movs	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005e0:	003b      	movs	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE5_GPIO_Port, &GPIO_InitStruct);
 80005e6:	003b      	movs	r3, r7
 80005e8:	4a4c      	ldr	r2, [pc, #304]	; (800071c <MX_GPIO_Init+0x260>)
 80005ea:	0019      	movs	r1, r3
 80005ec:	0010      	movs	r0, r2
 80005ee:	f002 ff1b 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE2_Pin;
 80005f2:	003b      	movs	r3, r7
 80005f4:	2240      	movs	r2, #64	; 0x40
 80005f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005fe:	003b      	movs	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE2_GPIO_Port, &GPIO_InitStruct);
 8000604:	003b      	movs	r3, r7
 8000606:	4a44      	ldr	r2, [pc, #272]	; (8000718 <MX_GPIO_Init+0x25c>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f002 ff0c 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE3_Pin;
 8000610:	003b      	movs	r3, r7
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE3_GPIO_Port, &GPIO_InitStruct);
 8000624:	003a      	movs	r2, r7
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fefb 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE4_Pin;
 8000632:	003b      	movs	r3, r7
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0152      	lsls	r2, r2, #5
 8000638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800063a:	003b      	movs	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000640:	003b      	movs	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE4_GPIO_Port, &GPIO_InitStruct);
 8000646:	003a      	movs	r2, r7
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f002 feea 	bl	8003428 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TP1_Pin;
 8000654:	003b      	movs	r3, r7
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800065a:	003b      	movs	r3, r7
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000660:	003b      	movs	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000666:	003b      	movs	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800066c:	003b      	movs	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 8000672:	003b      	movs	r3, r7
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <MX_GPIO_Init+0x260>)
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f002 fed5 	bl	8003428 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTA, LL_EXTI_CONFIG_LINE8);
 800067e:	2102      	movs	r1, #2
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fedf 	bl	8000444 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTB, LL_EXTI_CONFIG_LINE6);
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_GPIO_Init+0x264>)
 8000688:	0019      	movs	r1, r3
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff feda 	bl	8000444 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80006ac:	000c      	movs	r4, r1
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 fbd5 	bl	8002e60 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80006b6:	0021      	movs	r1, r4
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2240      	movs	r2, #64	; 0x40
 80006bc:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2201      	movs	r2, #1
 80006c2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fbc4 	bl	8002e60 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ACE1_GPIO_Port, ACE1_Pin, LL_GPIO_PULL_NO);
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	0059      	lsls	r1, r3, #1
 80006dc:	23a0      	movs	r3, #160	; 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff fe2e 	bl	8000344 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TP2_GPIO_Port, TP2_Pin, LL_GPIO_PULL_NO);
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_GPIO_Init+0x260>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fe28 	bl	8000344 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ACE1_GPIO_Port, ACE1_Pin, LL_GPIO_MODE_INPUT);
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	0059      	lsls	r1, r3, #1
 80006f8:	23a0      	movs	r3, #160	; 0xa0
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	2200      	movs	r2, #0
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff fdac 	bl	800025c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TP2_GPIO_Port, TP2_Pin, LL_GPIO_MODE_INPUT);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_GPIO_Init+0x260>)
 8000706:	2200      	movs	r2, #0
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff fda6 	bl	800025c <LL_GPIO_SetPinMode>

}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b009      	add	sp, #36	; 0x24
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	50000800 	.word	0x50000800
 800071c:	50000400 	.word	0x50000400
 8000720:	00100001 	.word	0x00100001

08000724 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x74>)
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fdd1 	bl	8001308 <HAL_I2C_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076a:	f000 f974 	bl	8000a56 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x74>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f988 	bl	8001a88 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 f96b 	bl	8000a56 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_I2C1_Init+0x74>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f9cb 	bl	8001b20 <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f962 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000028 	.word	0x20000028
 800079c:	40005400 	.word	0x40005400
 80007a0:	2010091a 	.word	0x2010091a

080007a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b093      	sub	sp, #76	; 0x4c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	0018      	movs	r0, r3
 80007b2:	2314      	movs	r3, #20
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 ff18 	bl	80035ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	2418      	movs	r4, #24
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	231c      	movs	r3, #28
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f002 ff10 	bl	80035ec <memset>
  if(i2cHandle->Instance==I2C1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a34      	ldr	r2, [pc, #208]	; (80008a4 <HAL_I2C_MspInit+0x100>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d162      	bne.n	800089c <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2240      	movs	r2, #64	; 0x40
 80007da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fd4f 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007ee:	f000 f932 	bl	8000a56 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 80007f8:	2104      	movs	r1, #4
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2204      	movs	r2, #4
 8000804:	4013      	ands	r3, r2
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000810:	2102      	movs	r1, #2
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2202      	movs	r2, #2
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000822:	2134      	movs	r1, #52	; 0x34
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	01d2      	lsls	r2, r2, #7
 800082a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082c:	000c      	movs	r4, r1
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2212      	movs	r2, #18
 8000832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	220e      	movs	r2, #14
 8000844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	193b      	adds	r3, r7, r4
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <HAL_I2C_MspInit+0x108>)
 800084a:	0019      	movs	r1, r3
 800084c:	0010      	movs	r0, r2
 800084e:	f000 fbe9 	bl	8001024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000852:	0021      	movs	r1, r4
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2212      	movs	r2, #18
 8000860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2206      	movs	r2, #6
 8000872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	187b      	adds	r3, r7, r1
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_I2C_MspInit+0x10c>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f000 fbd2 	bl	8001024 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	0389      	lsls	r1, r1, #14
 800088a:	430a      	orrs	r2, r1
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	039b      	lsls	r3, r3, #14
 8000896:	4013      	ands	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b013      	add	sp, #76	; 0x4c
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40005400 	.word	0x40005400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000800 	.word	0x50000800
 80008b0:	50000400 	.word	0x50000400

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fa84 	bl	8000dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f887 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f7ff fdfb 	bl	80004bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80008c6:	f7ff ff2d 	bl	8000724 <MX_I2C1_Init>
  MX_SPI1_Init();
 80008ca:	f000 f8c9 	bl	8000a60 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008ce:	f000 f9d1 	bl	8000c74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t arr[2] = {0xCF, 0xAE};
 80008d2:	2314      	movs	r3, #20
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <main+0x10c>)
 80008d8:	801a      	strh	r2, [r3, #0]


  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr, 2, 100) == HAL_BUSY){}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	2314      	movs	r3, #20
 80008de:	18fa      	adds	r2, r7, r3
 80008e0:	4838      	ldr	r0, [pc, #224]	; (80009c4 <main+0x110>)
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2302      	movs	r3, #2
 80008e8:	2168      	movs	r1, #104	; 0x68
 80008ea:	f000 fda3 	bl	8001434 <HAL_I2C_Master_Transmit>
 80008ee:	0003      	movs	r3, r0
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d0f3      	beq.n	80008dc <main+0x28>
  uint8_t arr1[2] = {0xA0, 0x01};
 80008f4:	2310      	movs	r3, #16
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	22d0      	movs	r2, #208	; 0xd0
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr1, 2, 100) == HAL_BUSY){}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	2310      	movs	r3, #16
 8000902:	18fa      	adds	r2, r7, r3
 8000904:	482f      	ldr	r0, [pc, #188]	; (80009c4 <main+0x110>)
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2302      	movs	r3, #2
 800090c:	2168      	movs	r1, #104	; 0x68
 800090e:	f000 fd91 	bl	8001434 <HAL_I2C_Master_Transmit>
 8000912:	0003      	movs	r3, r0
 8000914:	2b02      	cmp	r3, #2
 8000916:	d0f3      	beq.n	8000900 <main+0x4c>
  uint8_t arr2[2] = {0xA1, 30};
 8000918:	230c      	movs	r3, #12
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	4a2a      	ldr	r2, [pc, #168]	; (80009c8 <main+0x114>)
 800091e:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr2, 2, 100) == HAL_BUSY){}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	230c      	movs	r3, #12
 8000924:	18fa      	adds	r2, r7, r3
 8000926:	4827      	ldr	r0, [pc, #156]	; (80009c4 <main+0x110>)
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2302      	movs	r3, #2
 800092e:	2168      	movs	r1, #104	; 0x68
 8000930:	f000 fd80 	bl	8001434 <HAL_I2C_Master_Transmit>
 8000934:	0003      	movs	r3, r0
 8000936:	2b02      	cmp	r3, #2
 8000938:	d0f3      	beq.n	8000922 <main+0x6e>

	for(int a = 0x90; a < 0x9F; a++){
 800093a:	2390      	movs	r3, #144	; 0x90
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	e017      	b.n	8000970 <main+0xbc>
		uint8_t arr3[2] = {a, 60};
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	2108      	movs	r1, #8
 8000946:	187b      	adds	r3, r7, r1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	187b      	adds	r3, r7, r1
 800094c:	223c      	movs	r2, #60	; 0x3c
 800094e:	705a      	strb	r2, [r3, #1]
		while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr3, 2, 100) == HAL_BUSY){}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	2308      	movs	r3, #8
 8000954:	18fa      	adds	r2, r7, r3
 8000956:	481b      	ldr	r0, [pc, #108]	; (80009c4 <main+0x110>)
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2302      	movs	r3, #2
 800095e:	2168      	movs	r1, #104	; 0x68
 8000960:	f000 fd68 	bl	8001434 <HAL_I2C_Master_Transmit>
 8000964:	0003      	movs	r3, r0
 8000966:	2b02      	cmp	r3, #2
 8000968:	d0f3      	beq.n	8000952 <main+0x9e>
	for(int a = 0x90; a < 0x9F; a++){
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3301      	adds	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	2b9e      	cmp	r3, #158	; 0x9e
 8000974:	dde4      	ble.n	8000940 <main+0x8c>
	}

	for(int i = 0 ; i<30; i++){
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	e01d      	b.n	80009b8 <main+0x104>
	  uint8_t arr5[4] = {led_adr_arr[i], 0,255,100};
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <main+0x118>)
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	705a      	strb	r2, [r3, #1]
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	22ff      	movs	r2, #255	; 0xff
 8000992:	709a      	strb	r2, [r3, #2]
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	70da      	strb	r2, [r3, #3]
	  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr5, 4, 100) == HAL_BUSY){}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <main+0x110>)
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2304      	movs	r3, #4
 80009a6:	2168      	movs	r1, #104	; 0x68
 80009a8:	f000 fd44 	bl	8001434 <HAL_I2C_Master_Transmit>
 80009ac:	0003      	movs	r3, r0
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d0f4      	beq.n	800099c <main+0xe8>
	for(int i = 0 ; i<30; i++){
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	3301      	adds	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	2b1d      	cmp	r3, #29
 80009bc:	ddde      	ble.n	800097c <main+0xc8>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009be:	e7fe      	b.n	80009be <main+0x10a>
 80009c0:	ffffaecf 	.word	0xffffaecf
 80009c4:	20000028 	.word	0x20000028
 80009c8:	00001ea1 	.word	0x00001ea1
 80009cc:	08003614 	.word	0x08003614

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08d      	sub	sp, #52	; 0x34
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	2414      	movs	r4, #20
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	0018      	movs	r0, r3
 80009dc:	231c      	movs	r3, #28
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f002 fe03 	bl	80035ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e6:	003b      	movs	r3, r7
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f002 fdfc 	bl	80035ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2202      	movs	r2, #2
 80009f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2240      	movs	r2, #64	; 0x40
 8000a0c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f8d1 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000a1a:	f000 f81c 	bl	8000a56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	003b      	movs	r3, r7
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a24:	003b      	movs	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a30:	003b      	movs	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a36:	003b      	movs	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3c:	003b      	movs	r3, r7
 8000a3e:	2101      	movs	r1, #1
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 fab3 	bl	8001fac <HAL_RCC_ClockConfig>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a4a:	f000 f804 	bl	8000a56 <Error_Handler>
  }
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b00d      	add	sp, #52	; 0x34
 8000a54:	bd90      	pop	{r4, r7, pc}

08000a56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5a:	b672      	cpsid	i
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <Error_Handler+0x8>

08000a60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <MX_SPI1_Init+0x70>)
 8000a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a78:	22e0      	movs	r2, #224	; 0xe0
 8000a7a:	00d2      	lsls	r2, r2, #3
 8000a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <MX_SPI1_Init+0x6c>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 fcd4 	bl	8002464 <HAL_SPI_Init>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000ac0:	f7ff ffc9 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000074 	.word	0x20000074
 8000ad0:	40013000 	.word	0x40013000

08000ad4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b093      	sub	sp, #76	; 0x4c
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	2334      	movs	r3, #52	; 0x34
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2314      	movs	r3, #20
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f002 fd80 	bl	80035ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	2418      	movs	r4, #24
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	231c      	movs	r3, #28
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f002 fd78 	bl	80035ec <memset>
  if(spiHandle->Instance==SPI1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a35      	ldr	r2, [pc, #212]	; (8000bd8 <HAL_SPI_MspInit+0x104>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d163      	bne.n	8000bce <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fbb6 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000b20:	f7ff ff99 	bl	8000a56 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0149      	lsls	r1, r1, #5
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	641a      	str	r2, [r3, #64]	; 0x40
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	015b      	lsls	r3, r3, #5
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	2201      	movs	r2, #1
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b5e:	2102      	movs	r1, #2
 8000b60:	430a      	orrs	r2, r1
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_SPI_MspInit+0x108>)
 8000b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b68:	2202      	movs	r2, #2
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b70:	2134      	movs	r1, #52	; 0x34
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0212      	lsls	r2, r2, #8
 8000b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	000c      	movs	r4, r1
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2202      	movs	r2, #2
 8000b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	193a      	adds	r2, r7, r4
 8000b96:	23a0      	movs	r3, #160	; 0xa0
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fa41 	bl	8001024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2238      	movs	r2, #56	; 0x38
 8000ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_SPI_MspInit+0x10c>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f000 fa2b 	bl	8001024 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b013      	add	sp, #76	; 0x4c
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	50000400 	.word	0x50000400

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0549      	lsls	r1, r1, #21
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_MspInit+0x44>)
 8000c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	055b      	lsls	r3, r3, #21
 8000c18:	4013      	ands	r3, r2
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f91a 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <SystemInit+0x14>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0512      	lsls	r2, r2, #20
 8000c66:	609a      	str	r2, [r3, #8]
#endif
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000c7a:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <MX_USART2_UART_Init+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000c80:	22e1      	movs	r2, #225	; 0xe1
 8000c82:	0252      	lsls	r2, r2, #9
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_USART2_UART_Init+0x64>)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f001 ffca 	bl	8002c5c <HAL_RS485Ex_Init>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f7ff fec3 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	200000d8 	.word	0x200000d8
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	2414      	movs	r4, #20
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f002 fc7a 	bl	80035ec <memset>
  if(uartHandle->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x8c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d130      	bne.n	8000d64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0289      	lsls	r1, r1, #10
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	029b      	lsls	r3, r3, #10
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	220e      	movs	r2, #14
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2202      	movs	r2, #2
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	187a      	adds	r2, r7, r1
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 f960 	bl	8001024 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b00b      	add	sp, #44	; 0x2c
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	40021000 	.word	0x40021000

08000d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d7a:	e003      	b.n	8000d84 <LoopCopyDataInit>

08000d7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d82:	3104      	adds	r1, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000d88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d8c:	d3f6      	bcc.n	8000d7c <CopyDataInit>
  ldr r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopForever+0x12>)
  b LoopFillZerobss
 8000d90:	e002      	b.n	8000d98 <LoopFillZerobss>

08000d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d96:	3204      	adds	r2, #4

08000d98 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <LoopForever+0x16>)
  cmp r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d9c:	d3f9      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d9e:	f7ff ff5d 	bl	8000c5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000da2:	f002 fbff 	bl	80035a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da6:	f7ff fd85 	bl	80008b4 <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   r0, =_estack
 8000dac:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000db0:	080036b4 	.word	0x080036b4
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000dbc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000dc0:	2000016c 	.word	0x2000016c

08000dc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_IRQHandler>

08000dc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 f80e 	bl	8000df4 <HAL_InitTick>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e001      	b.n	8000de8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de4:	f7ff fefe 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_InitTick+0x88>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d02b      	beq.n	8000e64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0x8c>)
 8000e0e:	681c      	ldr	r4, [r3, #0]
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_InitTick+0x88>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0019      	movs	r1, r3
 8000e16:	23fa      	movs	r3, #250	; 0xfa
 8000e18:	0098      	lsls	r0, r3, #2
 8000e1a:	f7ff f975 	bl	8000108 <__udivsi3>
 8000e1e:	0003      	movs	r3, r0
 8000e20:	0019      	movs	r1, r3
 8000e22:	0020      	movs	r0, r4
 8000e24:	f7ff f970 	bl	8000108 <__udivsi3>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f8ed 	bl	800100a <HAL_SYSTICK_Config>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d112      	bne.n	8000e5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d80a      	bhi.n	8000e50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	425b      	negs	r3, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 f8cc 	bl	8000fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_InitTick+0x90>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e00d      	b.n	8000e6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e008      	b.n	8000e6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e003      	b.n	8000e6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	781b      	ldrb	r3, [r3, #0]
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b005      	add	sp, #20
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_IncTick+0x18>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	18d2      	adds	r2, r2, r3
 8000e96:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <HAL_IncTick+0x18>)
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000168 	.word	0x20000168
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000168 	.word	0x20000168

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	; 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	; 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	; 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	; 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff7c 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ffbf 	bl	8000f98 <SysTick_Config>
 800101a:	0003      	movs	r3, r0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001032:	e153      	b.n	80012dc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4091      	lsls	r1, r2
 800103e:	000a      	movs	r2, r1
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d100      	bne.n	800104c <HAL_GPIO_Init+0x28>
 800104a:	e144      	b.n	80012d6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x38>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d125      	bne.n	80010a8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	58d3      	ldr	r3, [r2, r3]
 8001068:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2207      	movs	r2, #7
 800106e:	4013      	ands	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	43da      	mvns	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	220f      	movs	r2, #15
 8001086:	401a      	ands	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2107      	movs	r1, #7
 800108c:	400b      	ands	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4313      	orrs	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	6979      	ldr	r1, [r7, #20]
 80010a6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	401a      	ands	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	409a      	lsls	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d00b      	beq.n	80010fc <HAL_GPIO_Init+0xd8>
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d007      	beq.n	80010fc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f0:	2b11      	cmp	r3, #17
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b12      	cmp	r3, #18
 80010fa:	d130      	bne.n	800115e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	43da      	mvns	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001132:	2201      	movs	r2, #1
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	43da      	mvns	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	4013      	ands	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	2201      	movs	r2, #1
 800114a:	401a      	ands	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4313      	orrs	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4013      	ands	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4313      	orrs	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	055b      	lsls	r3, r3, #21
 800119e:	4013      	ands	r3, r2
 80011a0:	d100      	bne.n	80011a4 <HAL_GPIO_Init+0x180>
 80011a2:	e098      	b.n	80012d6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011a4:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3318      	adds	r3, #24
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	589b      	ldr	r3, [r3, r2]
 80011b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2203      	movs	r2, #3
 80011b6:	4013      	ands	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	220f      	movs	r2, #15
 80011bc:	409a      	lsls	r2, r3
 80011be:	0013      	movs	r3, r2
 80011c0:	43da      	mvns	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x1de>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x1da>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x1d6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x1d2>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 8001206:	2300      	movs	r3, #0
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	2103      	movs	r1, #3
 800120c:	400a      	ands	r2, r1
 800120e:	00d2      	lsls	r2, r2, #3
 8001210:	4093      	lsls	r3, r2
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4313      	orrs	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001218:	4936      	ldr	r1, [pc, #216]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3318      	adds	r3, #24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	58d3      	ldr	r3, [r2, r3]
 800122c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43da      	mvns	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	4013      	ands	r3, r2
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800124c:	4929      	ldr	r1, [pc, #164]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001256:	2384      	movs	r3, #132	; 0x84
 8001258:	58d3      	ldr	r3, [r2, r3]
 800125a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43da      	mvns	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4013      	ands	r3, r2
 8001264:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800127a:	491e      	ldr	r1, [pc, #120]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800127c:	2284      	movs	r2, #132	; 0x84
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43da      	mvns	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4013      	ands	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	035b      	lsls	r3, r3, #13
 800129a:	4013      	ands	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43da      	mvns	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	039b      	lsls	r3, r3, #14
 80012c4:	4013      	ands	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	3301      	adds	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	d000      	beq.n	80012ea <HAL_GPIO_Init+0x2c6>
 80012e8:	e6a4      	b.n	8001034 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021800 	.word	0x40021800
 80012f8:	50000400 	.word	0x50000400
 80012fc:	50000800 	.word	0x50000800
 8001300:	50000c00 	.word	0x50000c00
 8001304:	50001400 	.word	0x50001400

08001308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e082      	b.n	8001420 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2241      	movs	r2, #65	; 0x41
 800131e:	5c9b      	ldrb	r3, [r3, r2]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d107      	bne.n	8001336 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2240      	movs	r2, #64	; 0x40
 800132a:	2100      	movs	r1, #0
 800132c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fa37 	bl	80007a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2241      	movs	r2, #65	; 0x41
 800133a:	2124      	movs	r1, #36	; 0x24
 800133c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	438a      	bics	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4934      	ldr	r1, [pc, #208]	; (8001428 <HAL_I2C_Init+0x120>)
 8001358:	400a      	ands	r2, r1
 800135a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4931      	ldr	r1, [pc, #196]	; (800142c <HAL_I2C_Init+0x124>)
 8001368:	400a      	ands	r2, r1
 800136a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	0209      	lsls	r1, r1, #8
 8001380:	430a      	orrs	r2, r1
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	e007      	b.n	8001396 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2184      	movs	r1, #132	; 0x84
 8001390:	0209      	lsls	r1, r1, #8
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d104      	bne.n	80013a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	491f      	ldr	r1, [pc, #124]	; (8001430 <HAL_I2C_Init+0x128>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	491a      	ldr	r1, [pc, #104]	; (800142c <HAL_I2C_Init+0x124>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69d9      	ldr	r1, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1a      	ldr	r2, [r3, #32]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2241      	movs	r2, #65	; 0x41
 800140c:	2120      	movs	r1, #32
 800140e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2242      	movs	r2, #66	; 0x42
 800141a:	2100      	movs	r1, #0
 800141c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}
 8001428:	f0ffffff 	.word	0xf0ffffff
 800142c:	ffff7fff 	.word	0xffff7fff
 8001430:	02008000 	.word	0x02008000

08001434 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	0008      	movs	r0, r1
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	0019      	movs	r1, r3
 8001442:	230a      	movs	r3, #10
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	2308      	movs	r3, #8
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	1c0a      	adds	r2, r1, #0
 8001450:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2241      	movs	r2, #65	; 0x41
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b20      	cmp	r3, #32
 800145c:	d000      	beq.n	8001460 <HAL_I2C_Master_Transmit+0x2c>
 800145e:	e0e7      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	5c9b      	ldrb	r3, [r3, r2]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_I2C_Master_Transmit+0x3a>
 800146a:	2302      	movs	r3, #2
 800146c:	e0e1      	b.n	8001632 <HAL_I2C_Master_Transmit+0x1fe>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2240      	movs	r2, #64	; 0x40
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001476:	f7ff fd17 	bl	8000ea8 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	0219      	lsls	r1, r3, #8
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2319      	movs	r3, #25
 800148a:	2201      	movs	r2, #1
 800148c:	f000 f8fc 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cc      	b.n	8001632 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2241      	movs	r2, #65	; 0x41
 800149c:	2121      	movs	r1, #33	; 0x21
 800149e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2242      	movs	r2, #66	; 0x42
 80014a4:	2110      	movs	r1, #16
 80014a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2208      	movs	r2, #8
 80014b8:	18ba      	adds	r2, r7, r2
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d911      	bls.n	80014f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	045c      	lsls	r4, r3, #17
 80014de:	230a      	movs	r3, #10
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	8819      	ldrh	r1, [r3, #0]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	4b55      	ldr	r3, [pc, #340]	; (800163c <HAL_I2C_Master_Transmit+0x208>)
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	0023      	movs	r3, r4
 80014ec:	f000 fa92 	bl	8001a14 <I2C_TransferConfig>
 80014f0:	e075      	b.n	80015de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001500:	b2da      	uxtb	r2, r3
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	049c      	lsls	r4, r3, #18
 8001506:	230a      	movs	r3, #10
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	8819      	ldrh	r1, [r3, #0]
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <HAL_I2C_Master_Transmit+0x208>)
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	0023      	movs	r3, r4
 8001514:	f000 fa7e 	bl	8001a14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001518:	e061      	b.n	80015de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	0018      	movs	r0, r3
 8001522:	f000 f8f0 	bl	8001706 <I2C_WaitOnTXISFlagUntilTimeout>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e081      	b.n	8001632 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001548:	b29b      	uxth	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b29a      	uxth	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001562:	b29b      	uxth	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d03a      	beq.n	80015de <HAL_I2C_Master_Transmit+0x1aa>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d136      	bne.n	80015de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	0013      	movs	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	f000 f883 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e053      	b.n	8001632 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158e:	b29b      	uxth	r3, r3
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d911      	bls.n	80015b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	22ff      	movs	r2, #255	; 0xff
 8001598:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	045c      	lsls	r4, r3, #17
 80015a4:	230a      	movs	r3, #10
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	8819      	ldrh	r1, [r3, #0]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	0023      	movs	r3, r4
 80015b2:	f000 fa2f 	bl	8001a14 <I2C_TransferConfig>
 80015b6:	e012      	b.n	80015de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	049c      	lsls	r4, r3, #18
 80015cc:	230a      	movs	r3, #10
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	8819      	ldrh	r1, [r3, #0]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	2300      	movs	r3, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	0023      	movs	r3, r4
 80015da:	f000 fa1b 	bl	8001a14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d198      	bne.n	800151a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f8c8 	bl	8001784 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e01a      	b.n	8001632 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2220      	movs	r2, #32
 8001602:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <HAL_I2C_Master_Transmit+0x20c>)
 8001610:	400a      	ands	r2, r1
 8001612:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2241      	movs	r2, #65	; 0x41
 8001618:	2120      	movs	r1, #32
 800161a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2242      	movs	r2, #66	; 0x42
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001630:	2302      	movs	r3, #2
  }
}
 8001632:	0018      	movs	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	b007      	add	sp, #28
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	80002000 	.word	0x80002000
 8001640:	fe00e800 	.word	0xfe00e800

08001644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	2b02      	cmp	r3, #2
 8001658:	d103      	bne.n	8001662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2201      	movs	r2, #1
 800166a:	4013      	ands	r3, r2
 800166c:	2b01      	cmp	r3, #1
 800166e:	d007      	beq.n	8001680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
  }
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}

08001688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001698:	e021      	b.n	80016de <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	d01e      	beq.n	80016de <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a0:	f7ff fc02 	bl	8000ea8 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d302      	bcc.n	80016b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d113      	bne.n	80016de <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	2220      	movs	r2, #32
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2241      	movs	r2, #65	; 0x41
 80016c6:	2120      	movs	r1, #32
 80016c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2242      	movs	r2, #66	; 0x42
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	2100      	movs	r1, #0
 80016d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	4013      	ands	r3, r2
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	425a      	negs	r2, r3
 80016ee:	4153      	adcs	r3, r2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	001a      	movs	r2, r3
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d0ce      	beq.n	800169a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001712:	e02b      	b.n	800176c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f86e 	bl	80017fc <I2C_IsErrorOccurred>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e029      	b.n	800177c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3301      	adds	r3, #1
 800172c:	d01e      	beq.n	800176c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172e:	f7ff fbbb 	bl	8000ea8 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	429a      	cmp	r2, r3
 800173c:	d302      	bcc.n	8001744 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d113      	bne.n	800176c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	2220      	movs	r2, #32
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2241      	movs	r2, #65	; 0x41
 8001754:	2120      	movs	r1, #32
 8001756:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2242      	movs	r2, #66	; 0x42
 800175c:	2100      	movs	r1, #0
 800175e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e007      	b.n	800177c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	2b02      	cmp	r3, #2
 8001778:	d1cc      	bne.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}

08001784 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001790:	e028      	b.n	80017e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 f82f 	bl	80017fc <I2C_IsErrorOccurred>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e026      	b.n	80017f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a6:	f7ff fb7f 	bl	8000ea8 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d302      	bcc.n	80017bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d113      	bne.n	80017e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	2220      	movs	r2, #32
 80017c2:	431a      	orrs	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2241      	movs	r2, #65	; 0x41
 80017cc:	2120      	movs	r1, #32
 80017ce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2242      	movs	r2, #66	; 0x42
 80017d4:	2100      	movs	r1, #0
 80017d6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	2100      	movs	r1, #0
 80017de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e007      	b.n	80017f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2220      	movs	r2, #32
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d1cf      	bne.n	8001792 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}

080017fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2327      	movs	r3, #39	; 0x27
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2210      	movs	r2, #16
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <I2C_IsErrorOccurred+0x2e>
 8001828:	e08e      	b.n	8001948 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2210      	movs	r2, #16
 8001830:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001832:	e06c      	b.n	800190e <I2C_IsErrorOccurred+0x112>
 8001834:	2427      	movs	r4, #39	; 0x27
 8001836:	193b      	adds	r3, r7, r4
 8001838:	193a      	adds	r2, r7, r4
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	d064      	beq.n	800190e <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001844:	f7ff fb30 	bl	8000ea8 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	429a      	cmp	r2, r3
 8001852:	d306      	bcc.n	8001862 <I2C_IsErrorOccurred+0x66>
 8001854:	193b      	adds	r3, r7, r4
 8001856:	193a      	adds	r2, r7, r4
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d155      	bne.n	800190e <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	01db      	lsls	r3, r3, #7
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001870:	2013      	movs	r0, #19
 8001872:	183b      	adds	r3, r7, r0
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	2142      	movs	r1, #66	; 0x42
 8001878:	5c52      	ldrb	r2, [r2, r1]
 800187a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	401a      	ands	r2, r3
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	429a      	cmp	r2, r3
 800188e:	d137      	bne.n	8001900 <I2C_IsErrorOccurred+0x104>
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	01db      	lsls	r3, r3, #7
 8001896:	429a      	cmp	r2, r3
 8001898:	d032      	beq.n	8001900 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 800189a:	183b      	adds	r3, r7, r0
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d02e      	beq.n	8001900 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	01c9      	lsls	r1, r1, #7
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018b4:	f7ff faf8 	bl	8000ea8 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018bc:	e020      	b.n	8001900 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018be:	f7ff faf3 	bl	8000ea8 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2027      	movs	r0, #39	; 0x27
 80018ca:	183a      	adds	r2, r7, r0
 80018cc:	1839      	adds	r1, r7, r0
 80018ce:	7809      	ldrb	r1, [r1, #0]
 80018d0:	7011      	strb	r1, [r2, #0]
 80018d2:	2b19      	cmp	r3, #25
 80018d4:	d914      	bls.n	8001900 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	2220      	movs	r2, #32
 80018dc:	431a      	orrs	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2241      	movs	r2, #65	; 0x41
 80018e6:	2120      	movs	r1, #32
 80018e8:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2242      	movs	r2, #66	; 0x42
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	2100      	movs	r1, #0
 80018f8:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2220      	movs	r2, #32
 8001908:	4013      	ands	r3, r2
 800190a:	2b20      	cmp	r3, #32
 800190c:	d1d7      	bne.n	80018be <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2220      	movs	r2, #32
 8001916:	4013      	ands	r3, r2
 8001918:	2b20      	cmp	r3, #32
 800191a:	d004      	beq.n	8001926 <I2C_IsErrorOccurred+0x12a>
 800191c:	2327      	movs	r3, #39	; 0x27
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d086      	beq.n	8001834 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001926:	2327      	movs	r3, #39	; 0x27
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2220      	movs	r2, #32
 8001936:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	2204      	movs	r2, #4
 800193c:	4313      	orrs	r3, r2
 800193e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001940:	2327      	movs	r3, #39	; 0x27
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4013      	ands	r3, r2
 8001958:	d00c      	beq.n	8001974 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	2201      	movs	r2, #1
 800195e:	4313      	orrs	r3, r2
 8001960:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	0052      	lsls	r2, r2, #1
 800196a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800196c:	2327      	movs	r3, #39	; 0x27
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4013      	ands	r3, r2
 800197c:	d00c      	beq.n	8001998 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	2208      	movs	r2, #8
 8001982:	4313      	orrs	r3, r2
 8001984:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001990:	2327      	movs	r3, #39	; 0x27
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d00c      	beq.n	80019bc <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2202      	movs	r2, #2
 80019a6:	4313      	orrs	r3, r2
 80019a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b4:	2327      	movs	r3, #39	; 0x27
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80019bc:	2327      	movs	r3, #39	; 0x27
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01d      	beq.n	8001a02 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff fe3b 	bl	8001644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	490d      	ldr	r1, [pc, #52]	; (8001a10 <I2C_IsErrorOccurred+0x214>)
 80019da:	400a      	ands	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2241      	movs	r2, #65	; 0x41
 80019ee:	2120      	movs	r1, #32
 80019f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2242      	movs	r2, #66	; 0x42
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001a02:	2327      	movs	r3, #39	; 0x27
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	781b      	ldrb	r3, [r3, #0]
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b00b      	add	sp, #44	; 0x2c
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	fe00e800 	.word	0xfe00e800

08001a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	0011      	movs	r1, r2
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	240a      	movs	r4, #10
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	2009      	movs	r0, #9
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	1c0a      	adds	r2, r1, #0
 8001a30:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	059b      	lsls	r3, r3, #22
 8001a38:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	0419      	lsls	r1, r3, #16
 8001a40:	23ff      	movs	r3, #255	; 0xff
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a46:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5e:	0d51      	lsrs	r1, r2, #21
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	400a      	ands	r2, r1
 8001a66:	4907      	ldr	r1, [pc, #28]	; (8001a84 <I2C_TransferConfig+0x70>)
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	43d2      	mvns	r2, r2
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	0011      	movs	r1, r2
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b007      	add	sp, #28
 8001a80:	bd90      	pop	{r4, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	03ff63ff 	.word	0x03ff63ff

08001a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2241      	movs	r2, #65	; 0x41
 8001a96:	5c9b      	ldrb	r3, [r3, r2]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d138      	bne.n	8001b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e032      	b.n	8001b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2241      	movs	r2, #65	; 0x41
 8001ab8:	2124      	movs	r1, #36	; 0x24
 8001aba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4911      	ldr	r1, [pc, #68]	; (8001b1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6819      	ldr	r1, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2241      	movs	r2, #65	; 0x41
 8001b00:	2120      	movs	r1, #32
 8001b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
  }
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	ffffefff 	.word	0xffffefff

08001b20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2241      	movs	r2, #65	; 0x41
 8001b2e:	5c9b      	ldrb	r3, [r3, r2]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d139      	bne.n	8001baa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e033      	b.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2240      	movs	r2, #64	; 0x40
 8001b48:	2101      	movs	r1, #1
 8001b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2241      	movs	r2, #65	; 0x41
 8001b50:	2124      	movs	r1, #36	; 0x24
 8001b52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2241      	movs	r2, #65	; 0x41
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
  }
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	fffff0ff 	.word	0xfffff0ff

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1e5      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x1e>
 8001bd4:	e06f      	b.n	8001cb6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4bc4      	ldr	r3, [pc, #784]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2238      	movs	r2, #56	; 0x38
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4bc0      	ldr	r3, [pc, #768]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d061      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xfe>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d15d      	bne.n	8001cb6 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1cb      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_OscConfig+0x62>
 8001c0a:	4bb7      	ldr	r3, [pc, #732]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4bb6      	ldr	r3, [pc, #728]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e020      	b.n	8001c5c <HAL_RCC_OscConfig+0xa4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	23a0      	movs	r3, #160	; 0xa0
 8001c20:	02db      	lsls	r3, r3, #11
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x8c>
 8001c26:	4bb0      	ldr	r3, [pc, #704]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4baf      	ldr	r3, [pc, #700]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	02c9      	lsls	r1, r1, #11
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	4bac      	ldr	r3, [pc, #688]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4bab      	ldr	r3, [pc, #684]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xa4>
 8001c44:	4ba8      	ldr	r3, [pc, #672]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4ba7      	ldr	r3, [pc, #668]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c4a:	49a8      	ldr	r1, [pc, #672]	; (8001eec <HAL_RCC_OscConfig+0x334>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	4ba5      	ldr	r3, [pc, #660]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4ba4      	ldr	r3, [pc, #656]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c56:	49a6      	ldr	r1, [pc, #664]	; (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d014      	beq.n	8001c8e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f920 	bl	8000ea8 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6e:	f7ff f91b 	bl	8000ea8 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	; 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e18a      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c80:	4b99      	ldr	r3, [pc, #612]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0xb6>
 8001c8c:	e013      	b.n	8001cb6 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f90b 	bl	8000ea8 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f906 	bl	8000ea8 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e175      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001caa:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
 8001cc0:	e08c      	b.n	8001ddc <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2238      	movs	r2, #56	; 0x38
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d135      	bne.n	8001d3e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd2:	4b85      	ldr	r3, [pc, #532]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x132>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e155      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a81      	ldr	r2, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x33c>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	021a      	lsls	r2, r3, #8
 8001cfa:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d112      	bne.n	8001d2c <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d06:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7b      	ldr	r2, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	4b74      	ldr	r3, [pc, #464]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d1a:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0adb      	lsrs	r3, r3, #11
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	4a75      	ldr	r2, [pc, #468]	; (8001efc <HAL_RCC_OscConfig+0x344>)
 8001d26:	40da      	lsrs	r2, r3
 8001d28:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x348>)
 8001d2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d2c:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <HAL_RCC_OscConfig+0x34c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff f85f 	bl	8000df4 <HAL_InitTick>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d050      	beq.n	8001ddc <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e12b      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d030      	beq.n	8001da8 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d46:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0049      	lsls	r1, r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f89e 	bl	8000ea8 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff f899 	bl	8000ea8 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e108      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x33c>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	021a      	lsls	r2, r3, #8
 8001da0:	4b51      	ldr	r3, [pc, #324]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e019      	b.n	8001ddc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001da8:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001dae:	4956      	ldr	r1, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x350>)
 8001db0:	400a      	ands	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f878 	bl	8000ea8 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f873 	bl	8000ea8 <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0e2      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd0:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	4013      	ands	r3, r2
 8001de4:	d047      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2238      	movs	r2, #56	; 0x38
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b18      	cmp	r3, #24
 8001df0:	d10a      	bne.n	8001e08 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d03c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2be>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d138      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0c6      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e14:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f844 	bl	8000ea8 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e26:	f7ff f83f 	bl	8000ea8 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0ae      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d0f1      	beq.n	8001e26 <HAL_RCC_OscConfig+0x26e>
 8001e42:	e018      	b.n	8001e76 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f82a 	bl	8000ea8 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f825 	bl	8000ea8 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e094      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2ca>
 8001e80:	e088      	b.n	8001f94 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	230f      	movs	r3, #15
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2238      	movs	r2, #56	; 0x38
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2ea>
 8001ea0:	e078      	b.n	8001f94 <HAL_RCC_OscConfig+0x3dc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d000      	beq.n	8001eac <HAL_RCC_OscConfig+0x2f4>
 8001eaa:	e073      	b.n	8001f94 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e072      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x30e>
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001eba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0x36c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d11e      	bne.n	8001f0c <HAL_RCC_OscConfig+0x354>
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001ed0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eda:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001edc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ede:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0x36c>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	fffeffff 	.word	0xfffeffff
 8001ef0:	fffbffff 	.word	0xfffbffff
 8001ef4:	ffff80ff 	.word	0xffff80ff
 8001ef8:	ffffc7ff 	.word	0xffffc7ff
 8001efc:	02dc6c00 	.word	0x02dc6c00
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004
 8001f08:	fffffeff 	.word	0xfffffeff
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f10:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	438a      	bics	r2, r1
 8001f22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d014      	beq.n	8001f56 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ffbc 	bl	8000ea8 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe ffb7 	bl	8000ea8 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_RCC_OscConfig+0x3ec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e025      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e013      	b.n	8001f7e <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe ffa7 	bl	8000ea8 <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f5e:	e009      	b.n	8001f74 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe ffa2 	bl	8000ea8 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_RCC_OscConfig+0x3ec>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e010      	b.n	8001f96 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f7e:	230f      	movs	r3, #15
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_RCC_OscConfig+0x3e8>)
 8001f8e:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x3f0>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b006      	add	sp, #24
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	efffffff 	.word	0xefffffff

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0e9      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d91e      	bls.n	800200c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe ff62 	bl	8000ea8 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe ff5d 	bl	8000ea8 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a6a      	ldr	r2, [pc, #424]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0ca      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2207      	movs	r2, #7
 8002004:	4013      	ands	r3, r2
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d017      	beq.n	8002046 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2204      	movs	r2, #4
 800201c:	4013      	ands	r3, r2
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002020:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a60      	ldr	r2, [pc, #384]	; (80021a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002026:	401a      	ands	r2, r3
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	21b0      	movs	r1, #176	; 0xb0
 800202c:	0109      	lsls	r1, r1, #4
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_RCC_ClockConfig+0x200>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d055      	beq.n	80020fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002050:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	221c      	movs	r2, #28
 8002056:	4393      	bics	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	d11f      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e08b      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4013      	ands	r3, r2
 800208e:	d113      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e07f      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d106      	bne.n	80020aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800209c:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e074      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e06d      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2207      	movs	r2, #7
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020cc:	f7fe feec 	bl	8000ea8 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe fee7 	bl	8000ea8 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e054      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2238      	movs	r2, #56	; 0x38
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1ec      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2207      	movs	r2, #7
 8002102:	4013      	ands	r3, r2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d21e      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2207      	movs	r2, #7
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800211c:	f7fe fec4 	bl	8000ea8 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002124:	e009      	b.n	800213a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002126:	f7fe febf 	bl	8000ea8 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e02c      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2207      	movs	r2, #7
 8002140:	4013      	ands	r3, r2
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_RCC_ClockConfig+0x204>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002166:	f000 f82b 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800216a:	0001      	movs	r1, r0
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	220f      	movs	r2, #15
 8002174:	401a      	ands	r2, r3
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCC_ClockConfig+0x208>)
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	58d3      	ldr	r3, [r2, r3]
 800217c:	221f      	movs	r2, #31
 800217e:	4013      	ands	r3, r2
 8002180:	000a      	movs	r2, r1
 8002182:	40da      	lsrs	r2, r3
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_ClockConfig+0x20c>)
 8002186:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCC_ClockConfig+0x210>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe fe31 	bl	8000df4 <HAL_InitTick>
 8002192:	0003      	movs	r3, r0
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40022000 	.word	0x40022000
 80021a0:	00001388 	.word	0x00001388
 80021a4:	40021000 	.word	0x40021000
 80021a8:	ffff84ff 	.word	0xffff84ff
 80021ac:	fffff0ff 	.word	0xfffff0ff
 80021b0:	ffff8fff 	.word	0xffff8fff
 80021b4:	08003634 	.word	0x08003634
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_RCC_GetSysClockFreq+0x78>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2238      	movs	r2, #56	; 0x38
 80021cc:	4013      	ands	r3, r2
 80021ce:	d10f      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_GetSysClockFreq+0x78>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0adb      	lsrs	r3, r3, #11
 80021d6:	2207      	movs	r2, #7
 80021d8:	4013      	ands	r3, r2
 80021da:	2201      	movs	r2, #1
 80021dc:	409a      	lsls	r2, r3
 80021de:	0013      	movs	r3, r2
 80021e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	4815      	ldr	r0, [pc, #84]	; (800223c <HAL_RCC_GetSysClockFreq+0x7c>)
 80021e6:	f7fd ff8f 	bl	8000108 <__udivsi3>
 80021ea:	0003      	movs	r3, r0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	e01e      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_RCC_GetSysClockFreq+0x78>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2238      	movs	r2, #56	; 0x38
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_RCC_GetSysClockFreq+0x80>)
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	e015      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_RCC_GetSysClockFreq+0x78>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2238      	movs	r2, #56	; 0x38
 8002208:	4013      	ands	r3, r2
 800220a:	2b20      	cmp	r3, #32
 800220c:	d103      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	e00b      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_RCC_GetSysClockFreq+0x78>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2238      	movs	r2, #56	; 0x38
 800221c:	4013      	ands	r3, r2
 800221e:	2b18      	cmp	r3, #24
 8002220:	d103      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002222:	23fa      	movs	r3, #250	; 0xfa
 8002224:	01db      	lsls	r3, r3, #7
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	e001      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800222e:	687b      	ldr	r3, [r7, #4]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	02dc6c00 	.word	0x02dc6c00
 8002240:	007a1200 	.word	0x007a1200

08002244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_RCC_GetHCLKFreq+0x10>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800225c:	f7ff fff2 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002260:	0001      	movs	r1, r0
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b1b      	lsrs	r3, r3, #12
 8002268:	2207      	movs	r2, #7
 800226a:	401a      	ands	r2, r3
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	58d3      	ldr	r3, [r2, r3]
 8002272:	221f      	movs	r2, #31
 8002274:	4013      	ands	r3, r2
 8002276:	40d9      	lsrs	r1, r3
 8002278:	000b      	movs	r3, r1
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08003674 	.word	0x08003674

08002288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002290:	2313      	movs	r3, #19
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002298:	2312      	movs	r3, #18
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	4013      	ands	r3, r2
 80022aa:	d100      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022ac:	e079      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2011      	movs	r0, #17
 80022b0:	183b      	adds	r3, r7, r0
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	055b      	lsls	r3, r3, #21
 80022be:	4013      	ands	r3, r2
 80022c0:	d110      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b61      	ldr	r3, [pc, #388]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0549      	lsls	r1, r1, #21
 80022cc:	430a      	orrs	r2, r1
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d0:	4b5d      	ldr	r3, [pc, #372]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	183b      	adds	r3, r7, r0
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e8:	23c0      	movs	r3, #192	; 0xc0
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d014      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002300:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002306:	4013      	ands	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230a:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800230c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0249      	lsls	r1, r1, #9
 8002314:	430a      	orrs	r2, r1
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002318:	4b4b      	ldr	r3, [pc, #300]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800231a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800231e:	494c      	ldr	r1, [pc, #304]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002320:	400a      	ands	r2, r1
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002324:	4b48      	ldr	r3, [pc, #288]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d016      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fdb9 	bl	8000ea8 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800233a:	e00c      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fdb4 	bl	8000ea8 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	4a43      	ldr	r2, [pc, #268]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d904      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800234c:	2313      	movs	r3, #19
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2203      	movs	r2, #3
 8002352:	701a      	strb	r2, [r3, #0]
          break;
 8002354:	e004      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d0ed      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002360:	2313      	movs	r3, #19
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	4a37      	ldr	r2, [pc, #220]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	4b33      	ldr	r3, [pc, #204]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800237a:	430a      	orrs	r2, r1
 800237c:	65da      	str	r2, [r3, #92]	; 0x5c
 800237e:	e005      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	2312      	movs	r3, #18
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2213      	movs	r2, #19
 8002386:	18ba      	adds	r2, r7, r2
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800238c:	2311      	movs	r3, #17
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800239c:	492e      	ldr	r1, [pc, #184]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	400a      	ands	r2, r1
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	2203      	movs	r2, #3
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023bc:	430a      	orrs	r2, r1
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2240      	movs	r2, #64	; 0x40
 80023c6:	4013      	ands	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	4a23      	ldr	r2, [pc, #140]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	4013      	ands	r3, r2
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	0899      	lsrs	r1, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4013      	ands	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002418:	430a      	orrs	r2, r1
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da09      	bge.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	22e0      	movs	r2, #224	; 0xe0
 800242a:	4393      	bics	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002438:	2312      	movs	r3, #18
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	781b      	ldrb	r3, [r3, #0]
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b006      	add	sp, #24
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40021000 	.word	0x40021000
 800244c:	fffffcff 	.word	0xfffffcff
 8002450:	fffeffff 	.word	0xfffeffff
 8002454:	00001388 	.word	0x00001388
 8002458:	efffffff 	.word	0xefffffff
 800245c:	ffffcfff 	.word	0xffffcfff
 8002460:	ffff3fff 	.word	0xffff3fff

08002464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0a8      	b.n	80025c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	2382      	movs	r3, #130	; 0x82
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	429a      	cmp	r2, r3
 8002488:	d009      	beq.n	800249e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
 8002490:	e005      	b.n	800249e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	225d      	movs	r2, #93	; 0x5d
 80024a8:	5c9b      	ldrb	r3, [r3, r2]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	225c      	movs	r2, #92	; 0x5c
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7fe fb0a 	bl	8000ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	225d      	movs	r2, #93	; 0x5d
 80024c4:	2102      	movs	r1, #2
 80024c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	438a      	bics	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	23e0      	movs	r3, #224	; 0xe0
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d902      	bls.n	80024ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e002      	b.n	80024f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	015b      	lsls	r3, r3, #5
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	23f0      	movs	r3, #240	; 0xf0
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d008      	beq.n	800250e <HAL_SPI_Init+0xaa>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	23e0      	movs	r3, #224	; 0xe0
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	429a      	cmp	r2, r3
 8002506:	d002      	beq.n	800250e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	2382      	movs	r3, #130	; 0x82
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	401a      	ands	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	2384      	movs	r3, #132	; 0x84
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	400b      	ands	r3, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2102      	movs	r1, #2
 800252a:	400b      	ands	r3, r1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2101      	movs	r1, #1
 8002534:	400b      	ands	r3, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6999      	ldr	r1, [r3, #24]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	400b      	ands	r3, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2138      	movs	r1, #56	; 0x38
 800254a:	400b      	ands	r3, r1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	400b      	ands	r3, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	0011      	movs	r1, r2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	2204      	movs	r2, #4
 8002574:	401a      	ands	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2110      	movs	r1, #16
 800257c:	400b      	ands	r3, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002584:	2108      	movs	r1, #8
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68d9      	ldr	r1, [r3, #12]
 800258e:	23f0      	movs	r3, #240	; 0xf0
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	400b      	ands	r3, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	0011      	movs	r1, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	015b      	lsls	r3, r3, #5
 800259e:	401a      	ands	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4907      	ldr	r1, [pc, #28]	; (80025d0 <HAL_SPI_Init+0x16c>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	225d      	movs	r2, #93	; 0x5d
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	fffff7ff 	.word	0xfffff7ff

080025d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025dc:	231e      	movs	r3, #30
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4aab      	ldr	r2, [pc, #684]	; (80028b0 <UART_SetConfig+0x2dc>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4aa6      	ldr	r2, [pc, #664]	; (80028b4 <UART_SetConfig+0x2e0>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a9d      	ldr	r2, [pc, #628]	; (80028b8 <UART_SetConfig+0x2e4>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	220f      	movs	r2, #15
 8002658:	4393      	bics	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a93      	ldr	r2, [pc, #588]	; (80028bc <UART_SetConfig+0x2e8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d127      	bne.n	80026c2 <UART_SetConfig+0xee>
 8002672:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <UART_SetConfig+0x2ec>)
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	2203      	movs	r2, #3
 8002678:	4013      	ands	r3, r2
 800267a:	2b03      	cmp	r3, #3
 800267c:	d017      	beq.n	80026ae <UART_SetConfig+0xda>
 800267e:	d81b      	bhi.n	80026b8 <UART_SetConfig+0xe4>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d00a      	beq.n	800269a <UART_SetConfig+0xc6>
 8002684:	d818      	bhi.n	80026b8 <UART_SetConfig+0xe4>
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <UART_SetConfig+0xbc>
 800268a:	2b01      	cmp	r3, #1
 800268c:	d00a      	beq.n	80026a4 <UART_SetConfig+0xd0>
 800268e:	e013      	b.n	80026b8 <UART_SetConfig+0xe4>
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e021      	b.n	80026de <UART_SetConfig+0x10a>
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2202      	movs	r2, #2
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e01c      	b.n	80026de <UART_SetConfig+0x10a>
 80026a4:	231f      	movs	r3, #31
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2204      	movs	r2, #4
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e017      	b.n	80026de <UART_SetConfig+0x10a>
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2208      	movs	r2, #8
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e012      	b.n	80026de <UART_SetConfig+0x10a>
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2210      	movs	r2, #16
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e00d      	b.n	80026de <UART_SetConfig+0x10a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7f      	ldr	r2, [pc, #508]	; (80028c4 <UART_SetConfig+0x2f0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d104      	bne.n	80026d6 <UART_SetConfig+0x102>
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e003      	b.n	80026de <UART_SetConfig+0x10a>
 80026d6:	231f      	movs	r3, #31
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2210      	movs	r2, #16
 80026dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d000      	beq.n	80026ec <UART_SetConfig+0x118>
 80026ea:	e06f      	b.n	80027cc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80026ec:	231f      	movs	r3, #31
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d01f      	beq.n	8002736 <UART_SetConfig+0x162>
 80026f6:	dc22      	bgt.n	800273e <UART_SetConfig+0x16a>
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d017      	beq.n	800272c <UART_SetConfig+0x158>
 80026fc:	dc1f      	bgt.n	800273e <UART_SetConfig+0x16a>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <UART_SetConfig+0x134>
 8002702:	2b02      	cmp	r3, #2
 8002704:	d005      	beq.n	8002712 <UART_SetConfig+0x13e>
 8002706:	e01a      	b.n	800273e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fda6 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
        break;
 8002710:	e01c      	b.n	800274c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002712:	4b6b      	ldr	r3, [pc, #428]	; (80028c0 <UART_SetConfig+0x2ec>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2207      	movs	r2, #7
 800271a:	4013      	ands	r3, r2
 800271c:	3301      	adds	r3, #1
 800271e:	0019      	movs	r1, r3
 8002720:	4869      	ldr	r0, [pc, #420]	; (80028c8 <UART_SetConfig+0x2f4>)
 8002722:	f7fd fcf1 	bl	8000108 <__udivsi3>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]
        break;
 800272a:	e00f      	b.n	800274c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272c:	f7ff fd48 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002730:	0003      	movs	r3, r0
 8002732:	61bb      	str	r3, [r7, #24]
        break;
 8002734:	e00a      	b.n	800274c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	61bb      	str	r3, [r7, #24]
        break;
 800273c:	e006      	b.n	800274c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002742:	231e      	movs	r3, #30
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
        break;
 800274a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d100      	bne.n	8002754 <UART_SetConfig+0x180>
 8002752:	e097      	b.n	8002884 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002758:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <UART_SetConfig+0x2f8>)
 800275a:	0052      	lsls	r2, r2, #1
 800275c:	5ad3      	ldrh	r3, [r2, r3]
 800275e:	0019      	movs	r1, r3
 8002760:	69b8      	ldr	r0, [r7, #24]
 8002762:	f7fd fcd1 	bl	8000108 <__udivsi3>
 8002766:	0003      	movs	r3, r0
 8002768:	005a      	lsls	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	18d2      	adds	r2, r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f7fd fcc5 	bl	8000108 <__udivsi3>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b0f      	cmp	r3, #15
 8002786:	d91c      	bls.n	80027c2 <UART_SetConfig+0x1ee>
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	429a      	cmp	r2, r3
 8002790:	d217      	bcs.n	80027c2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	b29a      	uxth	r2, r3
 8002796:	200e      	movs	r0, #14
 8002798:	183b      	adds	r3, r7, r0
 800279a:	210f      	movs	r1, #15
 800279c:	438a      	bics	r2, r1
 800279e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2207      	movs	r2, #7
 80027a8:	4013      	ands	r3, r2
 80027aa:	b299      	uxth	r1, r3
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	183a      	adds	r2, r7, r0
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	183a      	adds	r2, r7, r0
 80027bc:	8812      	ldrh	r2, [r2, #0]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	e060      	b.n	8002884 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80027c2:	231e      	movs	r3, #30
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e05b      	b.n	8002884 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027cc:	231f      	movs	r3, #31
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d01f      	beq.n	8002816 <UART_SetConfig+0x242>
 80027d6:	dc22      	bgt.n	800281e <UART_SetConfig+0x24a>
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d017      	beq.n	800280c <UART_SetConfig+0x238>
 80027dc:	dc1f      	bgt.n	800281e <UART_SetConfig+0x24a>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <UART_SetConfig+0x214>
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d005      	beq.n	80027f2 <UART_SetConfig+0x21e>
 80027e6:	e01a      	b.n	800281e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e8:	f7ff fd36 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80027ec:	0003      	movs	r3, r0
 80027ee:	61bb      	str	r3, [r7, #24]
        break;
 80027f0:	e01c      	b.n	800282c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <UART_SetConfig+0x2ec>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2207      	movs	r2, #7
 80027fa:	4013      	ands	r3, r2
 80027fc:	3301      	adds	r3, #1
 80027fe:	0019      	movs	r1, r3
 8002800:	4831      	ldr	r0, [pc, #196]	; (80028c8 <UART_SetConfig+0x2f4>)
 8002802:	f7fd fc81 	bl	8000108 <__udivsi3>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]
        break;
 800280a:	e00f      	b.n	800282c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280c:	f7ff fcd8 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002810:	0003      	movs	r3, r0
 8002812:	61bb      	str	r3, [r7, #24]
        break;
 8002814:	e00a      	b.n	800282c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	61bb      	str	r3, [r7, #24]
        break;
 800281c:	e006      	b.n	800282c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002822:	231e      	movs	r3, #30
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
        break;
 800282a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d028      	beq.n	8002884 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <UART_SetConfig+0x2f8>)
 8002838:	0052      	lsls	r2, r2, #1
 800283a:	5ad3      	ldrh	r3, [r2, r3]
 800283c:	0019      	movs	r1, r3
 800283e:	69b8      	ldr	r0, [r7, #24]
 8002840:	f7fd fc62 	bl	8000108 <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	001a      	movs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	18d2      	adds	r2, r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0019      	movs	r1, r3
 8002856:	0010      	movs	r0, r2
 8002858:	f7fd fc56 	bl	8000108 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	d90a      	bls.n	800287c <UART_SetConfig+0x2a8>
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	429a      	cmp	r2, r3
 800286e:	d205      	bcs.n	800287c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	e003      	b.n	8002884 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800287c:	231e      	movs	r3, #30
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	226a      	movs	r2, #106	; 0x6a
 8002888:	2101      	movs	r1, #1
 800288a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2268      	movs	r2, #104	; 0x68
 8002890:	2101      	movs	r1, #1
 8002892:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80028a0:	231e      	movs	r3, #30
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	781b      	ldrb	r3, [r3, #0]
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b008      	add	sp, #32
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	cfff69f3 	.word	0xcfff69f3
 80028b4:	ffffcfff 	.word	0xffffcfff
 80028b8:	11fff4ff 	.word	0x11fff4ff
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40004400 	.word	0x40004400
 80028c8:	02dc6c00 	.word	0x02dc6c00
 80028cc:	08003694 	.word	0x08003694

080028d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d00b      	beq.n	80028fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <UART_AdvFeatureConfig+0x144>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	d00b      	beq.n	800291c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a43      	ldr	r2, [pc, #268]	; (8002a18 <UART_AdvFeatureConfig+0x148>)
 800290c:	4013      	ands	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	2204      	movs	r2, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d00b      	beq.n	800293e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <UART_AdvFeatureConfig+0x14c>)
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2208      	movs	r2, #8
 8002944:	4013      	ands	r3, r2
 8002946:	d00b      	beq.n	8002960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <UART_AdvFeatureConfig+0x150>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2210      	movs	r2, #16
 8002966:	4013      	ands	r3, r2
 8002968:	d00b      	beq.n	8002982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <UART_AdvFeatureConfig+0x154>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	2220      	movs	r2, #32
 8002988:	4013      	ands	r3, r2
 800298a:	d00b      	beq.n	80029a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <UART_AdvFeatureConfig+0x158>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2240      	movs	r2, #64	; 0x40
 80029aa:	4013      	ands	r3, r2
 80029ac:	d01d      	beq.n	80029ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <UART_AdvFeatureConfig+0x15c>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	035b      	lsls	r3, r3, #13
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d10b      	bne.n	80029ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <UART_AdvFeatureConfig+0x160>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	4013      	ands	r3, r2
 80029f2:	d00b      	beq.n	8002a0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <UART_AdvFeatureConfig+0x164>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  }
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	fffdffff 	.word	0xfffdffff
 8002a18:	fffeffff 	.word	0xfffeffff
 8002a1c:	fffbffff 	.word	0xfffbffff
 8002a20:	ffff7fff 	.word	0xffff7fff
 8002a24:	ffffefff 	.word	0xffffefff
 8002a28:	ffffdfff 	.word	0xffffdfff
 8002a2c:	ffefffff 	.word	0xffefffff
 8002a30:	ff9fffff 	.word	0xff9fffff
 8002a34:	fff7ffff 	.word	0xfff7ffff

08002a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	228c      	movs	r2, #140	; 0x8c
 8002a44:	2100      	movs	r1, #0
 8002a46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a48:	f7fe fa2e 	bl	8000ea8 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2208      	movs	r2, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d10c      	bne.n	8002a78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	0391      	lsls	r1, r2, #14
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <UART_CheckIdleState+0x90>)
 8002a68:	9200      	str	r2, [sp, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f000 f82e 	bl	8002acc <UART_WaitOnFlagUntilTimeout>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d001      	beq.n	8002a78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e023      	b.n	8002ac0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d10c      	bne.n	8002aa0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	03d1      	lsls	r1, r2, #15
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <UART_CheckIdleState+0x90>)
 8002a90:	9200      	str	r2, [sp, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f000 f81a 	bl	8002acc <UART_WaitOnFlagUntilTimeout>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00f      	b.n	8002ac0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2284      	movs	r2, #132	; 0x84
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2288      	movs	r2, #136	; 0x88
 8002aac:	2120      	movs	r1, #32
 8002aae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	01ffffff 	.word	0x01ffffff

08002acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b094      	sub	sp, #80	; 0x50
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002adc:	e0a7      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	d100      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ae4:	e0a3      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe f9df 	bl	8000ea8 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <UART_WaitOnFlagUntilTimeout+0x30>
 8002af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13f      	bne.n	8002b7c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afc:	f3ef 8310 	mrs	r3, PRIMASK
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
 8002b06:	2301      	movs	r3, #1
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	494e      	ldr	r1, [pc, #312]	; (8002c58 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	f383 8810 	msr	PRIMASK, r3
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	643b      	str	r3, [r7, #64]	; 0x40
 8002b38:	2301      	movs	r3, #1
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	f383 8810 	msr	PRIMASK, r3
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	f383 8810 	msr	PRIMASK, r3
}
 8002b5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2284      	movs	r2, #132	; 0x84
 8002b64:	2120      	movs	r1, #32
 8002b66:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2288      	movs	r2, #136	; 0x88
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	2100      	movs	r1, #0
 8002b76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e069      	b.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2204      	movs	r2, #4
 8002b84:	4013      	ands	r3, r2
 8002b86:	d052      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	401a      	ands	r2, r3
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d148      	bne.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8002baa:	613b      	str	r3, [r7, #16]
  return(result);
 8002bac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4924      	ldr	r1, [pc, #144]	; (8002c58 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002bc8:	400a      	ands	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f383 8810 	msr	PRIMASK, r3
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bde:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be2:	2301      	movs	r3, #1
 8002be4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f383 8810 	msr	PRIMASK, r3
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	f383 8810 	msr	PRIMASK, r3
}
 8002c08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2284      	movs	r2, #132	; 0x84
 8002c0e:	2120      	movs	r1, #32
 8002c10:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2288      	movs	r2, #136	; 0x88
 8002c16:	2120      	movs	r1, #32
 8002c18:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	228c      	movs	r2, #140	; 0x8c
 8002c1e:	2120      	movs	r1, #32
 8002c20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e010      	b.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	425a      	negs	r2, r3
 8002c3e:	4153      	adcs	r3, r2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	001a      	movs	r2, r3
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d100      	bne.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x182>
 8002c4c:	e747      	b.n	8002ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b014      	add	sp, #80	; 0x50
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	fffffe5f 	.word	0xfffffe5f

08002c5c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e05d      	b.n	8002d30 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2284      	movs	r2, #132	; 0x84
 8002c78:	589b      	ldr	r3, [r3, r2]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe f829 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2284      	movs	r2, #132	; 0x84
 8002c92:	2124      	movs	r1, #36	; 0x24
 8002c94:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fc93 	bl	80025d4 <UART_SetConfig>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e03b      	b.n	8002d30 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff fe04 	bl	80028d0 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	01c9      	lsls	r1, r1, #7
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_RS485Ex_Init+0xdc>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	055b      	lsls	r3, r3, #21
 8002cf4:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_RS485Ex_Init+0xe0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7ff fe85 	bl	8002a38 <UART_CheckIdleState>
 8002d2e:	0003      	movs	r3, r0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	ffff7fff 	.word	0xffff7fff
 8002d3c:	fc00ffff 	.word	0xfc00ffff

08002d40 <LL_EXTI_EnableIT_0_31>:
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d48:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	58d2      	ldr	r2, [r2, r3]
 8002d4e:	4904      	ldr	r1, [pc, #16]	; (8002d60 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	508b      	str	r3, [r1, r2]
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021800 	.word	0x40021800

08002d64 <LL_EXTI_DisableIT_0_31>:
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002d6c:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	58d3      	ldr	r3, [r2, r3]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	43d2      	mvns	r2, r2
 8002d76:	4904      	ldr	r1, [pc, #16]	; (8002d88 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	508b      	str	r3, [r1, r2]
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40021800 	.word	0x40021800

08002d8c <LL_EXTI_EnableEvent_0_31>:
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002d94:	4a05      	ldr	r2, [pc, #20]	; (8002dac <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d96:	2384      	movs	r3, #132	; 0x84
 8002d98:	58d2      	ldr	r2, [r2, r3]
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	2284      	movs	r2, #132	; 0x84
 8002da2:	508b      	str	r3, [r1, r2]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021800 	.word	0x40021800

08002db0 <LL_EXTI_DisableEvent_0_31>:
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002db8:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dba:	2384      	movs	r3, #132	; 0x84
 8002dbc:	58d3      	ldr	r3, [r2, r3]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	43d2      	mvns	r2, r2
 8002dc2:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2284      	movs	r2, #132	; 0x84
 8002dc8:	508b      	str	r3, [r1, r2]
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	40021800 	.word	0x40021800

08002dd8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021800 	.word	0x40021800

08002df8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40021800 	.word	0x40021800

08002e1c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021800 	.word	0x40021800

08002e3c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	40021800 	.word	0x40021800

08002e60 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002e68:	230f      	movs	r3, #15
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	791b      	ldrb	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d100      	bne.n	8002e7a <LL_EXTI_Init+0x1a>
 8002e78:	e068      	b.n	8002f4c <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d100      	bne.n	8002e84 <LL_EXTI_Init+0x24>
 8002e82:	e06e      	b.n	8002f62 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	795b      	ldrb	r3, [r3, #5]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d01b      	beq.n	8002ec4 <LL_EXTI_Init+0x64>
 8002e8c:	dc25      	bgt.n	8002eda <LL_EXTI_Init+0x7a>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <LL_EXTI_Init+0x38>
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d00b      	beq.n	8002eae <LL_EXTI_Init+0x4e>
 8002e96:	e020      	b.n	8002eda <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff ff87 	bl	8002db0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff ff4a 	bl	8002d40 <LL_EXTI_EnableIT_0_31>
          break;
 8002eac:	e01a      	b.n	8002ee4 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff ff56 	bl	8002d64 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7ff ff65 	bl	8002d8c <LL_EXTI_EnableEvent_0_31>
          break;
 8002ec2:	e00f      	b.n	8002ee4 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff ff39 	bl	8002d40 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff ff5a 	bl	8002d8c <LL_EXTI_EnableEvent_0_31>
          break;
 8002ed8:	e004      	b.n	8002ee4 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002eda:	230f      	movs	r3, #15
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
          break;
 8002ee2:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	799b      	ldrb	r3, [r3, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d03a      	beq.n	8002f62 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	799b      	ldrb	r3, [r3, #6]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d01b      	beq.n	8002f2c <LL_EXTI_Init+0xcc>
 8002ef4:	dc25      	bgt.n	8002f42 <LL_EXTI_Init+0xe2>
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d002      	beq.n	8002f00 <LL_EXTI_Init+0xa0>
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d00b      	beq.n	8002f16 <LL_EXTI_Init+0xb6>
 8002efe:	e020      	b.n	8002f42 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff ff99 	bl	8002e3c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff ff62 	bl	8002dd8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002f14:	e026      	b.n	8002f64 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff ff6c 	bl	8002df8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ff79 	bl	8002e1c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002f2a:	e01b      	b.n	8002f64 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7ff ff51 	bl	8002dd8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7ff ff6e 	bl	8002e1c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002f40:	e010      	b.n	8002f64 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8002f42:	230f      	movs	r3, #15
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
            break;
 8002f4a:	e00b      	b.n	8002f64 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff ff07 	bl	8002d64 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff ff28 	bl	8002db0 <LL_EXTI_DisableEvent_0_31>
 8002f60:	e000      	b.n	8002f64 <LL_EXTI_Init+0x104>
      }
 8002f62:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8002f64:	230f      	movs	r3, #15
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b004      	add	sp, #16
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <LL_GPIO_SetPinMode>:
{
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b08d      	sub	sp, #52	; 0x34
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681c      	ldr	r4, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8002f86:	231f      	movs	r3, #31
 8002f88:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	e00e      	b.n	8002fb4 <LL_GPIO_SetPinMode+0x42>
    result <<= 1U;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
    s--;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ed      	bne.n	8002f96 <LL_GPIO_SetPinMode+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
  return result;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <LL_GPIO_SetPinMode+0x60>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <LL_GPIO_SetPinMode+0x6a>
  return __builtin_clz(value);
 8002fd2:	69f8      	ldr	r0, [r7, #28]
 8002fd4:	f7fd f924 	bl	8000220 <__clzsi2>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	0013      	movs	r3, r2
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401c      	ands	r4, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8002fec:	231f      	movs	r3, #31
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffa:	e00e      	b.n	800301a <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	2201      	movs	r2, #1
 8003006:	4013      	ands	r3, r2
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	4313      	orrs	r3, r2
 800300c:	623b      	str	r3, [r7, #32]
    s--;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	3b01      	subs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ed      	bne.n	8002ffc <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	409a      	lsls	r2, r3
 8003026:	0013      	movs	r3, r2
 8003028:	623b      	str	r3, [r7, #32]
  return result;
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e004      	b.n	8003042 <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 8003038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800303a:	f7fd f8f1 	bl	8000220 <__clzsi2>
 800303e:	0003      	movs	r3, r0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	409a      	lsls	r2, r3
 8003048:	0013      	movs	r3, r2
 800304a:	0022      	movs	r2, r4
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b00d      	add	sp, #52	; 0x34
 8003058:	bd90      	pop	{r4, r7, pc}

0800305a <LL_GPIO_SetPinOutputType>:
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	43d2      	mvns	r2, r2
 800306e:	401a      	ands	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	434b      	muls	r3, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}

08003084 <LL_GPIO_SetPinSpeed>:
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b08d      	sub	sp, #52	; 0x34
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689c      	ldr	r4, [r3, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8003098:	231f      	movs	r3, #31
 800309a:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e00e      	b.n	80030c6 <LL_GPIO_SetPinSpeed+0x42>
    result <<= 1U;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
    s--;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3b01      	subs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ed      	bne.n	80030a8 <LL_GPIO_SetPinSpeed+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0013      	movs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
  return result;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <LL_GPIO_SetPinSpeed+0x60>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e004      	b.n	80030ee <LL_GPIO_SetPinSpeed+0x6a>
  return __builtin_clz(value);
 80030e4:	69f8      	ldr	r0, [r7, #28]
 80030e6:	f7fd f89b 	bl	8000220 <__clzsi2>
 80030ea:	0003      	movs	r3, r0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	409a      	lsls	r2, r3
 80030f4:	0013      	movs	r3, r2
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401c      	ands	r4, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80030fe:	231f      	movs	r3, #31
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
 800310c:	e00e      	b.n	800312c <LL_GPIO_SetPinSpeed+0xa8>
    result <<= 1U;
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	4313      	orrs	r3, r2
 800311e:	623b      	str	r3, [r7, #32]
    s--;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ed      	bne.n	800310e <LL_GPIO_SetPinSpeed+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	623b      	str	r3, [r7, #32]
  return result;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <LL_GPIO_SetPinSpeed+0xc6>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e004      	b.n	8003154 <LL_GPIO_SetPinSpeed+0xd0>
  return __builtin_clz(value);
 800314a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800314c:	f7fd f868 	bl	8000220 <__clzsi2>
 8003150:	0003      	movs	r3, r0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	0022      	movs	r2, r4
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b00d      	add	sp, #52	; 0x34
 800316a:	bd90      	pop	{r4, r7, pc}

0800316c <LL_GPIO_SetPinPull>:
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b08d      	sub	sp, #52	; 0x34
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68dc      	ldr	r4, [r3, #12]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8003180:	231f      	movs	r3, #31
 8003182:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	e00e      	b.n	80031ae <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
    s--;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ed      	bne.n	8003190 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	409a      	lsls	r2, r3
 80031ba:	0013      	movs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
  return result;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <LL_GPIO_SetPinPull+0x60>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e004      	b.n	80031d6 <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 80031cc:	69f8      	ldr	r0, [r7, #28]
 80031ce:	f7fd f827 	bl	8000220 <__clzsi2>
 80031d2:	0003      	movs	r3, r0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	43db      	mvns	r3, r3
 80031e0:	401c      	ands	r4, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80031e6:	231f      	movs	r3, #31
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f4:	e00e      	b.n	8003214 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	4313      	orrs	r3, r2
 8003206:	623b      	str	r3, [r7, #32]
    s--;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	3b01      	subs	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ed      	bne.n	80031f6 <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	623b      	str	r3, [r7, #32]
  return result;
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e004      	b.n	800323c <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 8003232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003234:	f7fc fff4 	bl	8000220 <__clzsi2>
 8003238:	0003      	movs	r3, r0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	409a      	lsls	r2, r3
 8003242:	0013      	movs	r3, r2
 8003244:	0022      	movs	r2, r4
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b00d      	add	sp, #52	; 0x34
 8003252:	bd90      	pop	{r4, r7, pc}

08003254 <LL_GPIO_SetAFPin_0_7>:
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b08d      	sub	sp, #52	; 0x34
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1c      	ldr	r4, [r3, #32]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8003268:	231f      	movs	r3, #31
 800326a:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e00e      	b.n	8003296 <LL_GPIO_SetAFPin_0_7+0x42>
    result <<= 1U;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2201      	movs	r2, #1
 8003282:	4013      	ands	r3, r2
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
    s--;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3b01      	subs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ed      	bne.n	8003278 <LL_GPIO_SetAFPin_0_7+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	409a      	lsls	r2, r3
 80032a2:	0013      	movs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
  return result;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <LL_GPIO_SetAFPin_0_7+0x60>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e004      	b.n	80032be <LL_GPIO_SetAFPin_0_7+0x6a>
  return __builtin_clz(value);
 80032b4:	69f8      	ldr	r0, [r7, #28]
 80032b6:	f7fc ffb3 	bl	8000220 <__clzsi2>
 80032ba:	0003      	movs	r3, r0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	43db      	mvns	r3, r3
 80032c8:	401c      	ands	r4, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80032ce:	231f      	movs	r3, #31
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
 80032dc:	e00e      	b.n	80032fc <LL_GPIO_SetAFPin_0_7+0xa8>
    result <<= 1U;
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	2201      	movs	r2, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	623b      	str	r3, [r7, #32]
    s--;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	3b01      	subs	r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ed      	bne.n	80032de <LL_GPIO_SetAFPin_0_7+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8003302:	6a3a      	ldr	r2, [r7, #32]
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	623b      	str	r3, [r7, #32]
  return result;
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <LL_GPIO_SetAFPin_0_7+0xc6>
    return 32U;
 8003316:	2320      	movs	r3, #32
 8003318:	e004      	b.n	8003324 <LL_GPIO_SetAFPin_0_7+0xd0>
  return __builtin_clz(value);
 800331a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800331c:	f7fc ff80 	bl	8000220 <__clzsi2>
 8003320:	0003      	movs	r3, r0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	409a      	lsls	r2, r3
 800332a:	0013      	movs	r3, r2
 800332c:	0022      	movs	r2, r4
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b00d      	add	sp, #52	; 0x34
 800333a:	bd90      	pop	{r4, r7, pc}

0800333c <LL_GPIO_SetAFPin_8_15>:
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b08d      	sub	sp, #52	; 0x34
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8003352:	231f      	movs	r3, #31
 8003354:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	e00e      	b.n	8003380 <LL_GPIO_SetAFPin_8_15+0x44>
    result <<= 1U;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    s--;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3b01      	subs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ed      	bne.n	8003362 <LL_GPIO_SetAFPin_8_15+0x26>
  result <<= s;                        /* shift when v's highest bits are zero */
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
 800338c:	0013      	movs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
  return result;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <LL_GPIO_SetAFPin_8_15+0x62>
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e004      	b.n	80033a8 <LL_GPIO_SetAFPin_8_15+0x6c>
  return __builtin_clz(value);
 800339e:	69f8      	ldr	r0, [r7, #28]
 80033a0:	f7fc ff3e 	bl	8000220 <__clzsi2>
 80033a4:	0003      	movs	r3, r0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	409a      	lsls	r2, r3
 80033ae:	0013      	movs	r3, r2
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401c      	ands	r4, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80033ba:	231f      	movs	r3, #31
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c8:	e00e      	b.n	80033e8 <LL_GPIO_SetAFPin_8_15+0xac>
    result <<= 1U;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2201      	movs	r2, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	4313      	orrs	r3, r2
 80033da:	623b      	str	r3, [r7, #32]
    s--;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	3b01      	subs	r3, #1
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ed      	bne.n	80033ca <LL_GPIO_SetAFPin_8_15+0x8e>
  result <<= s;                        /* shift when v's highest bits are zero */
 80033ee:	6a3a      	ldr	r2, [r7, #32]
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	623b      	str	r3, [r7, #32]
  return result;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <LL_GPIO_SetAFPin_8_15+0xca>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e004      	b.n	8003410 <LL_GPIO_SetAFPin_8_15+0xd4>
  return __builtin_clz(value);
 8003406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003408:	f7fc ff0a 	bl	8000220 <__clzsi2>
 800340c:	0003      	movs	r3, r0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	409a      	lsls	r2, r3
 8003416:	0013      	movs	r3, r2
 8003418:	0022      	movs	r2, r4
 800341a:	431a      	orrs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b00d      	add	sp, #52	; 0x34
 8003426:	bd90      	pop	{r4, r7, pc}

08003428 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8003438:	231f      	movs	r3, #31
 800343a:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	623b      	str	r3, [r7, #32]
 8003446:	e00e      	b.n	8003466 <LL_GPIO_Init+0x3e>
    result <<= 1U;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2201      	movs	r2, #1
 8003452:	4013      	ands	r3, r2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
    s--;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b01      	subs	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ed      	bne.n	8003448 <LL_GPIO_Init+0x20>
  result <<= s;                        /* shift when v's highest bits are zero */
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	409a      	lsls	r2, r3
 8003472:	0013      	movs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
  return result;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <LL_GPIO_Init+0x5c>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e004      	b.n	800348e <LL_GPIO_Init+0x66>
  return __builtin_clz(value);
 8003484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003486:	f7fc fecb 	bl	8000220 <__clzsi2>
 800348a:	0003      	movs	r3, r0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8003490:	e06c      	b.n	800356c <LL_GPIO_Init+0x144>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349a:	4091      	lsls	r1, r2
 800349c:	000a      	movs	r2, r1
 800349e:	4013      	ands	r3, r2
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (currentpin != 0U)
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05e      	beq.n	8003566 <LL_GPIO_Init+0x13e>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff fd5e 	bl	8002f72 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d003      	beq.n	80034c6 <LL_GPIO_Init+0x9e>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d106      	bne.n	80034d4 <LL_GPIO_Init+0xac>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7ff fdd8 	bl	8003084 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff fe45 	bl	800316c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d13d      	bne.n	8003566 <LL_GPIO_Init+0x13e>
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80034ee:	231f      	movs	r3, #31
 80034f0:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e00e      	b.n	800351c <LL_GPIO_Init+0xf4>
    result <<= 1U;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2201      	movs	r2, #1
 8003508:	4013      	ands	r3, r2
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4313      	orrs	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
    s--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3b01      	subs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ed      	bne.n	80034fe <LL_GPIO_Init+0xd6>
  result <<= s;                        /* shift when v's highest bits are zero */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	409a      	lsls	r2, r3
 8003528:	0013      	movs	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  return result;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <LL_GPIO_Init+0x112>
    return 32U;
 8003536:	2320      	movs	r3, #32
 8003538:	e004      	b.n	8003544 <LL_GPIO_Init+0x11c>
  return __builtin_clz(value);
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7fc fe70 	bl	8000220 <__clzsi2>
 8003540:	0003      	movs	r3, r0
 8003542:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8003544:	2b07      	cmp	r3, #7
 8003546:	d807      	bhi.n	8003558 <LL_GPIO_Init+0x130>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fe7f 	bl	8003254 <LL_GPIO_SetAFPin_0_7>
 8003556:	e006      	b.n	8003566 <LL_GPIO_Init+0x13e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff feeb 	bl	800333c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	3301      	adds	r3, #1
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	40da      	lsrs	r2, r3
 8003574:	1e13      	subs	r3, r2, #0
 8003576:	d18c      	bne.n	8003492 <LL_GPIO_Init+0x6a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d003      	beq.n	8003588 <LL_GPIO_Init+0x160>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d107      	bne.n	8003598 <LL_GPIO_Init+0x170>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f7ff fd61 	bl	800305a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8003598:	2300      	movs	r3, #0
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b00c      	add	sp, #48	; 0x30
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <__libc_init_array>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	2600      	movs	r6, #0
 80035a8:	4d0c      	ldr	r5, [pc, #48]	; (80035dc <__libc_init_array+0x38>)
 80035aa:	4c0d      	ldr	r4, [pc, #52]	; (80035e0 <__libc_init_array+0x3c>)
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	42a6      	cmp	r6, r4
 80035b2:	d109      	bne.n	80035c8 <__libc_init_array+0x24>
 80035b4:	2600      	movs	r6, #0
 80035b6:	f000 f821 	bl	80035fc <_init>
 80035ba:	4d0a      	ldr	r5, [pc, #40]	; (80035e4 <__libc_init_array+0x40>)
 80035bc:	4c0a      	ldr	r4, [pc, #40]	; (80035e8 <__libc_init_array+0x44>)
 80035be:	1b64      	subs	r4, r4, r5
 80035c0:	10a4      	asrs	r4, r4, #2
 80035c2:	42a6      	cmp	r6, r4
 80035c4:	d105      	bne.n	80035d2 <__libc_init_array+0x2e>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	00b3      	lsls	r3, r6, #2
 80035ca:	58eb      	ldr	r3, [r5, r3]
 80035cc:	4798      	blx	r3
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7ee      	b.n	80035b0 <__libc_init_array+0xc>
 80035d2:	00b3      	lsls	r3, r6, #2
 80035d4:	58eb      	ldr	r3, [r5, r3]
 80035d6:	4798      	blx	r3
 80035d8:	3601      	adds	r6, #1
 80035da:	e7f2      	b.n	80035c2 <__libc_init_array+0x1e>
 80035dc:	080036ac 	.word	0x080036ac
 80035e0:	080036ac 	.word	0x080036ac
 80035e4:	080036ac 	.word	0x080036ac
 80035e8:	080036b0 	.word	0x080036b0

080035ec <memset>:
 80035ec:	0003      	movs	r3, r0
 80035ee:	1882      	adds	r2, r0, r2
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	7019      	strb	r1, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <_init>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr

08003608 <_fini>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr

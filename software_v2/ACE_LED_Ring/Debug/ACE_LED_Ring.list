
ACE_LED_Ring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e04  08006e04  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  08006e04  08006e04  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e04  08006e04  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08006e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000f8  08006f04  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08006f04  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128c4  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb0  00000000  00000000  000329e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00036898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00037ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a469  00000000  00000000  00038ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198b2  00000000  00000000  00052f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cb0  00000000  00000000  0006c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f348b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  000f34dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f8 	.word	0x200000f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006934 	.word	0x08006934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000fc 	.word	0x200000fc
 8000104:	08006934 	.word	0x08006934

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__clzsi2>:
 8000234:	211c      	movs	r1, #28
 8000236:	2301      	movs	r3, #1
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0xe>
 800023e:	0c00      	lsrs	r0, r0, #16
 8000240:	3910      	subs	r1, #16
 8000242:	0a1b      	lsrs	r3, r3, #8
 8000244:	4298      	cmp	r0, r3
 8000246:	d301      	bcc.n	800024c <__clzsi2+0x18>
 8000248:	0a00      	lsrs	r0, r0, #8
 800024a:	3908      	subs	r1, #8
 800024c:	091b      	lsrs	r3, r3, #4
 800024e:	4298      	cmp	r0, r3
 8000250:	d301      	bcc.n	8000256 <__clzsi2+0x22>
 8000252:	0900      	lsrs	r0, r0, #4
 8000254:	3904      	subs	r1, #4
 8000256:	a202      	add	r2, pc, #8	; (adr r2, 8000260 <__clzsi2+0x2c>)
 8000258:	5c10      	ldrb	r0, [r2, r0]
 800025a:	1840      	adds	r0, r0, r1
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	02020304 	.word	0x02020304
 8000264:	01010101 	.word	0x01010101
	...

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	0002      	movs	r2, r0
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b7f      	cmp	r3, #127	; 0x7f
 8000282:	d809      	bhi.n	8000298 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000284:	1dfb      	adds	r3, r7, #7
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	001a      	movs	r2, r3
 800028a:	231f      	movs	r3, #31
 800028c:	401a      	ands	r2, r3
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <__NVIC_EnableIRQ+0x30>)
 8000290:	2101      	movs	r1, #1
 8000292:	4091      	lsls	r1, r2
 8000294:	000a      	movs	r2, r1
 8000296:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	0002      	movs	r2, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b7f      	cmp	r3, #127	; 0x7f
 80002b8:	d828      	bhi.n	800030c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ba:	4a2f      	ldr	r2, [pc, #188]	; (8000378 <__NVIC_SetPriority+0xd4>)
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	089b      	lsrs	r3, r3, #2
 80002c4:	33c0      	adds	r3, #192	; 0xc0
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	589b      	ldr	r3, [r3, r2]
 80002ca:	1dfa      	adds	r2, r7, #7
 80002cc:	7812      	ldrb	r2, [r2, #0]
 80002ce:	0011      	movs	r1, r2
 80002d0:	2203      	movs	r2, #3
 80002d2:	400a      	ands	r2, r1
 80002d4:	00d2      	lsls	r2, r2, #3
 80002d6:	21ff      	movs	r1, #255	; 0xff
 80002d8:	4091      	lsls	r1, r2
 80002da:	000a      	movs	r2, r1
 80002dc:	43d2      	mvns	r2, r2
 80002de:	401a      	ands	r2, r3
 80002e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	019b      	lsls	r3, r3, #6
 80002e6:	22ff      	movs	r2, #255	; 0xff
 80002e8:	401a      	ands	r2, r3
 80002ea:	1dfb      	adds	r3, r7, #7
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	0018      	movs	r0, r3
 80002f0:	2303      	movs	r3, #3
 80002f2:	4003      	ands	r3, r0
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f8:	481f      	ldr	r0, [pc, #124]	; (8000378 <__NVIC_SetPriority+0xd4>)
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	089b      	lsrs	r3, r3, #2
 8000302:	430a      	orrs	r2, r1
 8000304:	33c0      	adds	r3, #192	; 0xc0
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800030a:	e031      	b.n	8000370 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <__NVIC_SetPriority+0xd8>)
 800030e:	1dfb      	adds	r3, r7, #7
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	0019      	movs	r1, r3
 8000314:	230f      	movs	r3, #15
 8000316:	400b      	ands	r3, r1
 8000318:	3b08      	subs	r3, #8
 800031a:	089b      	lsrs	r3, r3, #2
 800031c:	3306      	adds	r3, #6
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	18d3      	adds	r3, r2, r3
 8000322:	3304      	adds	r3, #4
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	1dfa      	adds	r2, r7, #7
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	0011      	movs	r1, r2
 800032c:	2203      	movs	r2, #3
 800032e:	400a      	ands	r2, r1
 8000330:	00d2      	lsls	r2, r2, #3
 8000332:	21ff      	movs	r1, #255	; 0xff
 8000334:	4091      	lsls	r1, r2
 8000336:	000a      	movs	r2, r1
 8000338:	43d2      	mvns	r2, r2
 800033a:	401a      	ands	r2, r3
 800033c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	22ff      	movs	r2, #255	; 0xff
 8000344:	401a      	ands	r2, r3
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	0018      	movs	r0, r3
 800034c:	2303      	movs	r3, #3
 800034e:	4003      	ands	r3, r0
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000354:	4809      	ldr	r0, [pc, #36]	; (800037c <__NVIC_SetPriority+0xd8>)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	001c      	movs	r4, r3
 800035c:	230f      	movs	r3, #15
 800035e:	4023      	ands	r3, r4
 8000360:	3b08      	subs	r3, #8
 8000362:	089b      	lsrs	r3, r3, #2
 8000364:	430a      	orrs	r2, r1
 8000366:	3306      	adds	r3, #6
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	18c3      	adds	r3, r0, r3
 800036c:	3304      	adds	r3, #4
 800036e:	601a      	str	r2, [r3, #0]
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b003      	add	sp, #12
 8000376:	bd90      	pop	{r4, r7, pc}
 8000378:	e000e100 	.word	0xe000e100
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_DMA_Init+0x34>)
 8000388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <MX_DMA_Init+0x34>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	639a      	str	r2, [r3, #56]	; 0x38
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_DMA_Init+0x34>)
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 800039e:	2100      	movs	r1, #0
 80003a0:	2009      	movs	r0, #9
 80003a2:	f7ff ff7f 	bl	80002a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003a6:	2009      	movs	r0, #9
 80003a8:	f7ff ff62 	bl	8000270 <__NVIC_EnableIRQ>

}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b002      	add	sp, #8
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b08d      	sub	sp, #52	; 0x34
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	681c      	ldr	r4, [r3, #0]
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	61bb      	str	r3, [r7, #24]
#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
#else
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80003cc:	231f      	movs	r3, #31
 80003ce:	617b      	str	r3, [r7, #20]

  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	085b      	lsrs	r3, r3, #1
 80003d8:	61bb      	str	r3, [r7, #24]
 80003da:	e00e      	b.n	80003fa <LL_GPIO_SetPinMode+0x42>
  {
    result <<= 1U;
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	2201      	movs	r2, #1
 80003e6:	4013      	ands	r3, r2
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	613b      	str	r3, [r7, #16]
    s--;
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	085b      	lsrs	r3, r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d1ed      	bne.n	80003dc <LL_GPIO_SetPinMode+0x24>
  }
  result <<= s;                        /* shift when v's highest bits are zero */
 8000400:	693a      	ldr	r2, [r7, #16]
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	409a      	lsls	r2, r3
 8000406:	0013      	movs	r3, r2
 8000408:	613b      	str	r3, [r7, #16]
#endif
  return result;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d101      	bne.n	8000418 <LL_GPIO_SetPinMode+0x60>
  {
    return 32U;
 8000414:	2320      	movs	r3, #32
 8000416:	e004      	b.n	8000422 <LL_GPIO_SetPinMode+0x6a>
  }
  return __builtin_clz(value);
 8000418:	69f8      	ldr	r0, [r7, #28]
 800041a:	f7ff ff0b 	bl	8000234 <__clzsi2>
 800041e:	0003      	movs	r3, r0
 8000420:	b2db      	uxtb	r3, r3
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	2203      	movs	r2, #3
 8000426:	409a      	lsls	r2, r3
 8000428:	0013      	movs	r3, r2
 800042a:	43db      	mvns	r3, r3
 800042c:	401c      	ands	r4, r3
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000432:	231f      	movs	r3, #31
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000438:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800043a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800043c:	085b      	lsrs	r3, r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000440:	e00e      	b.n	8000460 <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 8000442:	6a3b      	ldr	r3, [r7, #32]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800044a:	2201      	movs	r2, #1
 800044c:	4013      	ands	r3, r2
 800044e:	6a3a      	ldr	r2, [r7, #32]
 8000450:	4313      	orrs	r3, r2
 8000452:	623b      	str	r3, [r7, #32]
    s--;
 8000454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000456:	3b01      	subs	r3, #1
 8000458:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800045a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800045c:	085b      	lsrs	r3, r3, #1
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000462:	2b00      	cmp	r3, #0
 8000464:	d1ed      	bne.n	8000442 <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000466:	6a3a      	ldr	r2, [r7, #32]
 8000468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046a:	409a      	lsls	r2, r3
 800046c:	0013      	movs	r3, r2
 800046e:	623b      	str	r3, [r7, #32]
  return result;
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 800047a:	2320      	movs	r3, #32
 800047c:	e004      	b.n	8000488 <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 800047e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000480:	f7ff fed8 	bl	8000234 <__clzsi2>
 8000484:	0003      	movs	r3, r0
 8000486:	b2db      	uxtb	r3, r3
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	409a      	lsls	r2, r3
 800048e:	0013      	movs	r3, r2
 8000490:	0022      	movs	r2, r4
 8000492:	431a      	orrs	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b00d      	add	sp, #52	; 0x34
 800049e:	bd90      	pop	{r4, r7, pc}

080004a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08d      	sub	sp, #52	; 0x34
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	68dc      	ldr	r4, [r3, #12]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80004b4:	231f      	movs	r3, #31
 80004b6:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80004bc:	69bb      	ldr	r3, [r7, #24]
 80004be:	085b      	lsrs	r3, r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
 80004c2:	e00e      	b.n	80004e2 <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2201      	movs	r2, #1
 80004ce:	4013      	ands	r3, r2
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	613b      	str	r3, [r7, #16]
    s--;
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3b01      	subs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	085b      	lsrs	r3, r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1ed      	bne.n	80004c4 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	409a      	lsls	r2, r3
 80004ee:	0013      	movs	r3, r2
 80004f0:	613b      	str	r3, [r7, #16]
  return result;
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d101      	bne.n	8000500 <LL_GPIO_SetPinPull+0x60>
    return 32U;
 80004fc:	2320      	movs	r3, #32
 80004fe:	e004      	b.n	800050a <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 8000500:	69f8      	ldr	r0, [r7, #28]
 8000502:	f7ff fe97 	bl	8000234 <__clzsi2>
 8000506:	0003      	movs	r3, r0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	2203      	movs	r2, #3
 800050e:	409a      	lsls	r2, r3
 8000510:	0013      	movs	r3, r2
 8000512:	43db      	mvns	r3, r3
 8000514:	401c      	ands	r4, r3
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800051a:	231f      	movs	r3, #31
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000520:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000524:	085b      	lsrs	r3, r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
 8000528:	e00e      	b.n	8000548 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 800052a:	6a3b      	ldr	r3, [r7, #32]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	6a3a      	ldr	r2, [r7, #32]
 8000538:	4313      	orrs	r3, r2
 800053a:	623b      	str	r3, [r7, #32]
    s--;
 800053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053e:	3b01      	subs	r3, #1
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000544:	085b      	lsrs	r3, r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
 8000548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ed      	bne.n	800052a <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800054e:	6a3a      	ldr	r2, [r7, #32]
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	409a      	lsls	r2, r3
 8000554:	0013      	movs	r3, r2
 8000556:	623b      	str	r3, [r7, #32]
  return result;
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 8000562:	2320      	movs	r3, #32
 8000564:	e004      	b.n	8000570 <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 8000566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000568:	f7ff fe64 	bl	8000234 <__clzsi2>
 800056c:	0003      	movs	r3, r0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	409a      	lsls	r2, r3
 8000576:	0013      	movs	r3, r2
 8000578:	0022      	movs	r2, r4
 800057a:	431a      	orrs	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	60da      	str	r2, [r3, #12]
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b00d      	add	sp, #52	; 0x34
 8000586:	bd90      	pop	{r4, r7, pc}

08000588 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << \
 80005aa:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <LL_EXTI_SetEXTISource+0x48>)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2103      	movs	r1, #3
 80005b0:	400b      	ands	r3, r1
 80005b2:	3318      	adds	r3, #24
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	589b      	ldr	r3, [r3, r2]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	0c12      	lsrs	r2, r2, #16
 80005bc:	2107      	movs	r1, #7
 80005be:	4091      	lsls	r1, r2
 80005c0:	000a      	movs	r2, r1
 80005c2:	43d2      	mvns	r2, r2
 80005c4:	401a      	ands	r2, r3
 80005c6:	0011      	movs	r1, r2
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	0c1b      	lsrs	r3, r3, #16
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	409a      	lsls	r2, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <LL_EXTI_SetEXTISource+0x48>)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2403      	movs	r4, #3
 80005d6:	4023      	ands	r3, r4
 80005d8:	430a      	orrs	r2, r1
 80005da:	3318      	adds	r3, #24
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	501a      	str	r2, [r3, r0]
             (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b003      	add	sp, #12
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	40021800 	.word	0x40021800

080005ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <LL_IOP_GRP1_EnableClock+0x28>)
 80005f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_IOP_GRP1_EnableClock+0x28>)
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <LL_IOP_GRP1_EnableClock+0x28>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b004      	add	sp, #16
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800061e:	2418      	movs	r4, #24
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	2308      	movs	r3, #8
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f005 f96c 	bl	8005906 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	2318      	movs	r3, #24
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f005 f965 	bl	8005906 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 800063c:	2004      	movs	r0, #4
 800063e:	f7ff ffd5 	bl	80005ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ffd2 	bl	80005ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000648:	2002      	movs	r0, #2
 800064a:	f7ff ffcf 	bl	80005ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(ACE_EN_GPIO_Port, ACE_EN_Pin);
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	4a84      	ldr	r2, [pc, #528]	; (8000864 <MX_GPIO_Init+0x24c>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f7ff ff96 	bl	8000588 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TP2_GPIO_Port, TP2_Pin);
 800065c:	4b82      	ldr	r3, [pc, #520]	; (8000868 <MX_GPIO_Init+0x250>)
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff91 	bl	8000588 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TP1_GPIO_Port, TP1_Pin);
 8000666:	4b80      	ldr	r3, [pc, #512]	; (8000868 <MX_GPIO_Init+0x250>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff ff8c 	bl	8000588 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ACE_EN_Pin;
 8000670:	003b      	movs	r3, r7
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0212      	lsls	r2, r2, #8
 8000676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000678:	003b      	movs	r3, r7
 800067a:	2201      	movs	r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800067e:	003b      	movs	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000684:	003b      	movs	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800068a:	003b      	movs	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE_EN_GPIO_Port, &GPIO_InitStruct);
 8000690:	003b      	movs	r3, r7
 8000692:	4a74      	ldr	r2, [pc, #464]	; (8000864 <MX_GPIO_Init+0x24c>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f004 fd2e 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_Pin;
 800069c:	003b      	movs	r3, r7
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006a2:	003b      	movs	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006a8:	003b      	movs	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80006ae:	003a      	movs	r2, r7
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f004 fd1e 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80006bc:	003b      	movs	r3, r7
 80006be:	2220      	movs	r2, #32
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80006ce:	003a      	movs	r2, r7
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f004 fd0e 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE8_Pin;
 80006dc:	003b      	movs	r3, r7
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE8_GPIO_Port, &GPIO_InitStruct);
 80006ee:	003a      	movs	r2, r7
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f004 fcfe 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE7_Pin;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE7_GPIO_Port, &GPIO_InitStruct);
 800070e:	003a      	movs	r2, r7
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f004 fcee 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE6_Pin;
 800071c:	003b      	movs	r3, r7
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE6_GPIO_Port, &GPIO_InitStruct);
 800072e:	003b      	movs	r3, r7
 8000730:	4a4d      	ldr	r2, [pc, #308]	; (8000868 <MX_GPIO_Init+0x250>)
 8000732:	0019      	movs	r1, r3
 8000734:	0010      	movs	r0, r2
 8000736:	f004 fcdf 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE5_Pin;
 800073a:	003b      	movs	r3, r7
 800073c:	2202      	movs	r2, #2
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE5_GPIO_Port, &GPIO_InitStruct);
 800074c:	003b      	movs	r3, r7
 800074e:	4a46      	ldr	r2, [pc, #280]	; (8000868 <MX_GPIO_Init+0x250>)
 8000750:	0019      	movs	r1, r3
 8000752:	0010      	movs	r0, r2
 8000754:	f004 fcd0 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE2_Pin;
 8000758:	003b      	movs	r3, r7
 800075a:	2240      	movs	r2, #64	; 0x40
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE2_GPIO_Port, &GPIO_InitStruct);
 800076a:	003b      	movs	r3, r7
 800076c:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <MX_GPIO_Init+0x24c>)
 800076e:	0019      	movs	r1, r3
 8000770:	0010      	movs	r0, r2
 8000772:	f004 fcc1 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE3_Pin;
 8000776:	003b      	movs	r3, r7
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE3_GPIO_Port, &GPIO_InitStruct);
 800078a:	003a      	movs	r2, r7
 800078c:	23a0      	movs	r3, #160	; 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f004 fcb0 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACE4_Pin;
 8000798:	003b      	movs	r3, r7
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0152      	lsls	r2, r2, #5
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a6:	003b      	movs	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACE4_GPIO_Port, &GPIO_InitStruct);
 80007ac:	003a      	movs	r2, r7
 80007ae:	23a0      	movs	r3, #160	; 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f004 fc9f 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TP2_Pin;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2201      	movs	r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TP2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	003b      	movs	r3, r7
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_GPIO_Init+0x250>)
 80007dc:	0019      	movs	r1, r3
 80007de:	0010      	movs	r0, r2
 80007e0:	f004 fc8a 	bl	80050f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TP1_Pin;
 80007e4:	003b      	movs	r3, r7
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007f0:	003b      	movs	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 8000802:	003b      	movs	r3, r7
 8000804:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_GPIO_Init+0x250>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f004 fc75 	bl	80050f8 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTA, LL_EXTI_CONFIG_LINE8);
 800080e:	2102      	movs	r1, #2
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fec5 	bl	80005a0 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2201      	movs	r2, #1
 8000830:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000832:	187b      	adds	r3, r7, r1
 8000834:	0018      	movs	r0, r3
 8000836:	f004 f97b 	bl	8004b30 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ACE1_GPIO_Port, ACE1_Pin, LL_GPIO_PULL_NO);
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	0059      	lsls	r1, r3, #1
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	2200      	movs	r2, #0
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fe2b 	bl	80004a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ACE1_GPIO_Port, ACE1_Pin, LL_GPIO_MODE_INPUT);
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	0059      	lsls	r1, r3, #1
 800084e:	23a0      	movs	r3, #160	; 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2200      	movs	r2, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff fdaf 	bl	80003b8 <LL_GPIO_SetPinMode>

}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b009      	add	sp, #36	; 0x24
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	50000800 	.word	0x50000800
 8000868:	50000400 	.word	0x50000400

0800086c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_I2C1_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 ff6d 	bl	8003788 <HAL_I2C_Init>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 f99d 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f003 fb24 	bl	8003f08 <HAL_I2CEx_ConfigAnalogFilter>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 f994 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	0018      	movs	r0, r3
 80008ce:	f003 fb67 	bl	8003fa0 <HAL_I2CEx_ConfigDigitalFilter>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 f98b 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000114 	.word	0x20000114
 80008e4:	40005400 	.word	0x40005400
 80008e8:	2010091a 	.word	0x2010091a

080008ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b093      	sub	sp, #76	; 0x4c
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	2334      	movs	r3, #52	; 0x34
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	2314      	movs	r3, #20
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f005 f801 	bl	8005906 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	2418      	movs	r4, #24
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	231c      	movs	r3, #28
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f004 fff9 	bl	8005906 <memset>
  if(i2cHandle->Instance==I2C1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a34      	ldr	r2, [pc, #208]	; (80009ec <HAL_I2C_MspInit+0x100>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d162      	bne.n	80009e4 <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	f003 fec9 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000936:	f000 f95b 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 8000940:	2104      	movs	r1, #4
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	2204      	movs	r2, #4
 800094c:	4013      	ands	r3, r2
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 8000954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 8000958:	2102      	movs	r1, #2
 800095a:	430a      	orrs	r2, r1
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 8000960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000962:	2202      	movs	r2, #2
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800096a:	2134      	movs	r1, #52	; 0x34
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	01d2      	lsls	r2, r2, #7
 8000972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	000c      	movs	r4, r1
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2212      	movs	r2, #18
 800097a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	220e      	movs	r2, #14
 800098c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_I2C_MspInit+0x108>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f002 fd85 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0052      	lsls	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2212      	movs	r2, #18
 80009a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2206      	movs	r2, #6
 80009ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_I2C_MspInit+0x10c>)
 80009c0:	0019      	movs	r1, r3
 80009c2:	0010      	movs	r0, r2
 80009c4:	f002 fd6e 	bl	80034a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 80009ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	0389      	lsls	r1, r1, #14
 80009d2:	430a      	orrs	r2, r1
 80009d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 80009d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	039b      	lsls	r3, r3, #14
 80009de:	4013      	ands	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b013      	add	sp, #76	; 0x4c
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	50000800 	.word	0x50000800
 80009f8:	50000400 	.word	0x50000400

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a02:	f002 fc1f 	bl	8003244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a06:	f000 f8af 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0a:	f7ff fe05 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a0e:	f7ff fcb7 	bl	8000380 <MX_DMA_Init>
  MX_SPI1_Init();
 8000a12:	f000 f919 	bl	8000c48 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000a16:	f7ff ff29 	bl	800086c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a1a:	f000 fee5 	bl	80017e8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000a1e:	f000 fc3d 	bl	800129c <MX_TIM16_Init>





  uint8_t arr[2] = {0xCF, 0xAE};
 8000a22:	2314      	movs	r3, #20
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <main+0x158>)
 8000a28:	801a      	strh	r2, [r3, #0]


  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr, 2, 100) == HAL_BUSY){}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	18fa      	adds	r2, r7, r3
 8000a30:	4849      	ldr	r0, [pc, #292]	; (8000b58 <main+0x15c>)
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2302      	movs	r3, #2
 8000a38:	2168      	movs	r1, #104	; 0x68
 8000a3a:	f002 ff3b 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d0f3      	beq.n	8000a2c <main+0x30>
  uint8_t arr1[2] = {0xA0, 0x01};
 8000a44:	2310      	movs	r3, #16
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	22d0      	movs	r2, #208	; 0xd0
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr1, 2, 100) == HAL_BUSY){}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	2310      	movs	r3, #16
 8000a52:	18fa      	adds	r2, r7, r3
 8000a54:	4840      	ldr	r0, [pc, #256]	; (8000b58 <main+0x15c>)
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	2168      	movs	r1, #104	; 0x68
 8000a5e:	f002 ff29 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8000a62:	0003      	movs	r3, r0
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d0f3      	beq.n	8000a50 <main+0x54>
  uint8_t arr2[2] = {0xA1, 30};
 8000a68:	230c      	movs	r3, #12
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <main+0x160>)
 8000a6e:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr2, 2, 100) == HAL_BUSY){}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	230c      	movs	r3, #12
 8000a74:	18fa      	adds	r2, r7, r3
 8000a76:	4838      	ldr	r0, [pc, #224]	; (8000b58 <main+0x15c>)
 8000a78:	2364      	movs	r3, #100	; 0x64
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	2168      	movs	r1, #104	; 0x68
 8000a80:	f002 ff18 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8000a84:	0003      	movs	r3, r0
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d0f3      	beq.n	8000a72 <main+0x76>

	for(int a = 0x90; a < 0x9F; a++){
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	61fb      	str	r3, [r7, #28]
 8000a8e:	e017      	b.n	8000ac0 <main+0xc4>
		uint8_t arr3[2] = {a, 60};
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	2108      	movs	r1, #8
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	223c      	movs	r2, #60	; 0x3c
 8000a9e:	705a      	strb	r2, [r3, #1]
		while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr3, 2, 100) == HAL_BUSY){}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	18fa      	adds	r2, r7, r3
 8000aa6:	482c      	ldr	r0, [pc, #176]	; (8000b58 <main+0x15c>)
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2302      	movs	r3, #2
 8000aae:	2168      	movs	r1, #104	; 0x68
 8000ab0:	f002 ff00 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d0f3      	beq.n	8000aa2 <main+0xa6>
	for(int a = 0x90; a < 0x9F; a++){
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3301      	adds	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	2b9e      	cmp	r3, #158	; 0x9e
 8000ac4:	dde4      	ble.n	8000a90 <main+0x94>
	}

	for(int i = 0 ; i<30; i++){
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e01d      	b.n	8000b08 <main+0x10c>
	  uint8_t arr5[4] = {led_adr_arr[i], 0,255,100};
 8000acc:	4a24      	ldr	r2, [pc, #144]	; (8000b60 <main+0x164>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	705a      	strb	r2, [r3, #1]
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	709a      	strb	r2, [r3, #2]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2264      	movs	r2, #100	; 0x64
 8000ae8:	70da      	strb	r2, [r3, #3]
	  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr5, 4, 100) == HAL_BUSY){}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	481a      	ldr	r0, [pc, #104]	; (8000b58 <main+0x15c>)
 8000af0:	2364      	movs	r3, #100	; 0x64
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2304      	movs	r3, #4
 8000af6:	2168      	movs	r1, #104	; 0x68
 8000af8:	f002 fedc 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8000afc:	0003      	movs	r3, r0
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d0f4      	beq.n	8000aec <main+0xf0>
	for(int i = 0 ; i<30; i++){
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b1d      	cmp	r3, #29
 8000b0c:	ddde      	ble.n	8000acc <main+0xd0>
	}

	//__disable_irq();
	//Error_Handler();
	if(eMBInit(MB_RTU, 0x01, 0, 115200, MB_PAR_NONE) != MB_ENOERR )Error_Handler();
 8000b0e:	23e1      	movs	r3, #225	; 0xe1
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	2200      	movs	r2, #0
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f001 fcec 	bl	80024f8 <eMBInit>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <main+0x12c>
 8000b24:	f000 f864 	bl	8000bf0 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b28:	b662      	cpsie	i
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
	//if(eMBSetSlaveID( 0x1, FALSE, 0, 0 ) != MB_ENOERR )Error_Handler();
	//if(eMBSetSlaveID(ucSlaveID, xIsRunning, pucAdditional, usAdditionalLen))Error_Handler();
	__enable_irq();
	if(eMBEnable() != MB_ENOERR)Error_Handler();
 8000b2c:	f001 fd7c 	bl	8002628 <eMBEnable>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <main+0x13c>
 8000b34:	f000 f85c 	bl	8000bf0 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(eMBPoll()!=MB_ENOERR)Error_Handler();  /*Modbus poll update in each run*/
 8000b38:	f001 fd94 	bl	8002664 <eMBPoll>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <main+0x148>
 8000b40:	f000 f856 	bl	8000bf0 <Error_Handler>
        usRegInputBuf[0]++;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <main+0x168>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <main+0x168>)
 8000b4e:	801a      	strh	r2, [r3, #0]
	  if(eMBPoll()!=MB_ENOERR)Error_Handler();  /*Modbus poll update in each run*/
 8000b50:	e7f2      	b.n	8000b38 <main+0x13c>
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	ffffaecf 	.word	0xffffaecf
 8000b58:	20000114 	.word	0x20000114
 8000b5c:	00001ea1 	.word	0x00001ea1
 8000b60:	08006a2c 	.word	0x08006a2c
 8000b64:	20000218 	.word	0x20000218

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08d      	sub	sp, #52	; 0x34
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	2414      	movs	r4, #20
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	0018      	movs	r0, r3
 8000b74:	231c      	movs	r3, #28
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f004 fec4 	bl	8005906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7e:	003b      	movs	r3, r7
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f004 febd 	bl	8005906 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2202      	movs	r2, #2
 8000b90:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	0052      	lsls	r2, r2, #1
 8000b98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2240      	movs	r2, #64	; 0x40
 8000ba4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 fa45 	bl	8004038 <HAL_RCC_OscConfig>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 f81d 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbc:	003b      	movs	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f003 fc27 	bl	800442c <HAL_RCC_ClockConfig>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000be2:	f000 f805 	bl	8000bf0 <Error_Handler>
  }
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b00d      	add	sp, #52	; 0x34
 8000bec:	bd90      	pop	{r4, r7, pc}
	...

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
	for(int i = 0 ; i<30; i++){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e01d      	b.n	8000c38 <Error_Handler+0x48>
	  uint8_t arr6[4] = {led_adr_arr[i], 0,0,255};
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <Error_Handler+0x50>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	003b      	movs	r3, r7
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	705a      	strb	r2, [r3, #1]
 8000c0e:	003b      	movs	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	709a      	strb	r2, [r3, #2]
 8000c14:	003b      	movs	r3, r7
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	70da      	strb	r2, [r3, #3]
	  while(HAL_I2C_Master_Transmit(&hi2c1, IS3_ADR, arr6, 4, 100) == HAL_BUSY){}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	003a      	movs	r2, r7
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <Error_Handler+0x54>)
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2304      	movs	r3, #4
 8000c26:	2168      	movs	r1, #104	; 0x68
 8000c28:	f002 fe44 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d0f4      	beq.n	8000c1c <Error_Handler+0x2c>
	for(int i = 0 ; i<30; i++){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3301      	adds	r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b1d      	cmp	r3, #29
 8000c3c:	ddde      	ble.n	8000bfc <Error_Handler+0xc>
	}
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <Error_Handler+0x4e>
 8000c40:	08006a2c 	.word	0x08006a2c
 8000c44:	20000114 	.word	0x20000114

08000c48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <MX_SPI1_Init+0x70>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c60:	22e0      	movs	r2, #224	; 0xe0
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f003 fdfe 	bl	80048a0 <HAL_SPI_Init>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000ca8:	f7ff ffa2 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000160 	.word	0x20000160
 8000cb8:	40013000 	.word	0x40013000

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b093      	sub	sp, #76	; 0x4c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	2334      	movs	r3, #52	; 0x34
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	2314      	movs	r3, #20
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f004 fe19 	bl	8005906 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	2418      	movs	r4, #24
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	231c      	movs	r3, #28
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f004 fe11 	bl	8005906 <memset>
  if(spiHandle->Instance==SPI1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a35      	ldr	r2, [pc, #212]	; (8000dc0 <HAL_SPI_MspInit+0x104>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d163      	bne.n	8000db6 <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f003 fce0 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000d08:	f7ff ff72 	bl	8000bf0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0149      	lsls	r1, r1, #5
 8000d16:	430a      	orrs	r2, r1
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	015b      	lsls	r3, r3, #5
 8000d22:	4013      	ands	r3, r2
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d46:	2102      	movs	r1, #2
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_SPI_MspInit+0x108>)
 8000d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d50:	2202      	movs	r2, #2
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d58:	2134      	movs	r1, #52	; 0x34
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0212      	lsls	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	000c      	movs	r4, r1
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2202      	movs	r2, #2
 8000d68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	193a      	adds	r2, r7, r4
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f002 fb8d 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d8a:	0021      	movs	r1, r4
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2238      	movs	r2, #56	; 0x38
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_SPI_MspInit+0x10c>)
 8000dae:	0019      	movs	r1, r3
 8000db0:	0010      	movs	r0, r2
 8000db2:	f002 fb77 	bl	80034a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b013      	add	sp, #76	; 0x4c
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	50000400 	.word	0x50000400

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0549      	lsls	r1, r1, #21
 8000df4:	430a      	orrs	r2, r1
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_MspInit+0x44>)
 8000dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	055b      	lsls	r3, r3, #21
 8000e00:	4013      	ands	r3, r2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021000 	.word	0x40021000

08000e14 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4252      	negs	r2, r2
 8000e22:	611a      	str	r2, [r3, #16]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d101      	bne.n	8000e44 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <LL_TIM_IsEnabledIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <LL_TIM_IsEnabledIT_UPDATE+0x18>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b20      	cmp	r3, #32
 8000e82:	d101      	bne.n	8000e88 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b80      	cmp	r3, #128	; 0x80
 8000ea4:	d101      	bne.n	8000eaa <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d101      	bne.n	8000ecc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b80      	cmp	r3, #128	; 0x80
 8000ee8:	d101      	bne.n	8000eee <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f002 f9f4 	bl	8003308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM16) && LL_TIM_IsEnabledIT_UPDATE(TIM16)){
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <TIM16_IRQHandler+0x30>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff ff78 	bl	8000e2c <LL_TIM_IsActiveFlag_UPDATE>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d00b      	beq.n	8000f58 <TIM16_IRQHandler+0x28>
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <TIM16_IRQHandler+0x30>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ff83 	bl	8000e4e <LL_TIM_IsEnabledIT_UPDATE>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d005      	beq.n	8000f58 <TIM16_IRQHandler+0x28>
		prvvTIMERExpiredISR();
 8000f4c:	f001 fede 	bl	8002d0c <prvvTIMERExpiredISR>
		LL_TIM_ClearFlag_UPDATE(TIM16);
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <TIM16_IRQHandler+0x30>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff ff5e 	bl	8000e14 <LL_TIM_ClearFlag_UPDATE>

  //prvvTIMERExpiredISR();


  /* USER CODE END TIM16_IRQn 1 */
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40014400 	.word	0x40014400

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_TXE_TXFNF(USART2) && LL_USART_IsEnabledIT_TXE_TXFNF(USART2))
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <USART2_IRQHandler+0x44>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ff91 	bl	8000e92 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d007      	beq.n	8000f84 <USART2_IRQHandler+0x20>
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <USART2_IRQHandler+0x44>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ffad 	bl	8000ed6 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <USART2_IRQHandler+0x20>
	  {
	    /* RXNE flag will be cleared by reading of RDR register (done in call) */
	    /* Call function in charge of handling Character reception */
	    //UART_CharReception_Callback();
		prvvUARTTxReadyISR();
 8000f80:	f001 fe14 	bl	8002bac <prvvUARTTxReadyISR>
	  }

	if(LL_USART_IsEnabledIT_RXNE_RXFNE(USART2) && LL_USART_IsActiveFlag_RXNE_RXFNE(USART2))
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <USART2_IRQHandler+0x44>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff ff94 	bl	8000eb4 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d007      	beq.n	8000fa0 <USART2_IRQHandler+0x3c>
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <USART2_IRQHandler+0x44>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff ff6c 	bl	8000e70 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <USART2_IRQHandler+0x3c>
	  {
	    /* TXE flag will be automatically cleared when writing new data in TDR register */

	    /* Call function in charge of handling empty DR => will lead to transmission of next character */
	    //UART_TXEmpty_Callback();
		prvvUARTRxISR();
 8000f9c:	f001 fe10 	bl	8002bc0 <prvvUARTRxISR>
	  }

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	40004400 	.word	0x40004400

08000fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return 1;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_kill>:

int _kill(int pid, int sig)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fc2:	f004 fc5d 	bl	8005880 <__errno>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	2216      	movs	r2, #22
 8000fca:	601a      	str	r2, [r3, #0]
  return -1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	425b      	negs	r3, r3
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_exit>:

void _exit (int status)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	425a      	negs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ffe5 	bl	8000fb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fee:	e7fe      	b.n	8000fee <_exit+0x16>

08000ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	e000      	b.n	8001006 <_read+0x16>
 8001004:	bf00      	nop
 8001006:	0001      	movs	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b006      	add	sp, #24
 8001028:	bd80      	pop	{r7, pc}

0800102a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e009      	b.n	8001050 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	0018      	movs	r0, r3
 8001046:	e000      	b.n	800104a <_write+0x20>
 8001048:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf1      	blt.n	800103c <_write+0x12>
  }
  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b006      	add	sp, #24
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:

int _close(int file)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106a:	2301      	movs	r3, #1
 800106c:	425b      	negs	r3, r3
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	0192      	lsls	r2, r2, #6
 8001086:	605a      	str	r2, [r3, #4]
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f004 fbc8 	bl	8005880 <__errno>
 80010f0:	0003      	movs	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	425b      	negs	r3, r3
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	18d2      	adds	r2, r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b006      	add	sp, #24
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20003000 	.word	0x20003000
 800111c:	00000400 	.word	0x00000400
 8001120:	200001c4 	.word	0x200001c4
 8001124:	20000340 	.word	0x20000340

08001128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <SystemInit+0x14>)
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	0512      	lsls	r2, r2, #20
 8001132:	609a      	str	r2, [r3, #8]
#endif
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	0002      	movs	r2, r0
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b7f      	cmp	r3, #127	; 0x7f
 8001152:	d809      	bhi.n	8001168 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	001a      	movs	r2, r3
 800115a:	231f      	movs	r3, #31
 800115c:	401a      	ands	r2, r3
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_EnableIRQ+0x30>)
 8001160:	2101      	movs	r1, #1
 8001162:	4091      	lsls	r1, r2
 8001164:	000a      	movs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b7f      	cmp	r3, #127	; 0x7f
 8001188:	d828      	bhi.n	80011dc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <__NVIC_SetPriority+0xd4>)
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25b      	sxtb	r3, r3
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	33c0      	adds	r3, #192	; 0xc0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	589b      	ldr	r3, [r3, r2]
 800119a:	1dfa      	adds	r2, r7, #7
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	0011      	movs	r1, r2
 80011a0:	2203      	movs	r2, #3
 80011a2:	400a      	ands	r2, r1
 80011a4:	00d2      	lsls	r2, r2, #3
 80011a6:	21ff      	movs	r1, #255	; 0xff
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	401a      	ands	r2, r3
 80011b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	22ff      	movs	r2, #255	; 0xff
 80011b8:	401a      	ands	r2, r3
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	0018      	movs	r0, r3
 80011c0:	2303      	movs	r3, #3
 80011c2:	4003      	ands	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c8:	481f      	ldr	r0, [pc, #124]	; (8001248 <__NVIC_SetPriority+0xd4>)
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	430a      	orrs	r2, r1
 80011d4:	33c0      	adds	r3, #192	; 0xc0
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	501a      	str	r2, [r3, r0]
}
 80011da:	e031      	b.n	8001240 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <__NVIC_SetPriority+0xd8>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	0019      	movs	r1, r3
 80011e4:	230f      	movs	r3, #15
 80011e6:	400b      	ands	r3, r1
 80011e8:	3b08      	subs	r3, #8
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3306      	adds	r3, #6
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	18d3      	adds	r3, r2, r3
 80011f2:	3304      	adds	r3, #4
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1dfa      	adds	r2, r7, #7
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	0011      	movs	r1, r2
 80011fc:	2203      	movs	r2, #3
 80011fe:	400a      	ands	r2, r1
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	21ff      	movs	r1, #255	; 0xff
 8001204:	4091      	lsls	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	43d2      	mvns	r2, r2
 800120a:	401a      	ands	r2, r3
 800120c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	019b      	lsls	r3, r3, #6
 8001212:	22ff      	movs	r2, #255	; 0xff
 8001214:	401a      	ands	r2, r3
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0018      	movs	r0, r3
 800121c:	2303      	movs	r3, #3
 800121e:	4003      	ands	r3, r0
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <__NVIC_SetPriority+0xd8>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	001c      	movs	r4, r3
 800122c:	230f      	movs	r3, #15
 800122e:	4023      	ands	r3, r4
 8001230:	3b08      	subs	r3, #8
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	430a      	orrs	r2, r1
 8001236:	3306      	adds	r3, #6
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	18c3      	adds	r3, r0, r3
 800123c:	3304      	adds	r3, #4
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b003      	add	sp, #12
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <LL_TIM_DisableARRPreload>:
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	4393      	bics	r3, r2
 8001260:	001a      	movs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <LL_APB2_GRP1_EnableClock>:
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <LL_APB2_GRP1_EnableClock+0x28>)
 800127a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_APB2_GRP1_EnableClock+0x28>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	430a      	orrs	r2, r1
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <LL_APB2_GRP1_EnableClock+0x28>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000

0800129c <MX_TIM16_Init>:

/* USER CODE END 0 */

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	0018      	movs	r0, r3
 80012a6:	2314      	movs	r3, #20
 80012a8:	001a      	movs	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	f004 fb2b 	bl	8005906 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ffdb 	bl	8001270 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM16_IRQn, 0);
 80012ba:	2100      	movs	r1, #0
 80012bc:	2015      	movs	r0, #21
 80012be:	f7ff ff59 	bl	8001174 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM16_IRQn);
 80012c2:	2015      	movs	r0, #21
 80012c4:	f7ff ff3c 	bl	8001140 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 34;
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2222      	movs	r2, #34	; 0x22
 80012cc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 480;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	22f0      	movs	r2, #240	; 0xf0
 80012d8:	0052      	lsls	r2, r2, #1
 80012da:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <MX_TIM16_Init+0x68>)
 80012ec:	0019      	movs	r1, r3
 80012ee:	0010      	movs	r0, r2
 80012f0:	f004 f922 	bl	8005538 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <MX_TIM16_Init+0x68>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff ffaa 	bl	8001250 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40014400 	.word	0x40014400

08001308 <__NVIC_EnableIRQ>:
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b7f      	cmp	r3, #127	; 0x7f
 800131a:	d809      	bhi.n	8001330 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	001a      	movs	r2, r3
 8001322:	231f      	movs	r3, #31
 8001324:	401a      	ands	r2, r3
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_EnableIRQ+0x30>)
 8001328:	2101      	movs	r1, #1
 800132a:	4091      	lsls	r1, r2
 800132c:	000a      	movs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	0002      	movs	r2, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b7f      	cmp	r3, #127	; 0x7f
 8001350:	d828      	bhi.n	80013a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001352:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <__NVIC_SetPriority+0xd4>)
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b25b      	sxtb	r3, r3
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	33c0      	adds	r3, #192	; 0xc0
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	589b      	ldr	r3, [r3, r2]
 8001362:	1dfa      	adds	r2, r7, #7
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	0011      	movs	r1, r2
 8001368:	2203      	movs	r2, #3
 800136a:	400a      	ands	r2, r1
 800136c:	00d2      	lsls	r2, r2, #3
 800136e:	21ff      	movs	r1, #255	; 0xff
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	43d2      	mvns	r2, r2
 8001376:	401a      	ands	r2, r3
 8001378:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	401a      	ands	r2, r3
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	0018      	movs	r0, r3
 8001388:	2303      	movs	r3, #3
 800138a:	4003      	ands	r3, r0
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001390:	481f      	ldr	r0, [pc, #124]	; (8001410 <__NVIC_SetPriority+0xd4>)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	430a      	orrs	r2, r1
 800139c:	33c0      	adds	r3, #192	; 0xc0
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	501a      	str	r2, [r3, r0]
}
 80013a2:	e031      	b.n	8001408 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <__NVIC_SetPriority+0xd8>)
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	0019      	movs	r1, r3
 80013ac:	230f      	movs	r3, #15
 80013ae:	400b      	ands	r3, r1
 80013b0:	3b08      	subs	r3, #8
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3306      	adds	r3, #6
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1dfa      	adds	r2, r7, #7
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	0011      	movs	r1, r2
 80013c4:	2203      	movs	r2, #3
 80013c6:	400a      	ands	r2, r1
 80013c8:	00d2      	lsls	r2, r2, #3
 80013ca:	21ff      	movs	r1, #255	; 0xff
 80013cc:	4091      	lsls	r1, r2
 80013ce:	000a      	movs	r2, r1
 80013d0:	43d2      	mvns	r2, r2
 80013d2:	401a      	ands	r2, r3
 80013d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	019b      	lsls	r3, r3, #6
 80013da:	22ff      	movs	r2, #255	; 0xff
 80013dc:	401a      	ands	r2, r3
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0018      	movs	r0, r3
 80013e4:	2303      	movs	r3, #3
 80013e6:	4003      	ands	r3, r0
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <__NVIC_SetPriority+0xd8>)
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	001c      	movs	r4, r3
 80013f4:	230f      	movs	r3, #15
 80013f6:	4023      	ands	r3, r4
 80013f8:	3b08      	subs	r3, #8
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	430a      	orrs	r2, r1
 80013fe:	3306      	adds	r3, #6
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	18c3      	adds	r3, r0, r3
 8001404:	3304      	adds	r3, #4
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b003      	add	sp, #12
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <LL_USART_Enable>:
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <LL_USART_SetDEDeassertionTime>:
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <LL_USART_SetDEDeassertionTime+0x24>)
 8001444:	401a      	ands	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	041b      	lsls	r3, r3, #16
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}
 8001458:	ffe0ffff 	.word	0xffe0ffff

0800145c <LL_USART_SetDEAssertionTime>:
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <LL_USART_SetDEAssertionTime+0x24>)
 800146c:	401a      	ands	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	055b      	lsls	r3, r3, #21
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	fc1fffff 	.word	0xfc1fffff

08001484 <LL_USART_EnableDEMode>:
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	01d2      	lsls	r2, r2, #7
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <LL_USART_SetDESignalPolarity>:
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <LL_USART_SetDESignalPolarity+0x24>)
 80014b4:	401a      	ands	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	609a      	str	r2, [r3, #8]
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	ffff7fff 	.word	0xffff7fff

080014cc <LL_USART_ConfigAsyncMode>:
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <LL_USART_ConfigAsyncMode+0x2c>)
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	222a      	movs	r2, #42	; 0x2a
 80014e6:	4393      	bics	r3, r2
 80014e8:	001a      	movs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	ffffb7ff 	.word	0xffffb7ff

080014fc <LL_USART_IsActiveFlag_TEACK>:
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	039b      	lsls	r3, r3, #14
 800150c:	401a      	ands	r2, r3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	039b      	lsls	r3, r3, #14
 8001512:	429a      	cmp	r2, r3
 8001514:	d101      	bne.n	800151a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <LL_USART_IsActiveFlag_TEACK+0x20>
 800151a:	2300      	movs	r3, #0
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}

08001524 <LL_USART_IsActiveFlag_REACK>:
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	03db      	lsls	r3, r3, #15
 8001534:	401a      	ands	r2, r3
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	03db      	lsls	r3, r3, #15
 800153a:	429a      	cmp	r2, r3
 800153c:	d101      	bne.n	8001542 <LL_USART_IsActiveFlag_REACK+0x1e>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_USART_IsActiveFlag_REACK+0x20>
 8001542:	2300      	movs	r3, #0
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}

0800154c <LL_APB1_GRP1_EnableClock>:
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <LL_APB1_GRP1_EnableClock+0x28>)
 8001556:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <LL_APB1_GRP1_EnableClock+0x28>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	430a      	orrs	r2, r1
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <LL_APB1_GRP1_EnableClock+0x28>)
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4013      	ands	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000

08001578 <LL_IOP_GRP1_EnableClock>:
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001582:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	430a      	orrs	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_IOP_GRP1_EnableClock+0x28>)
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	001a      	movs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <LL_DMA_SetDataTransferDirection+0x48>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	001a      	movs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b006      	add	sp, #24
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	08006aac 	.word	0x08006aac
 80015ec:	ffffbfef 	.word	0xffffbfef

080015f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LL_DMA_SetMode+0x44>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	001a      	movs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	18d3      	adds	r3, r2, r3
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2220      	movs	r2, #32
 8001612:	4393      	bics	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <LL_DMA_SetMode+0x44>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	001a      	movs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	18d3      	adds	r3, r2, r3
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
             Mode);
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b006      	add	sp, #24
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	08006aac 	.word	0x08006aac

08001638 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3b01      	subs	r3, #1
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LL_DMA_SetPeriphIncMode+0x44>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	001a      	movs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	18d3      	adds	r3, r2, r3
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2240      	movs	r2, #64	; 0x40
 800165a:	4393      	bics	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <LL_DMA_SetPeriphIncMode+0x44>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	001a      	movs	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b006      	add	sp, #24
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	08006aac 	.word	0x08006aac

08001680 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	001a      	movs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	4393      	bics	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x44>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	001a      	movs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b006      	add	sp, #24
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	08006aac 	.word	0x08006aac

080016c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3b01      	subs	r3, #1
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LL_DMA_SetPeriphSize+0x44>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	001a      	movs	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <LL_DMA_SetPeriphSize+0x48>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <LL_DMA_SetPeriphSize+0x44>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	001a      	movs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	18d3      	adds	r3, r2, r3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b006      	add	sp, #24
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	08006aac 	.word	0x08006aac
 8001710:	fffffcff 	.word	0xfffffcff

08001714 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3b01      	subs	r3, #1
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LL_DMA_SetMemorySize+0x44>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	001a      	movs	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	18d3      	adds	r3, r2, r3
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <LL_DMA_SetMemorySize+0x48>)
 8001736:	4013      	ands	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <LL_DMA_SetMemorySize+0x44>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	001a      	movs	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b006      	add	sp, #24
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	08006aac 	.word	0x08006aac
 800175c:	fffff3ff 	.word	0xfffff3ff

08001760 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3b01      	subs	r3, #1
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	001a      	movs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001782:	4013      	ands	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	001a      	movs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	18d3      	adds	r3, r2, r3
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
             Priority);
}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b006      	add	sp, #24
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	08006aac 	.word	0x08006aac
 80017a8:	ffffcfff 	.word	0xffffcfff

080017ac <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_RX
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LL_DMA_SetPeriphRequest+0x38>)
 80017bc:	4694      	mov	ip, r2
 80017be:	4463      	add	r3, ip
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <LL_DMA_SetPeriphRequest+0x38>)
 80017ce:	4694      	mov	ip, r2
 80017d0:	4463      	add	r3, ip
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	100081ff 	.word	0x100081ff

080017e8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b08f      	sub	sp, #60	; 0x3c
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80017ee:	2418      	movs	r4, #24
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	0018      	movs	r0, r3
 80017f4:	2320      	movs	r3, #32
 80017f6:	001a      	movs	r2, r3
 80017f8:	2100      	movs	r1, #0
 80017fa:	f004 f884 	bl	8005906 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	003b      	movs	r3, r7
 8001800:	0018      	movs	r0, r3
 8001802:	2318      	movs	r3, #24
 8001804:	001a      	movs	r2, r3
 8001806:	2100      	movs	r1, #0
 8001808:	f004 f87d 	bl	8005906 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff fe9b 	bl	800154c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff feae 	bl	8001578 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA1   ------> USART2_DE
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800181c:	003b      	movs	r3, r7
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001822:	003b      	movs	r3, r7
 8001824:	2202      	movs	r2, #2
 8001826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001828:	003b      	movs	r3, r7
 800182a:	2202      	movs	r2, #2
 800182c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800182e:	003b      	movs	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001834:	003b      	movs	r3, r7
 8001836:	2202      	movs	r2, #2
 8001838:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800183a:	003b      	movs	r3, r7
 800183c:	2201      	movs	r2, #1
 800183e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	003a      	movs	r2, r7
 8001842:	23a0      	movs	r3, #160	; 0xa0
 8001844:	05db      	lsls	r3, r3, #23
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f003 fc55 	bl	80050f8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800184e:	003b      	movs	r3, r7
 8001850:	2204      	movs	r2, #4
 8001852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001854:	003b      	movs	r3, r7
 8001856:	2202      	movs	r2, #2
 8001858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800185a:	003b      	movs	r3, r7
 800185c:	2202      	movs	r2, #2
 800185e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001860:	003b      	movs	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001866:	003b      	movs	r3, r7
 8001868:	2201      	movs	r2, #1
 800186a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800186c:	003b      	movs	r3, r7
 800186e:	2201      	movs	r2, #1
 8001870:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	003a      	movs	r2, r7
 8001874:	23a0      	movs	r3, #160	; 0xa0
 8001876:	05db      	lsls	r3, r3, #23
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f003 fc3c 	bl	80050f8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001880:	003b      	movs	r3, r7
 8001882:	2208      	movs	r2, #8
 8001884:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001886:	003b      	movs	r3, r7
 8001888:	2202      	movs	r2, #2
 800188a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800188c:	003b      	movs	r3, r7
 800188e:	2202      	movs	r2, #2
 8001890:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001892:	003b      	movs	r3, r7
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001898:	003b      	movs	r3, r7
 800189a:	2201      	movs	r2, #1
 800189c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800189e:	003b      	movs	r3, r7
 80018a0:	2201      	movs	r2, #1
 80018a2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	003a      	movs	r2, r7
 80018a6:	23a0      	movs	r3, #160	; 0xa0
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f003 fc23 	bl	80050f8 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_TX);
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018b4:	2235      	movs	r2, #53	; 0x35
 80018b6:	2101      	movs	r1, #1
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff ff77 	bl	80017ac <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018c0:	2210      	movs	r2, #16
 80018c2:	2101      	movs	r1, #1
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fe6d 	bl	80015a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	483c      	ldr	r0, [pc, #240]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018d0:	001a      	movs	r2, r3
 80018d2:	2101      	movs	r1, #1
 80018d4:	f7ff ff44 	bl	8001760 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff fe86 	bl	80015f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	2101      	movs	r1, #1
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff fea4 	bl	8001638 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	2101      	movs	r1, #1
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff fec2 	bl	8001680 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	2101      	movs	r1, #1
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fee0 	bl	80016c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <MX_USART2_UART_Init+0x1d8>)
 800190a:	2200      	movs	r2, #0
 800190c:	2101      	movs	r1, #1
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff ff00 	bl	8001714 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001914:	2100      	movs	r1, #0
 8001916:	201c      	movs	r0, #28
 8001918:	f7ff fd10 	bl	800133c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800191c:	201c      	movs	r0, #28
 800191e:	f7ff fcf3 	bl	8001308 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001922:	0021      	movs	r1, r4
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	22e1      	movs	r2, #225	; 0xe1
 800192e:	0252      	lsls	r2, r2, #9
 8001930:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	0192      	lsls	r2, r2, #6
 800193e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	220c      	movs	r2, #12
 800194a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001958:	187b      	adds	r3, r7, r1
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 800195c:	0019      	movs	r1, r3
 800195e:	0010      	movs	r0, r2
 8001960:	f003 fefe 	bl	8005760 <LL_USART_Init>
  LL_USART_EnableDEMode(USART2);
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff fd8c 	bl	8001484 <LL_USART_EnableDEMode>
  LL_USART_SetDESignalPolarity(USART2, LL_USART_DE_POLARITY_HIGH);
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 800196e:	2100      	movs	r1, #0
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff fd97 	bl	80014a4 <LL_USART_SetDESignalPolarity>
  LL_USART_SetDEAssertionTime(USART2, 0);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 8001978:	2100      	movs	r1, #0
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff fd6e 	bl	800145c <LL_USART_SetDEAssertionTime>
  LL_USART_SetDEDeassertionTime(USART2, 0);
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 8001982:	2100      	movs	r1, #0
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff fd55 	bl	8001434 <LL_USART_SetDEDeassertionTime>
  LL_USART_ConfigAsyncMode(USART2);
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fd9d 	bl	80014cc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff fd3f 	bl	8001418 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 800199e:	0018      	movs	r0, r3
 80019a0:	f7ff fdac 	bl	80014fc <LL_USART_IsActiveFlag_TEACK>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d0f9      	beq.n	800199c <MX_USART2_UART_Init+0x1b4>
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART2_UART_Init+0x1dc>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff fdba 	bl	8001524 <LL_USART_IsActiveFlag_REACK>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d0f3      	beq.n	800199c <MX_USART2_UART_Init+0x1b4>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b00f      	add	sp, #60	; 0x3c
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40004400 	.word	0x40004400

080019c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019ce:	e003      	b.n	80019d8 <LoopCopyDataInit>

080019d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80019d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019d6:	3104      	adds	r1, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <LoopForever+0xa>)
  ldr r3, =_edata
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <LoopForever+0xe>)
  adds r2, r0, r1
 80019dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019e0:	d3f6      	bcc.n	80019d0 <CopyDataInit>
  ldr r2, =_sbss
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <LoopForever+0x12>)
  b LoopFillZerobss
 80019e4:	e002      	b.n	80019ec <LoopFillZerobss>

080019e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  str  r3, [r2]
 80019e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ea:	3204      	adds	r2, #4

080019ec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <LoopForever+0x16>)
  cmp r2, r3
 80019ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019f0:	d3f9      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f2:	f7ff fb99 	bl	8001128 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019f6:	f003 ff59 	bl	80058ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fa:	f7fe ffff 	bl	80009fc <main>

080019fe <LoopForever>:

LoopForever:
    b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   r0, =_estack
 8001a00:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001a04:	08006e0c 	.word	0x08006e0c
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a0c:	200000f8 	.word	0x200000f8
  ldr r2, =_sbss
 8001a10:	200000f8 	.word	0x200000f8
  ldr r3, = _ebss
 8001a14:	20000340 	.word	0x20000340

08001a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_IRQHandler>

08001a1a <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001a1a:	b5b0      	push	{r4, r5, r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001a24:	2316      	movs	r3, #22
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d000      	beq.n	8001a36 <eMBFuncReadCoils+0x1c>
 8001a34:	e091      	b.n	8001b5a <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	2014      	movs	r0, #20
 8001a40:	183b      	adds	r3, r7, r0
 8001a42:	0212      	lsls	r2, r2, #8
 8001a44:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	183b      	adds	r3, r7, r0
 8001a50:	183a      	adds	r2, r7, r0
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001a58:	183b      	adds	r3, r7, r0
 8001a5a:	881a      	ldrh	r2, [r3, #0]
 8001a5c:	183b      	adds	r3, r7, r0
 8001a5e:	3201      	adds	r2, #1
 8001a60:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3303      	adds	r3, #3
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	2012      	movs	r0, #18
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	0212      	lsls	r2, r2, #8
 8001a70:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	183a      	adds	r2, r7, r0
 8001a7e:	8812      	ldrh	r2, [r2, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d061      	beq.n	8001b50 <eMBFuncReadCoils+0x136>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	23fa      	movs	r3, #250	; 0xfa
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d25a      	bcs.n	8001b50 <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60fa      	str	r2, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	2207      	movs	r2, #7
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	2317      	movs	r3, #23
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e007      	b.n	8001ae8 <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8001ad8:	2312      	movs	r3, #18
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	08db      	lsrs	r3, r3, #3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	2317      	movs	r3, #23
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60fa      	str	r2, [r7, #12]
 8001aee:	2217      	movs	r2, #23
 8001af0:	18ba      	adds	r2, r7, r2
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8001b02:	250b      	movs	r5, #11
 8001b04:	197c      	adds	r4, r7, r5
 8001b06:	2312      	movs	r3, #18
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	2314      	movs	r3, #20
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	8819      	ldrh	r1, [r3, #0]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	2300      	movs	r3, #0
 8001b16:	f000 fedc 	bl	80028d2 <eMBRegCoilsCB>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001b1e:	197b      	adds	r3, r7, r5
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001b26:	2316      	movs	r3, #22
 8001b28:	18fc      	adds	r4, r7, r3
 8001b2a:	197b      	adds	r3, r7, r5
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 fcb6 	bl	80024a0 <prveMBError2Exception>
 8001b34:	0003      	movs	r3, r0
 8001b36:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001b38:	e013      	b.n	8001b62 <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	881a      	ldrh	r2, [r3, #0]
 8001b3e:	2317      	movs	r3, #23
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	18d3      	adds	r3, r2, r3
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001b4e:	e008      	b.n	8001b62 <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001b50:	2316      	movs	r3, #22
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2203      	movs	r2, #3
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e003      	b.n	8001b62 <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001b5a:	2316      	movs	r3, #22
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2203      	movs	r2, #3
 8001b60:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001b62:	2316      	movs	r3, #22
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b006      	add	sp, #24
 8001b6e:	bdb0      	pop	{r4, r5, r7, pc}

08001b70 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d155      	bne.n	8001c36 <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	200c      	movs	r0, #12
 8001b94:	183b      	adds	r3, r7, r0
 8001b96:	0212      	lsls	r2, r2, #8
 8001b98:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b299      	uxth	r1, r3
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	183a      	adds	r2, r7, r0
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	183b      	adds	r3, r7, r0
 8001bb2:	3201      	adds	r2, #1
 8001bb4:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d135      	bne.n	8001c2c <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8001bc6:	2bff      	cmp	r3, #255	; 0xff
 8001bc8:	d004      	beq.n	8001bd4 <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3303      	adds	r3, #3
 8001bce:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d12b      	bne.n	8001c2c <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3303      	adds	r3, #3
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d103      	bne.n	8001bee <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e003      	b.n	8001bf6 <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8001bee:	2308      	movs	r3, #8
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8001bf6:	250b      	movs	r5, #11
 8001bf8:	197c      	adds	r4, r7, r5
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	2308      	movs	r3, #8
 8001c02:	18f8      	adds	r0, r7, r3
 8001c04:	2301      	movs	r3, #1
 8001c06:	2201      	movs	r2, #1
 8001c08:	f000 fe63 	bl	80028d2 <eMBRegCoilsCB>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001c10:	197b      	adds	r3, r7, r5
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d012      	beq.n	8001c3e <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001c18:	230f      	movs	r3, #15
 8001c1a:	18fc      	adds	r4, r7, r3
 8001c1c:	197b      	adds	r3, r7, r5
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 fc3d 	bl	80024a0 <prveMBError2Exception>
 8001c26:	0003      	movs	r3, r0
 8001c28:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001c2a:	e008      	b.n	8001c3e <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2203      	movs	r2, #3
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e003      	b.n	8001c3e <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001c36:	230f      	movs	r3, #15
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001c3e:	230f      	movs	r3, #15
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	781b      	ldrb	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bdb0      	pop	{r4, r5, r7, pc}

08001c4c <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8001c56:	230e      	movs	r3, #14
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d800      	bhi.n	8001c68 <eMBFuncWriteMultipleCoils+0x1c>
 8001c66:	e07a      	b.n	8001d5e <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	200c      	movs	r0, #12
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	0212      	lsls	r2, r2, #8
 8001c76:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b299      	uxth	r1, r3
 8001c80:	183b      	adds	r3, r7, r0
 8001c82:	183a      	adds	r2, r7, r0
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	3201      	adds	r2, #1
 8001c92:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3303      	adds	r3, #3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	0212      	lsls	r2, r2, #8
 8001ca2:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b299      	uxth	r1, r3
 8001cac:	183b      	adds	r3, r7, r0
 8001cae:	183a      	adds	r2, r7, r0
 8001cb0:	8812      	ldrh	r2, [r2, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001cb6:	2309      	movs	r3, #9
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	7952      	ldrb	r2, [r2, #5]
 8001cbe:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d009      	beq.n	8001cde <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	08db      	lsrs	r3, r3, #3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	3201      	adds	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e007      	b.n	8001cee <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8001cde:	230a      	movs	r3, #10
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	08db      	lsrs	r3, r3, #3
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	230f      	movs	r3, #15
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8001cee:	210a      	movs	r1, #10
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02d      	beq.n	8001d54 <eMBFuncWriteMultipleCoils+0x108>
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	23f6      	movs	r3, #246	; 0xf6
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d827      	bhi.n	8001d54 <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8001d04:	230f      	movs	r3, #15
 8001d06:	18fa      	adds	r2, r7, r3
 8001d08:	2309      	movs	r3, #9
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d11f      	bne.n	8001d54 <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	1d98      	adds	r0, r3, #6
 8001d18:	2508      	movs	r5, #8
 8001d1a:	197c      	adds	r4, r7, r5
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	230c      	movs	r3, #12
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	8819      	ldrh	r1, [r3, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	f000 fdd3 	bl	80028d2 <eMBRegCoilsCB>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001d30:	197b      	adds	r3, r7, r5
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001d38:	230e      	movs	r3, #14
 8001d3a:	18fc      	adds	r4, r7, r3
 8001d3c:	197b      	adds	r3, r7, r5
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 fbad 	bl	80024a0 <prveMBError2Exception>
 8001d46:	0003      	movs	r3, r0
 8001d48:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001d4a:	e00c      	b.n	8001d66 <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2205      	movs	r2, #5
 8001d50:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001d52:	e008      	b.n	8001d66 <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d54:	230e      	movs	r3, #14
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2203      	movs	r2, #3
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e003      	b.n	8001d66 <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d5e:	230e      	movs	r3, #14
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	2203      	movs	r2, #3
 8001d64:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001d66:	230e      	movs	r3, #14
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bdb0      	pop	{r4, r5, r7, pc}

08001d74 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001d7e:	2316      	movs	r3, #22
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d000      	beq.n	8001d90 <eMBFuncReadDiscreteInputs+0x1c>
 8001d8e:	e091      	b.n	8001eb4 <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3301      	adds	r3, #1
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2014      	movs	r0, #20
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	0212      	lsls	r2, r2, #8
 8001d9e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3302      	adds	r3, #2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b299      	uxth	r1, r3
 8001da8:	183b      	adds	r3, r7, r0
 8001daa:	183a      	adds	r2, r7, r0
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	881a      	ldrh	r2, [r3, #0]
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	3201      	adds	r2, #1
 8001dba:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2012      	movs	r0, #18
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	0212      	lsls	r2, r2, #8
 8001dca:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	183b      	adds	r3, r7, r0
 8001dd6:	183a      	adds	r2, r7, r0
 8001dd8:	8812      	ldrh	r2, [r2, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d061      	beq.n	8001eaa <eMBFuncReadDiscreteInputs+0x136>
 8001de6:	0001      	movs	r1, r0
 8001de8:	183b      	adds	r3, r7, r0
 8001dea:	881a      	ldrh	r2, [r3, #0]
 8001dec:	23fa      	movs	r3, #250	; 0xfa
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d25a      	bcs.n	8001eaa <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	2317      	movs	r3, #23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	3201      	adds	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e007      	b.n	8001e42 <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8001e32:	2312      	movs	r3, #18
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	60fa      	str	r2, [r7, #12]
 8001e48:	2217      	movs	r2, #23
 8001e4a:	18ba      	adds	r2, r7, r2
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8001e5c:	250b      	movs	r5, #11
 8001e5e:	197c      	adds	r4, r7, r5
 8001e60:	2312      	movs	r3, #18
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	2314      	movs	r3, #20
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	8819      	ldrh	r1, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fd46 	bl	8002900 <eMBRegDiscreteCB>
 8001e74:	0003      	movs	r3, r0
 8001e76:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001e80:	2316      	movs	r3, #22
 8001e82:	18fc      	adds	r4, r7, r3
 8001e84:	197b      	adds	r3, r7, r5
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fb09 	bl	80024a0 <prveMBError2Exception>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001e92:	e013      	b.n	8001ebc <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	2317      	movs	r3, #23
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	18d3      	adds	r3, r2, r3
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001ea8:	e008      	b.n	8001ebc <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001eaa:	2316      	movs	r3, #22
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2203      	movs	r2, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e003      	b.n	8001ebc <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001eb4:	2316      	movs	r3, #22
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2203      	movs	r2, #3
 8001eba:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001ebc:	2316      	movs	r3, #22
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b006      	add	sp, #24
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}

08001eca <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8001ed4:	260f      	movs	r6, #15
 8001ed6:	19bb      	adds	r3, r7, r6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d12f      	bne.n	8001f44 <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	200c      	movs	r0, #12
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	0212      	lsls	r2, r2, #8
 8001ef2:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b299      	uxth	r1, r3
 8001efc:	183b      	adds	r3, r7, r0
 8001efe:	183a      	adds	r2, r7, r0
 8001f00:	8812      	ldrh	r2, [r2, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001f06:	183b      	adds	r3, r7, r0
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	0001      	movs	r1, r0
 8001f0c:	183b      	adds	r3, r7, r0
 8001f0e:	3201      	adds	r2, #1
 8001f10:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1cd8      	adds	r0, r3, #3
 8001f16:	250b      	movs	r5, #11
 8001f18:	197c      	adds	r4, r7, r5
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	8819      	ldrh	r1, [r3, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	2201      	movs	r2, #1
 8001f22:	f000 fcbf 	bl	80028a4 <eMBRegHoldingCB>
 8001f26:	0003      	movs	r3, r0
 8001f28:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00c      	beq.n	8001f4c <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8001f32:	19bc      	adds	r4, r7, r6
 8001f34:	197b      	adds	r3, r7, r5
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 fab1 	bl	80024a0 <prveMBError2Exception>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	7023      	strb	r3, [r4, #0]
 8001f42:	e003      	b.n	8001f4c <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001f44:	230f      	movs	r3, #15
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2203      	movs	r2, #3
 8001f4a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b005      	add	sp, #20
 8001f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f5a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8001f64:	230f      	movs	r3, #15
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d962      	bls.n	800203a <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3301      	adds	r3, #1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	200c      	movs	r0, #12
 8001f7e:	183b      	adds	r3, r7, r0
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3302      	adds	r3, #2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b299      	uxth	r1, r3
 8001f8c:	183b      	adds	r3, r7, r0
 8001f8e:	183a      	adds	r2, r7, r0
 8001f90:	8812      	ldrh	r2, [r2, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001f96:	183b      	adds	r3, r7, r0
 8001f98:	881a      	ldrh	r2, [r3, #0]
 8001f9a:	0005      	movs	r5, r0
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	3201      	adds	r2, #1
 8001fa0:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	200a      	movs	r0, #10
 8001fac:	183b      	adds	r3, r7, r0
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	183a      	adds	r2, r7, r0
 8001fbe:	8812      	ldrh	r2, [r2, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001fc4:	2409      	movs	r4, #9
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	7952      	ldrb	r2, [r2, #5]
 8001fcc:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 8001fce:	0001      	movs	r1, r0
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d02b      	beq.n	8002030 <eMBFuncWriteMultipleHoldingRegister+0xd6>
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b78      	cmp	r3, #120	; 0x78
 8001fde:	d827      	bhi.n	8002030 <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	18db      	adds	r3, r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8001fea:	193a      	adds	r2, r7, r4
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11e      	bne.n	8002030 <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1d98      	adds	r0, r3, #6
 8001ff6:	2608      	movs	r6, #8
 8001ff8:	19bc      	adds	r4, r7, r6
 8001ffa:	187b      	adds	r3, r7, r1
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	197b      	adds	r3, r7, r5
 8002000:	8819      	ldrh	r1, [r3, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	f000 fc4e 	bl	80028a4 <eMBRegHoldingCB>
 8002008:	0003      	movs	r3, r0
 800200a:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800200c:	19bb      	adds	r3, r7, r6
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002014:	230f      	movs	r3, #15
 8002016:	18fc      	adds	r4, r7, r3
 8002018:	19bb      	adds	r3, r7, r6
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 fa3f 	bl	80024a0 <prveMBError2Exception>
 8002022:	0003      	movs	r3, r0
 8002024:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8002026:	e00c      	b.n	8002042 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2205      	movs	r2, #5
 800202c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800202e:	e008      	b.n	8002042 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002030:	230f      	movs	r3, #15
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2203      	movs	r2, #3
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e003      	b.n	8002042 <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800203a:	230f      	movs	r3, #15
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2203      	movs	r2, #3
 8002040:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8002042:	230f      	movs	r3, #15
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b005      	add	sp, #20
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002050 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800205a:	2317      	movs	r3, #23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d000      	beq.n	800206c <eMBFuncReadHoldingRegister+0x1c>
 800206a:	e075      	b.n	8002158 <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2014      	movs	r0, #20
 8002076:	183b      	adds	r3, r7, r0
 8002078:	0212      	lsls	r2, r2, #8
 800207a:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3302      	adds	r3, #2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b299      	uxth	r1, r3
 8002084:	183b      	adds	r3, r7, r0
 8002086:	183a      	adds	r2, r7, r0
 8002088:	8812      	ldrh	r2, [r2, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800208e:	183b      	adds	r3, r7, r0
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	183b      	adds	r3, r7, r0
 8002094:	3201      	adds	r2, #1
 8002096:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3303      	adds	r3, #3
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	2512      	movs	r5, #18
 80020a2:	197b      	adds	r3, r7, r5
 80020a4:	0212      	lsls	r2, r2, #8
 80020a6:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	197b      	adds	r3, r7, r5
 80020b0:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80020b2:	197b      	adds	r3, r7, r5
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d049      	beq.n	800214e <eMBFuncReadHoldingRegister+0xfe>
 80020ba:	197b      	adds	r3, r7, r5
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2b7d      	cmp	r3, #125	; 0x7d
 80020c0:	d845      	bhi.n	800214e <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60fa      	str	r2, [r7, #12]
 80020d2:	2203      	movs	r2, #3
 80020d4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80020e2:	197b      	adds	r3, r7, r5
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60fa      	str	r2, [r7, #12]
 80020ee:	1c0a      	adds	r2, r1, #0
 80020f0:	1892      	adds	r2, r2, r2
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002102:	260b      	movs	r6, #11
 8002104:	19bc      	adds	r4, r7, r6
 8002106:	197b      	adds	r3, r7, r5
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	183b      	adds	r3, r7, r0
 800210c:	8819      	ldrh	r1, [r3, #0]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	2300      	movs	r3, #0
 8002112:	f000 fbc7 	bl	80028a4 <eMBRegHoldingCB>
 8002116:	0003      	movs	r3, r0
 8002118:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800211a:	19bb      	adds	r3, r7, r6
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002122:	2317      	movs	r3, #23
 8002124:	18fc      	adds	r4, r7, r3
 8002126:	19bb      	adds	r3, r7, r6
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f9b8 	bl	80024a0 <prveMBError2Exception>
 8002130:	0003      	movs	r3, r0
 8002132:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8002134:	e014      	b.n	8002160 <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	881a      	ldrh	r2, [r3, #0]
 800213a:	2312      	movs	r3, #18
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	18db      	adds	r3, r3, r3
 8002142:	b29b      	uxth	r3, r3
 8002144:	18d3      	adds	r3, r2, r3
 8002146:	b29a      	uxth	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800214c:	e008      	b.n	8002160 <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800214e:	2317      	movs	r3, #23
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2203      	movs	r2, #3
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e003      	b.n	8002160 <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002158:	2317      	movs	r3, #23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2203      	movs	r2, #3
 800215e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8002160:	2317      	movs	r3, #23
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b007      	add	sp, #28
 800216c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800216e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800216e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002170:	b087      	sub	sp, #28
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002178:	2317      	movs	r3, #23
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	2b09      	cmp	r3, #9
 8002186:	d800      	bhi.n	800218a <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 8002188:	e0d0      	b.n	800232c <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3301      	adds	r3, #1
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	2014      	movs	r0, #20
 8002194:	183b      	adds	r3, r7, r0
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3302      	adds	r3, #2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b299      	uxth	r1, r3
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	183a      	adds	r2, r7, r0
 80021a6:	8812      	ldrh	r2, [r2, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 80021ac:	183b      	adds	r3, r7, r0
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	0006      	movs	r6, r0
 80021b2:	183b      	adds	r3, r7, r0
 80021b4:	3201      	adds	r2, #1
 80021b6:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3303      	adds	r3, #3
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	2012      	movs	r0, #18
 80021c2:	183b      	adds	r3, r7, r0
 80021c4:	0212      	lsls	r2, r2, #8
 80021c6:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b299      	uxth	r1, r3
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	183a      	adds	r2, r7, r0
 80021d4:	8812      	ldrh	r2, [r2, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3305      	adds	r3, #5
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	2410      	movs	r4, #16
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	0212      	lsls	r2, r2, #8
 80021e8:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3306      	adds	r3, #6
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b299      	uxth	r1, r3
 80021f2:	193b      	adds	r3, r7, r4
 80021f4:	193a      	adds	r2, r7, r4
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	193b      	adds	r3, r7, r4
 8002202:	3201      	adds	r2, #1
 8002204:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3307      	adds	r3, #7
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b29a      	uxth	r2, r3
 800220e:	240e      	movs	r4, #14
 8002210:	193b      	adds	r3, r7, r4
 8002212:	0212      	lsls	r2, r2, #8
 8002214:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3308      	adds	r3, #8
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b299      	uxth	r1, r3
 800221e:	193b      	adds	r3, r7, r4
 8002220:	193a      	adds	r2, r7, r4
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8002228:	220d      	movs	r2, #13
 800222a:	18bb      	adds	r3, r7, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	7a52      	ldrb	r2, [r2, #9]
 8002230:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002232:	183b      	adds	r3, r7, r0
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 800223a:	e073      	b.n	8002324 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 800223c:	0005      	movs	r5, r0
 800223e:	183b      	adds	r3, r7, r0
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	2b7d      	cmp	r3, #125	; 0x7d
 8002244:	d900      	bls.n	8002248 <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 8002246:	e06d      	b.n	8002324 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8002248:	0021      	movs	r1, r4
 800224a:	187b      	adds	r3, r7, r1
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d068      	beq.n	8002324 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002252:	187b      	adds	r3, r7, r1
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b79      	cmp	r3, #121	; 0x79
 8002258:	d864      	bhi.n	8002324 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800225a:	187b      	adds	r3, r7, r1
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	005a      	lsls	r2, r3, #1
 8002260:	200d      	movs	r0, #13
 8002262:	183b      	adds	r3, r7, r0
 8002264:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002266:	429a      	cmp	r2, r3
 8002268:	d15c      	bne.n	8002324 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	300a      	adds	r0, #10
 8002270:	2216      	movs	r2, #22
 8002272:	18bc      	adds	r4, r7, r2
 8002274:	187b      	adds	r3, r7, r1
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	2310      	movs	r3, #16
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	8819      	ldrh	r1, [r3, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	f000 fb10 	bl	80028a4 <eMBRegHoldingCB>
 8002284:	0003      	movs	r3, r0
 8002286:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002288:	2016      	movs	r0, #22
 800228a:	183b      	adds	r3, r7, r0
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d139      	bne.n	8002306 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	2217      	movs	r2, #23
 80022a4:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80022b2:	197b      	adds	r3, r7, r5
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b2d9      	uxtb	r1, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	1c0a      	adds	r2, r1, #0
 80022c0:	1892      	adds	r2, r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80022d2:	183c      	adds	r4, r7, r0
 80022d4:	197b      	adds	r3, r7, r5
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	19bb      	adds	r3, r7, r6
 80022da:	8819      	ldrh	r1, [r3, #0]
 80022dc:	68b8      	ldr	r0, [r7, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	f000 fae0 	bl	80028a4 <eMBRegHoldingCB>
 80022e4:	0003      	movs	r3, r0
 80022e6:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 80022e8:	2016      	movs	r0, #22
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	18db      	adds	r3, r3, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	18d3      	adds	r3, r2, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8002306:	2216      	movs	r2, #22
 8002308:	18bb      	adds	r3, r7, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002310:	2317      	movs	r3, #23
 8002312:	18fc      	adds	r4, r7, r3
 8002314:	18bb      	adds	r3, r7, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f8c1 	bl	80024a0 <prveMBError2Exception>
 800231e:	0003      	movs	r3, r0
 8002320:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8002322:	e003      	b.n	800232c <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002324:	2317      	movs	r3, #23
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 800232c:	2317      	movs	r3, #23
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b007      	add	sp, #28
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800233a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800233a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233c:	b087      	sub	sp, #28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002344:	2317      	movs	r3, #23
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d000      	beq.n	8002356 <eMBFuncReadInputRegister+0x1c>
 8002354:	e07a      	b.n	800244c <eMBFuncReadInputRegister+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3301      	adds	r3, #1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	2014      	movs	r0, #20
 8002360:	183b      	adds	r3, r7, r0
 8002362:	0212      	lsls	r2, r2, #8
 8002364:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b299      	uxth	r1, r3
 800236e:	183b      	adds	r3, r7, r0
 8002370:	183a      	adds	r2, r7, r0
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8002378:	183b      	adds	r3, r7, r0
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	0005      	movs	r5, r0
 800237e:	183b      	adds	r3, r7, r0
 8002380:	3201      	adds	r2, #1
 8002382:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3303      	adds	r3, #3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29a      	uxth	r2, r3
 800238c:	2012      	movs	r0, #18
 800238e:	183b      	adds	r3, r7, r0
 8002390:	0212      	lsls	r2, r2, #8
 8002392:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b299      	uxth	r1, r3
 800239c:	183b      	adds	r3, r7, r0
 800239e:	183a      	adds	r2, r7, r0
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80023a6:	183b      	adds	r3, r7, r0
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d049      	beq.n	8002442 <eMBFuncReadInputRegister+0x108>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80023ae:	183b      	adds	r3, r7, r0
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	2b7c      	cmp	r3, #124	; 0x7c
 80023b4:	d845      	bhi.n	8002442 <eMBFuncReadInputRegister+0x108>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60fa      	str	r2, [r7, #12]
 80023c6:	2204      	movs	r2, #4
 80023c8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b2d9      	uxtb	r1, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	60fa      	str	r2, [r7, #12]
 80023e2:	1c0a      	adds	r2, r1, #0
 80023e4:	1892      	adds	r2, r2, r2
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80023f6:	260b      	movs	r6, #11
 80023f8:	19bc      	adds	r4, r7, r6
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	197b      	adds	r3, r7, r5
 8002400:	8819      	ldrh	r1, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f9f7 	bl	80027f8 <eMBRegInputCB>
 800240a:	0003      	movs	r3, r0
 800240c:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800240e:	19bb      	adds	r3, r7, r6
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <eMBFuncReadInputRegister+0xf0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002416:	2317      	movs	r3, #23
 8002418:	18fc      	adds	r4, r7, r3
 800241a:	19bb      	adds	r3, r7, r6
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f83e 	bl	80024a0 <prveMBError2Exception>
 8002424:	0003      	movs	r3, r0
 8002426:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8002428:	e014      	b.n	8002454 <eMBFuncReadInputRegister+0x11a>
            }
            else
            {
                *usLen += usRegCount * 2;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	2312      	movs	r3, #18
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	18db      	adds	r3, r3, r3
 8002436:	b29b      	uxth	r3, r3
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	b29a      	uxth	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002440:	e008      	b.n	8002454 <eMBFuncReadInputRegister+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002442:	2317      	movs	r3, #23
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2203      	movs	r2, #3
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e003      	b.n	8002454 <eMBFuncReadInputRegister+0x11a>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800244c:	2317      	movs	r3, #23
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2203      	movs	r2, #3
 8002452:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b007      	add	sp, #28
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002464 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	1c58      	adds	r0, r3, #1
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <eMBFuncReportSlaveID+0x34>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	001a      	movs	r2, r3
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <eMBFuncReportSlaveID+0x38>)
 800247a:	0019      	movs	r1, r3
 800247c:	f003 fa3a 	bl	80058f4 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <eMBFuncReportSlaveID+0x34>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800248c:	2300      	movs	r3, #0
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	200001e8 	.word	0x200001e8
 800249c:	200001c8 	.word	0x200001c8

080024a0 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	0002      	movs	r2, r0
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 80024ac:	1dfb      	adds	r3, r7, #7
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	d00f      	beq.n	80024d4 <prveMBError2Exception+0x34>
 80024b4:	dc13      	bgt.n	80024de <prveMBError2Exception+0x3e>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <prveMBError2Exception+0x20>
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <prveMBError2Exception+0x2a>
 80024be:	e00e      	b.n	80024de <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
            break;
 80024c8:	e00e      	b.n	80024e8 <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80024ca:	230f      	movs	r3, #15
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	2202      	movs	r2, #2
 80024d0:	701a      	strb	r2, [r3, #0]
            break;
 80024d2:	e009      	b.n	80024e8 <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80024d4:	230f      	movs	r3, #15
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2206      	movs	r2, #6
 80024da:	701a      	strb	r2, [r3, #0]
            break;
 80024dc:	e004      	b.n	80024e8 <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80024de:	230f      	movs	r3, #15
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2204      	movs	r2, #4
 80024e4:	701a      	strb	r2, [r3, #0]
            break;
 80024e6:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 80024e8:	230f      	movs	r3, #15
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	781b      	ldrb	r3, [r3, #0]
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	0004      	movs	r4, r0
 8002500:	0008      	movs	r0, r1
 8002502:	0011      	movs	r1, r2
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	1c22      	adds	r2, r4, #0
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	1dbb      	adds	r3, r7, #6
 800250e:	1c02      	adds	r2, r0, #0
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	1d7b      	adds	r3, r7, #5
 8002514:	1c0a      	adds	r2, r1, #0
 8002516:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002518:	230f      	movs	r3, #15
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8002520:	1dbb      	adds	r3, r7, #6
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <eMBInit+0x40>
 8002528:	1dbb      	adds	r3, r7, #6
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2bf7      	cmp	r3, #247	; 0xf7
 8002536:	d904      	bls.n	8002542 <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 8002538:	230f      	movs	r3, #15
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2202      	movs	r2, #2
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e047      	b.n	80025d2 <eMBInit+0xda>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <eMBInit+0xe8>)
 8002544:	1dba      	adds	r2, r7, #6
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d127      	bne.n	80025a2 <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <eMBInit+0xec>)
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <eMBInit+0xf0>)
 8002556:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <eMBInit+0xf4>)
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <eMBInit+0xf8>)
 800255c:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <eMBInit+0xfc>)
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <eMBInit+0x100>)
 8002562:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <eMBInit+0x104>)
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <eMBInit+0x108>)
 8002568:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <eMBInit+0x10c>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <eMBInit+0x110>)
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <eMBInit+0x114>)
 8002574:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <eMBInit+0x118>)
 8002578:	4a26      	ldr	r2, [pc, #152]	; (8002614 <eMBInit+0x11c>)
 800257a:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <eMBInit+0x120>)
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <eMBInit+0x124>)
 8002580:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <eMBInit+0xe8>)
 8002584:	7818      	ldrb	r0, [r3, #0]
 8002586:	230f      	movs	r3, #15
 8002588:	18fc      	adds	r4, r7, r3
 800258a:	2320      	movs	r3, #32
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	781d      	ldrb	r5, [r3, #0]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	1d7b      	adds	r3, r7, #5
 8002594:	7819      	ldrb	r1, [r3, #0]
 8002596:	002b      	movs	r3, r5
 8002598:	f000 fc08 	bl	8002dac <eMBRTUInit>
 800259c:	0003      	movs	r3, r0
 800259e:	7023      	strb	r3, [r4, #0]
            break;
 80025a0:	e003      	b.n	80025aa <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80025a2:	230f      	movs	r3, #15
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2202      	movs	r2, #2
 80025a8:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 80025aa:	240f      	movs	r4, #15
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10e      	bne.n	80025d2 <eMBInit+0xda>
        {
            if( !xMBPortEventInit(  ) )
 80025b4:	f000 f9b6 	bl	8002924 <xMBPortEventInit>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d103      	bne.n	80025c4 <eMBInit+0xcc>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	2203      	movs	r2, #3
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e006      	b.n	80025d2 <eMBInit+0xda>
            }
            else
            {
                eMBCurrentMode = eMode;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <eMBInit+0x128>)
 80025c6:	1dfa      	adds	r2, r7, #7
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <eMBInit+0x12c>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	200001ea 	.word	0x200001ea
 80025e4:	200001f0 	.word	0x200001f0
 80025e8:	08002e49 	.word	0x08002e49
 80025ec:	200001f4 	.word	0x200001f4
 80025f0:	08002e71 	.word	0x08002e71
 80025f4:	200001ec 	.word	0x200001ec
 80025f8:	08002f41 	.word	0x08002f41
 80025fc:	200001f8 	.word	0x200001f8
 8002600:	08002e91 	.word	0x08002e91
 8002604:	200001fc 	.word	0x200001fc
 8002608:	20000200 	.word	0x20000200
 800260c:	08003029 	.word	0x08003029
 8002610:	20000204 	.word	0x20000204
 8002614:	080030fd 	.word	0x080030fd
 8002618:	20000208 	.word	0x20000208
 800261c:	080031b1 	.word	0x080031b1
 8002620:	200001eb 	.word	0x200001eb
 8002624:	20000004 	.word	0x20000004

08002628 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <eMBEnable+0x34>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <eMBEnable+0x38>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <eMBEnable+0x34>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e002      	b.n	8002650 <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	2206      	movs	r2, #6
 800264e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000004 	.word	0x20000004
 8002660:	200001f0 	.word	0x200001f0

08002664 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8002664:	b5b0      	push	{r4, r5, r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800266a:	1cfb      	adds	r3, r7, #3
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002670:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <eMBPoll+0x16c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 8002678:	2306      	movs	r3, #6
 800267a:	e0a5      	b.n	80027c8 <eMBPoll+0x164>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800267c:	1cbb      	adds	r3, r7, #2
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f972 	bl	8002968 <xMBPortEventGet>
 8002684:	0003      	movs	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d000      	beq.n	800268c <eMBPoll+0x28>
 800268a:	e093      	b.n	80027b4 <eMBPoll+0x150>
    {
        switch ( eEvent )
 800268c:	1cbb      	adds	r3, r7, #2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d100      	bne.n	8002696 <eMBPoll+0x32>
 8002694:	e090      	b.n	80027b8 <eMBPoll+0x154>
 8002696:	dd00      	ble.n	800269a <eMBPoll+0x36>
 8002698:	e095      	b.n	80027c6 <eMBPoll+0x162>
 800269a:	2b02      	cmp	r3, #2
 800269c:	d024      	beq.n	80026e8 <eMBPoll+0x84>
 800269e:	dd00      	ble.n	80026a2 <eMBPoll+0x3e>
 80026a0:	e091      	b.n	80027c6 <eMBPoll+0x162>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d100      	bne.n	80026a8 <eMBPoll+0x44>
 80026a6:	e089      	b.n	80027bc <eMBPoll+0x158>
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d000      	beq.n	80026ae <eMBPoll+0x4a>
 80026ac:	e08b      	b.n	80027c6 <eMBPoll+0x162>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80026ae:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <eMBPoll+0x170>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1cfc      	adds	r4, r7, #3
 80026b4:	4a48      	ldr	r2, [pc, #288]	; (80027d8 <eMBPoll+0x174>)
 80026b6:	4949      	ldr	r1, [pc, #292]	; (80027dc <eMBPoll+0x178>)
 80026b8:	4849      	ldr	r0, [pc, #292]	; (80027e0 <eMBPoll+0x17c>)
 80026ba:	4798      	blx	r3
 80026bc:	0003      	movs	r3, r0
 80026be:	7023      	strb	r3, [r4, #0]
            if( eStatus == MB_ENOERR )
 80026c0:	1cfb      	adds	r3, r7, #3
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d000      	beq.n	80026ca <eMBPoll+0x66>
 80026c8:	e07a      	b.n	80027c0 <eMBPoll+0x15c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <eMBPoll+0x17c>)
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <eMBPoll+0x180>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d004      	beq.n	80026e0 <eMBPoll+0x7c>
 80026d6:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <eMBPoll+0x17c>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d000      	beq.n	80026e0 <eMBPoll+0x7c>
 80026de:	e06f      	b.n	80027c0 <eMBPoll+0x15c>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80026e0:	2002      	movs	r0, #2
 80026e2:	f000 f92b 	bl	800293c <xMBPortEventPost>
                }
            }
            break;
 80026e6:	e06b      	b.n	80027c0 <eMBPoll+0x15c>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <eMBPoll+0x178>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <eMBPoll+0x184>)
 80026f0:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <eMBPoll+0x188>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	e020      	b.n	8002740 <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80026fe:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <eMBPoll+0x18c>)
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	00d2      	lsls	r2, r2, #3
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01e      	beq.n	8002748 <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <eMBPoll+0x18c>)
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	00d2      	lsls	r2, r2, #3
 8002710:	5cd2      	ldrb	r2, [r2, r3]
 8002712:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <eMBPoll+0x184>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d10f      	bne.n	800273a <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800271a:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <eMBPoll+0x18c>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	18d3      	adds	r3, r2, r3
 8002722:	3304      	adds	r3, #4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <eMBPoll+0x178>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	492b      	ldr	r1, [pc, #172]	; (80027d8 <eMBPoll+0x174>)
 800272c:	0018      	movs	r0, r3
 800272e:	4790      	blx	r2
 8002730:	0003      	movs	r3, r0
 8002732:	001a      	movs	r2, r3
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <eMBPoll+0x188>)
 8002736:	701a      	strb	r2, [r3, #0]
                    break;
 8002738:	e007      	b.n	800274a <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3301      	adds	r3, #1
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	dddb      	ble.n	80026fe <eMBPoll+0x9a>
 8002746:	e000      	b.n	800274a <eMBPoll+0xe6>
                    break;
 8002748:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <eMBPoll+0x17c>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d038      	beq.n	80027c4 <eMBPoll+0x160>
            {
                if( eException != MB_EX_NONE )
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <eMBPoll+0x188>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01e      	beq.n	8002798 <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <eMBPoll+0x174>)
 800275c:	2200      	movs	r2, #0
 800275e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <eMBPoll+0x184>)
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <eMBPoll+0x178>)
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <eMBPoll+0x174>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	1c58      	adds	r0, r3, #1
 800276e:	b284      	uxth	r4, r0
 8002770:	4819      	ldr	r0, [pc, #100]	; (80027d8 <eMBPoll+0x174>)
 8002772:	8004      	strh	r4, [r0, #0]
 8002774:	18cb      	adds	r3, r1, r3
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	4249      	negs	r1, r1
 800277a:	430a      	orrs	r2, r1
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <eMBPoll+0x178>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <eMBPoll+0x174>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	1c59      	adds	r1, r3, #1
 800278a:	b288      	uxth	r0, r1
 800278c:	4912      	ldr	r1, [pc, #72]	; (80027d8 <eMBPoll+0x174>)
 800278e:	8008      	strh	r0, [r1, #0]
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <eMBPoll+0x188>)
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <eMBPoll+0x190>)
 800279a:	681d      	ldr	r5, [r3, #0]
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <eMBPoll+0x180>)
 800279e:	7818      	ldrb	r0, [r3, #0]
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <eMBPoll+0x178>)
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <eMBPoll+0x174>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	1cfc      	adds	r4, r7, #3
 80027aa:	001a      	movs	r2, r3
 80027ac:	47a8      	blx	r5
 80027ae:	0003      	movs	r3, r0
 80027b0:	7023      	strb	r3, [r4, #0]
            }
            break;
 80027b2:	e007      	b.n	80027c4 <eMBPoll+0x160>

        case EV_FRAME_SENT:
            break;
        }
    }
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	e006      	b.n	80027c6 <eMBPoll+0x162>
            break;
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	e004      	b.n	80027c6 <eMBPoll+0x162>
            break;
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	e002      	b.n	80027c6 <eMBPoll+0x162>
            break;
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	e000      	b.n	80027c6 <eMBPoll+0x162>
            break;
 80027c4:	46c0      	nop			; (mov r8, r8)
    return MB_ENOERR;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bdb0      	pop	{r4, r5, r7, pc}
 80027d0:	20000004 	.word	0x20000004
 80027d4:	200001f8 	.word	0x200001f8
 80027d8:	20000214 	.word	0x20000214
 80027dc:	20000210 	.word	0x20000210
 80027e0:	2000020c 	.word	0x2000020c
 80027e4:	200001ea 	.word	0x200001ea
 80027e8:	20000216 	.word	0x20000216
 80027ec:	20000217 	.word	0x20000217
 80027f0:	20000008 	.word	0x20000008
 80027f4:	200001ec 	.word	0x200001ec

080027f8 <eMBRegInputCB>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	0008      	movs	r0, r1
 8002802:	0011      	movs	r1, r2
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	1c02      	adds	r2, r0, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	003b      	movs	r3, r7
 800280c:	1c0a      	adds	r2, r1, #0
 800280e:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002810:	230f      	movs	r3, #15
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	23fa      	movs	r3, #250	; 0xfa
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d330      	bcc.n	8002886 <eMBRegInputCB+0x8e>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8002824:	1cbb      	adds	r3, r7, #2
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	003b      	movs	r3, r7
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	18d2      	adds	r2, r2, r3
 800282e:	23fb      	movs	r3, #251	; 0xfb
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	429a      	cmp	r2, r3
 8002834:	dc27      	bgt.n	8002886 <eMBRegInputCB+0x8e>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8002836:	1cbb      	adds	r3, r7, #2
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <eMBRegInputCB+0xa4>)
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 8002842:	e01b      	b.n	800287c <eMBRegInputCB+0x84>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <eMBRegInputCB+0xa8>)
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	0052      	lsls	r2, r2, #1
 800284a:	5ad3      	ldrh	r3, [r2, r3]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8002856:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8002858:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <eMBRegInputCB+0xa8>)
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	0052      	lsls	r2, r2, #1
 8002860:	5ad1      	ldrh	r1, [r2, r3]
            *pucRegBuffer++ =
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8002868:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 800286a:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3301      	adds	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 8002872:	003b      	movs	r3, r7
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	003b      	movs	r3, r7
 8002878:	3a01      	subs	r2, #1
 800287a:	801a      	strh	r2, [r3, #0]
        while( usNRegs > 0 )
 800287c:	003b      	movs	r3, r7
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1df      	bne.n	8002844 <eMBRegInputCB+0x4c>
    if( ( usAddress >= REG_INPUT_START )
 8002884:	e003      	b.n	800288e <eMBRegInputCB+0x96>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002886:	230f      	movs	r3, #15
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 800288e:	230f      	movs	r3, #15
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000088 	.word	0x20000088
 80028a0:	20000218 	.word	0x20000218

080028a4 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	000c      	movs	r4, r1
 80028ae:	0010      	movs	r0, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	230a      	movs	r3, #10
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	1c22      	adds	r2, r4, #0
 80028b8:	801a      	strh	r2, [r3, #0]
 80028ba:	2308      	movs	r3, #8
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	1c02      	adds	r2, r0, #0
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	1c0a      	adds	r2, r1, #0
 80028c6:	701a      	strb	r2, [r3, #0]
    return MB_ENOREG;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b005      	add	sp, #20
 80028d0:	bd90      	pop	{r4, r7, pc}

080028d2 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
 80028d2:	b590      	push	{r4, r7, lr}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	000c      	movs	r4, r1
 80028dc:	0010      	movs	r0, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	230a      	movs	r3, #10
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	1c22      	adds	r2, r4, #0
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	2308      	movs	r3, #8
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	1c02      	adds	r2, r0, #0
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	1c0a      	adds	r2, r1, #0
 80028f4:	701a      	strb	r2, [r3, #0]
    return MB_ENOREG;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b005      	add	sp, #20
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	0008      	movs	r0, r1
 800290a:	0011      	movs	r1, r2
 800290c:	1cbb      	adds	r3, r7, #2
 800290e:	1c02      	adds	r2, r0, #0
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	003b      	movs	r3, r7
 8002914:	1c0a      	adds	r2, r1, #0
 8002916:	801a      	strh	r2, [r3, #0]
    return MB_ENOREG;
 8002918:	2301      	movs	r3, #1
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <xMBPortEventInit+0x14>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800292e:	2301      	movs	r3, #1
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	20000221 	.word	0x20000221

0800293c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	0002      	movs	r2, r0
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	701a      	strb	r2, [r3, #0]
    xEventInQueue = TRUE;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <xMBPortEventPost+0x24>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <xMBPortEventPost+0x28>)
 8002950:	1dfa      	adds	r2, r7, #7
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8002956:	2301      	movs	r3, #1
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000221 	.word	0x20000221
 8002964:	20000220 	.word	0x20000220

08002968 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8002970:	210f      	movs	r1, #15
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]

    if( xEventInQueue )
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <xMBPortEventGet+0x3c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <xMBPortEventGet+0x2c>
    {
        *eEvent = eQueuedEvent;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <xMBPortEventGet+0x40>)
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <xMBPortEventGet+0x3c>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
    }
    return xEventHappened;
 8002994:	230f      	movs	r3, #15
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	20000221 	.word	0x20000221
 80029a8:	20000220 	.word	0x20000220

080029ac <LL_USART_EnableIT_RXNE_RXFNE>:
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8310 	mrs	r3, PRIMASK
 80029b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029ba:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2301      	movs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			; (mov r8, r8)
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}

080029ea <LL_USART_EnableIT_TXE_TXFNF>:
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029f8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	2301      	movs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <LL_USART_DisableIT_RXNE_RXFNE>:
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a30:	f3ef 8310 	mrs	r3, PRIMASK
 8002a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a36:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f383 8810 	msr	PRIMASK, r3
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	001a      	movs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <LL_USART_DisableIT_TXE_TXFNF>:
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a70:	f3ef 8310 	mrs	r3, PRIMASK
 8002a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a76:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f383 8810 	msr	PRIMASK, r3
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	001a      	movs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	b2db      	uxtb	r3, r3
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}

08002abe <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	000a      	movs	r2, r1
 8002ac8:	1cfb      	adds	r3, r7, #3
 8002aca:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8002acc:	1cfb      	adds	r3, r7, #3
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <vMBPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	1c0a      	adds	r2, r1, #0
 8002aec:	701a      	strb	r2, [r3, #0]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if(xRxEnable == TRUE) LL_USART_EnableIT_RXNE_RXFNE(USART2);
 8002aee:	1dfb      	adds	r3, r7, #7
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d104      	bne.n	8002b00 <vMBPortSerialEnable+0x24>
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <vMBPortSerialEnable+0x50>)
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff57 	bl	80029ac <LL_USART_EnableIT_RXNE_RXFNE>
 8002afe:	e003      	b.n	8002b08 <vMBPortSerialEnable+0x2c>
	else LL_USART_DisableIT_RXNE_RXFNE(USART2);
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <vMBPortSerialEnable+0x50>)
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7ff ff90 	bl	8002a28 <LL_USART_DisableIT_RXNE_RXFNE>

	if(xTxEnable == TRUE) LL_USART_EnableIT_TXE_TXFNF(USART2);
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d104      	bne.n	8002b1a <vMBPortSerialEnable+0x3e>
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <vMBPortSerialEnable+0x50>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff ff69 	bl	80029ea <LL_USART_EnableIT_TXE_TXFNF>
	else LL_USART_DisableIT_TXE_TXFNF(USART2);
}
 8002b18:	e003      	b.n	8002b22 <vMBPortSerialEnable+0x46>
	else LL_USART_DisableIT_TXE_TXFNF(USART2);
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <vMBPortSerialEnable+0x50>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7ff ffa3 	bl	8002a68 <LL_USART_DisableIT_TXE_TXFNF>
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b002      	add	sp, #8
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	40004400 	.word	0x40004400

08002b30 <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	0004      	movs	r4, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	1c22      	adds	r2, r4, #0
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	1dbb      	adds	r3, r7, #6
 8002b46:	1c02      	adds	r2, r0, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	1d7b      	adds	r3, r7, #5
 8002b4c:	1c0a      	adds	r2, r1, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	//enable uart interrupt
	//LL_USART_EnableIT_TXE_TXFNF(USART2);
    return TRUE;
 8002b50:	2301      	movs	r3, #1
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b003      	add	sp, #12
 8002b58:	bd90      	pop	{r4, r7, pc}
	...

08002b5c <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	701a      	strb	r2, [r3, #0]
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */

	LL_USART_TransmitData8(USART2, ucByte);
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <xMBPortSerialPutByte+0x24>)
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f7ff ffa4 	bl	8002abe <LL_USART_TransmitData8>

    return TRUE;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40004400 	.word	0x40004400

08002b84 <xMBPortSerialGetByte>:
}


BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */

//WIP
	*pucByte = LL_USART_ReceiveData8(USART2);
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <xMBPortSerialGetByte+0x24>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7ff ff8a 	bl	8002aa8 <LL_USART_ReceiveData8>
 8002b94:	0003      	movs	r3, r0
 8002b96:	001a      	movs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	701a      	strb	r2, [r3, #0]


    return TRUE;
 8002b9c:	2301      	movs	r3, #1
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40004400 	.word	0x40004400

08002bac <prvvUARTTxReadyISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
void prvvUARTTxReadyISR( void )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
    pxMBFrameCBTransmitterEmpty(  );
 8002bb0:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <prvvUARTTxReadyISR+0x10>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4798      	blx	r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000204 	.word	0x20000204

08002bc0 <prvvUARTRxISR>:
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
void prvvUARTRxISR( void )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	//LL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);

    pxMBFrameCBByteReceived(  );
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <prvvUARTRxISR+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4798      	blx	r3
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000200 	.word	0x20000200

08002bd4 <LL_TIM_EnableCounter>:
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <LL_TIM_DisableCounter>:
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4393      	bics	r3, r2
 8002c00:	001a      	movs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <LL_TIM_ClearFlag_UPDATE>:
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	611a      	str	r2, [r3, #16]
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <LL_TIM_EnableIT_UPDATE>:
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b002      	add	sp, #8
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <LL_TIM_DisableIT_UPDATE>:
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4393      	bics	r3, r2
 8002c52:	001a      	movs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <LL_GPIO_SetOutputPin>:
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	619a      	str	r2, [r3, #24]
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <xMBPortTimersInit>:
//void prvvTIMERExpiredISR( TIM_HandleTypeDef *htim );

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	0002      	movs	r2, r0
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	801a      	strh	r2, [r3, #0]
	LL_TIM_DisableCounter(TIM16);
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <xMBPortTimersInit+0x30>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ffb2 	bl	8002bf0 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM16);
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <xMBPortTimersInit+0x30>)
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7ff ffd7 	bl	8002c42 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM16);
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <xMBPortTimersInit+0x30>)
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ffb9 	bl	8002c0e <LL_TIM_ClearFlag_UPDATE>

    return TRUE;
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40014400 	.word	0x40014400

08002cac <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	TIM16->CNT = 0;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <vMBPortTimersEnable+0x28>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
	LL_TIM_ClearFlag_UPDATE(TIM16);
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <vMBPortTimersEnable+0x28>)
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ffa8 	bl	8002c0e <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM16);
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <vMBPortTimersEnable+0x28>)
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff ffb0 	bl	8002c26 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM16);
 8002cc6:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <vMBPortTimersEnable+0x28>)
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff83 	bl	8002bd4 <LL_TIM_EnableCounter>

}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40014400 	.word	0x40014400

08002cd8 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	LL_TIM_DisableCounter(TIM16);
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <vMBPortTimersDisable+0x2c>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7ff ff86 	bl	8002bf0 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM16);
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <vMBPortTimersDisable+0x2c>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7ff ffab 	bl	8002c42 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM16);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <vMBPortTimersDisable+0x2c>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff ff8d 	bl	8002c0e <LL_TIM_ClearFlag_UPDATE>
    LL_GPIO_SetOutputPin(TP2_GPIO_Port, TP2_Pin);
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <vMBPortTimersDisable+0x30>)
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff ffb1 	bl	8002c60 <LL_GPIO_SetOutputPin>

}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40014400 	.word	0x40014400
 8002d08:	50000400 	.word	0x50000400

08002d0c <prvvTIMERExpiredISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
void prvvTIMERExpiredISR( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
    ( void )pxMBPortCBTimerExpired(  );
 8002d10:	4b02      	ldr	r3, [pc, #8]	; (8002d1c <prvvTIMERExpiredISR+0x10>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4798      	blx	r3


}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000208 	.word	0x20000208

08002d20 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	000a      	movs	r2, r1
 8002d2a:	1cbb      	adds	r3, r7, #2
 8002d2c:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 8002d2e:	230f      	movs	r3, #15
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	22ff      	movs	r2, #255	; 0xff
 8002d34:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 8002d36:	230e      	movs	r3, #14
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	22ff      	movs	r2, #255	; 0xff
 8002d3c:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 8002d3e:	e019      	b.n	8002d74 <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	200e      	movs	r0, #14
 8002d4a:	183b      	adds	r3, r7, r0
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4053      	eors	r3, r2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <usMBCRC16+0x84>)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	18d3      	adds	r3, r2, r3
 8002d5a:	7819      	ldrb	r1, [r3, #0]
 8002d5c:	183b      	adds	r3, r7, r0
 8002d5e:	200f      	movs	r0, #15
 8002d60:	183a      	adds	r2, r7, r0
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	404a      	eors	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 8002d68:	183b      	adds	r3, r7, r0
 8002d6a:	490f      	ldr	r1, [pc, #60]	; (8002da8 <usMBCRC16+0x88>)
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	188a      	adds	r2, r1, r2
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8002d74:	1cbb      	adds	r3, r7, #2
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	1cba      	adds	r2, r7, #2
 8002d7a:	1e59      	subs	r1, r3, #1
 8002d7c:	8011      	strh	r1, [r2, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1de      	bne.n	8002d40 <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8002d82:	230f      	movs	r3, #15
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	230e      	movs	r3, #14
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	b29b      	uxth	r3, r3
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	08006ab0 	.word	0x08006ab0
 8002da8:	08006bb0 	.word	0x08006bb0

08002dac <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0004      	movs	r4, r0
 8002db4:	0008      	movs	r0, r1
 8002db6:	603a      	str	r2, [r7, #0]
 8002db8:	0019      	movs	r1, r3
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	1c22      	adds	r2, r4, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	1dbb      	adds	r3, r7, #6
 8002dc2:	1c02      	adds	r2, r0, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	1d7b      	adds	r3, r7, #5
 8002dc8:	1c0a      	adds	r2, r1, #0
 8002dca:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002dcc:	240f      	movs	r4, #15
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd4:	b672      	cpsid	i
}
 8002dd6:	46c0      	nop			; (mov r8, r8)

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8002dd8:	1d7b      	adds	r3, r7, #5
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	1dbb      	adds	r3, r7, #6
 8002de0:	7818      	ldrb	r0, [r3, #0]
 8002de2:	0013      	movs	r3, r2
 8002de4:	2208      	movs	r2, #8
 8002de6:	f7ff fea3 	bl	8002b30 <xMBPortSerialInit>
 8002dea:	0003      	movs	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d003      	beq.n	8002df8 <eMBRTUInit+0x4c>
    {
        eStatus = MB_EPORTERR;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2203      	movs	r2, #3
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e01b      	b.n	8002e30 <eMBRTUInit+0x84>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	2396      	movs	r3, #150	; 0x96
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d902      	bls.n	8002e08 <eMBRTUInit+0x5c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8002e02:	2323      	movs	r3, #35	; 0x23
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	e007      	b.n	8002e18 <eMBRTUInit+0x6c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <eMBRTUInit+0x98>)
 8002e10:	f7fd f984 	bl	800011c <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7ff ff2b 	bl	8002c78 <xMBPortTimersInit>
 8002e22:	0003      	movs	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d003      	beq.n	8002e30 <eMBRTUInit+0x84>
        {
            eStatus = MB_EPORTERR;
 8002e28:	230f      	movs	r3, #15
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e30:	b662      	cpsie	i
}
 8002e32:	46c0      	nop			; (mov r8, r8)
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	781b      	ldrb	r3, [r3, #0]
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b005      	add	sp, #20
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	00177fa0 	.word	0x00177fa0

08002e48 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4c:	b672      	cpsid	i
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <eMBRTUStart+0x24>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8002e56:	2100      	movs	r1, #0
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7ff fe3f 	bl	8002adc <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8002e5e:	f7ff ff25 	bl	8002cac <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e62:	b662      	cpsie	i
}
 8002e64:	46c0      	nop			; (mov r8, r8)

    EXIT_CRITICAL_SECTION(  );
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000223 	.word	0x20000223

08002e70 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e74:	b672      	cpsid	i
}
 8002e76:	46c0      	nop			; (mov r8, r8)
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7ff fe2e 	bl	8002adc <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8002e80:	f7ff ff2a 	bl	8002cd8 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e84:	b662      	cpsie	i
}
 8002e86:	46c0      	nop			; (mov r8, r8)
    EXIT_CRITICAL_SECTION(  );
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8002e9c:	2316      	movs	r3, #22
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002ea4:	2317      	movs	r3, #23
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	46c0      	nop			; (mov r8, r8)

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <eMBRTUReceive+0x98>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d905      	bls.n	8002ec6 <eMBRTUReceive+0x36>
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <eMBRTUReceive+0x9c>)
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <eMBRTUReceive+0xa0>)
 8002ebe:	481d      	ldr	r0, [pc, #116]	; (8002f34 <eMBRTUReceive+0xa4>)
 8002ec0:	219c      	movs	r1, #156	; 0x9c
 8002ec2:	f002 fcbf 	bl	8005844 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <eMBRTUReceive+0x98>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d91d      	bls.n	8002f0c <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <eMBRTUReceive+0x98>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <eMBRTUReceive+0xa8>)
 8002ed8:	0011      	movs	r1, r2
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7ff ff20 	bl	8002d20 <usMBCRC16>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d113      	bne.n	8002f0c <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <eMBRTUReceive+0xa8>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <eMBRTUReceive+0x98>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b03      	subs	r3, #3
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <eMBRTUReceive+0xac>)
 8002f00:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8002f02:	2316      	movs	r3, #22
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e003      	b.n	8002f14 <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 8002f0c:	2317      	movs	r3, #23
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2205      	movs	r2, #5
 8002f12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f14:	b662      	cpsie	i
}
 8002f16:	46c0      	nop			; (mov r8, r8)
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8002f18:	2317      	movs	r3, #23
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b006      	add	sp, #24
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	2000032a 	.word	0x2000032a
 8002f2c:	0800694c 	.word	0x0800694c
 8002f30:	08006cb0 	.word	0x08006cb0
 8002f34:	08006974 	.word	0x08006974
 8002f38:	20000224 	.word	0x20000224
 8002f3c:	20000225 	.word	0x20000225

08002f40 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	0011      	movs	r1, r2
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	1c02      	adds	r2, r0, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	1c0a      	adds	r2, r1, #0
 8002f54:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f56:	230f      	movs	r3, #15
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5e:	b672      	cpsid	i
}
 8002f60:	46c0      	nop			; (mov r8, r8)

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8002f62:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <eMBRTUSend+0xd4>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d145      	bne.n	8002ff8 <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <eMBRTUSend+0xd8>)
 8002f72:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <eMBRTUSend+0xdc>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <eMBRTUSend+0xd8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1dfa      	adds	r2, r7, #7
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <eMBRTUSend+0xdc>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <eMBRTUSend+0xdc>)
 8002f94:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <eMBRTUSend+0xd8>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <eMBRTUSend+0xdc>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	250c      	movs	r5, #12
 8002fa2:	197c      	adds	r4, r7, r5
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	f7ff feba 	bl	8002d20 <usMBCRC16>
 8002fac:	0003      	movs	r3, r0
 8002fae:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <eMBRTUSend+0xdc>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	b291      	uxth	r1, r2
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <eMBRTUSend+0xdc>)
 8002fbc:	8011      	strh	r1, [r2, #0]
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	197b      	adds	r3, r7, r5
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b2d9      	uxtb	r1, r3
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <eMBRTUSend+0xe0>)
 8002fc8:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8002fca:	197b      	adds	r3, r7, r5
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b299      	uxth	r1, r3
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <eMBRTUSend+0xdc>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	b290      	uxth	r0, r2
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <eMBRTUSend+0xdc>)
 8002fde:	8010      	strh	r0, [r2, #0]
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	b2c9      	uxtb	r1, r1
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <eMBRTUSend+0xe0>)
 8002fe6:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <eMBRTUSend+0xe4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff fd73 	bl	8002adc <vMBPortSerialEnable>
 8002ff6:	e003      	b.n	8003000 <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003000:	b662      	cpsie	i
}
 8003002:	46c0      	nop			; (mov r8, r8)
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8003004:	230f      	movs	r3, #15
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bdb0      	pop	{r4, r5, r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	20000223 	.word	0x20000223
 8003018:	20000324 	.word	0x20000324
 800301c:	20000328 	.word	0x20000328
 8003020:	20000224 	.word	0x20000224
 8003024:	20000222 	.word	0x20000222

08003028 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <xMBRTUReceiveFSM+0xb8>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <xMBRTUReceiveFSM+0x22>
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <xMBRTUReceiveFSM+0xbc>)
 8003040:	4a29      	ldr	r2, [pc, #164]	; (80030e8 <xMBRTUReceiveFSM+0xc0>)
 8003042:	482a      	ldr	r0, [pc, #168]	; (80030ec <xMBRTUReceiveFSM+0xc4>)
 8003044:	21e6      	movs	r1, #230	; 0xe6
 8003046:	f002 fbfd 	bl	8005844 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800304a:	1dbb      	adds	r3, r7, #6
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fd99 	bl	8002b84 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <xMBRTUReceiveFSM+0xc8>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b03      	cmp	r3, #3
 800305a:	d00b      	beq.n	8003074 <xMBRTUReceiveFSM+0x4c>
 800305c:	dc3a      	bgt.n	80030d4 <xMBRTUReceiveFSM+0xac>
 800305e:	2b02      	cmp	r3, #2
 8003060:	d020      	beq.n	80030a4 <xMBRTUReceiveFSM+0x7c>
 8003062:	dc37      	bgt.n	80030d4 <xMBRTUReceiveFSM+0xac>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <xMBRTUReceiveFSM+0x46>
 8003068:	2b01      	cmp	r3, #1
 800306a:	d006      	beq.n	800307a <xMBRTUReceiveFSM+0x52>
 800306c:	e032      	b.n	80030d4 <xMBRTUReceiveFSM+0xac>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800306e:	f7ff fe1d 	bl	8002cac <vMBPortTimersEnable>
        break;
 8003072:	e02f      	b.n	80030d4 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8003074:	f7ff fe1a 	bl	8002cac <vMBPortTimersEnable>
        break;
 8003078:	e02c      	b.n	80030d4 <xMBRTUReceiveFSM+0xac>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <xMBRTUReceiveFSM+0xcc>)
 800307c:	2200      	movs	r2, #0
 800307e:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003080:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <xMBRTUReceiveFSM+0xcc>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	b291      	uxth	r1, r2
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <xMBRTUReceiveFSM+0xcc>)
 800308c:	8011      	strh	r1, [r2, #0]
 800308e:	001a      	movs	r2, r3
 8003090:	1dbb      	adds	r3, r7, #6
 8003092:	7819      	ldrb	r1, [r3, #0]
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <xMBRTUReceiveFSM+0xd0>)
 8003096:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <xMBRTUReceiveFSM+0xc8>)
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800309e:	f7ff fe05 	bl	8002cac <vMBPortTimersEnable>
        break;
 80030a2:	e017      	b.n	80030d4 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <xMBRTUReceiveFSM+0xcc>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d80c      	bhi.n	80030c8 <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <xMBRTUReceiveFSM+0xcc>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	b291      	uxth	r1, r2
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <xMBRTUReceiveFSM+0xcc>)
 80030ba:	8011      	strh	r1, [r2, #0]
 80030bc:	001a      	movs	r2, r3
 80030be:	1dbb      	adds	r3, r7, #6
 80030c0:	7819      	ldrb	r1, [r3, #0]
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <xMBRTUReceiveFSM+0xd0>)
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	e002      	b.n	80030ce <xMBRTUReceiveFSM+0xa6>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <xMBRTUReceiveFSM+0xc8>)
 80030ca:	2203      	movs	r2, #3
 80030cc:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80030ce:	f7ff fded 	bl	8002cac <vMBPortTimersEnable>
        break;
 80030d2:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000222 	.word	0x20000222
 80030e4:	08006990 	.word	0x08006990
 80030e8:	08006cc0 	.word	0x08006cc0
 80030ec:	08006974 	.word	0x08006974
 80030f0:	20000223 	.word	0x20000223
 80030f4:	2000032a 	.word	0x2000032a
 80030f8:	20000224 	.word	0x20000224

080030fc <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 8003108:	4b22      	ldr	r3, [pc, #136]	; (8003194 <xMBRTUTransmitFSM+0x98>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d006      	beq.n	8003120 <xMBRTUTransmitFSM+0x24>
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <xMBRTUTransmitFSM+0x9c>)
 8003114:	4a21      	ldr	r2, [pc, #132]	; (800319c <xMBRTUTransmitFSM+0xa0>)
 8003116:	2122      	movs	r1, #34	; 0x22
 8003118:	31ff      	adds	r1, #255	; 0xff
 800311a:	4821      	ldr	r0, [pc, #132]	; (80031a0 <xMBRTUTransmitFSM+0xa4>)
 800311c:	f002 fb92 	bl	8005844 <__assert_func>

    switch ( eSndState )
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <xMBRTUTransmitFSM+0xa8>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <xMBRTUTransmitFSM+0x34>
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <xMBRTUTransmitFSM+0x3e>
 800312e:	e02b      	b.n	8003188 <xMBRTUTransmitFSM+0x8c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8003130:	2100      	movs	r1, #0
 8003132:	2001      	movs	r0, #1
 8003134:	f7ff fcd2 	bl	8002adc <vMBPortSerialEnable>
        break;
 8003138:	e026      	b.n	8003188 <xMBRTUTransmitFSM+0x8c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <xMBRTUTransmitFSM+0xac>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <xMBRTUTransmitFSM+0x70>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <xMBRTUTransmitFSM+0xb0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fd05 	bl	8002b5c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <xMBRTUTransmitFSM+0xb0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <xMBRTUTransmitFSM+0xb0>)
 800315a:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <xMBRTUTransmitFSM+0xac>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <xMBRTUTransmitFSM+0xac>)
 8003168:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800316a:	e00c      	b.n	8003186 <xMBRTUTransmitFSM+0x8a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800316c:	1dfc      	adds	r4, r7, #7
 800316e:	2003      	movs	r0, #3
 8003170:	f7ff fbe4 	bl	800293c <xMBPortEventPost>
 8003174:	0003      	movs	r3, r0
 8003176:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 8003178:	2100      	movs	r1, #0
 800317a:	2001      	movs	r0, #1
 800317c:	f7ff fcae 	bl	8002adc <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <xMBRTUTransmitFSM+0xa8>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
        break;
 8003186:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b003      	add	sp, #12
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	20000223 	.word	0x20000223
 8003198:	080069ac 	.word	0x080069ac
 800319c:	08006cd4 	.word	0x08006cd4
 80031a0:	08006974 	.word	0x08006974
 80031a4:	20000222 	.word	0x20000222
 80031a8:	20000328 	.word	0x20000328
 80031ac:	20000324 	.word	0x20000324

080031b0 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <xMBRTUTimerT35Expired+0x84>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d029      	beq.n	800321a <xMBRTUTimerT35Expired+0x6a>
 80031c6:	dc12      	bgt.n	80031ee <xMBRTUTimerT35Expired+0x3e>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <xMBRTUTimerT35Expired+0x22>
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d007      	beq.n	80031e0 <xMBRTUTimerT35Expired+0x30>
 80031d0:	e00d      	b.n	80031ee <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 80031d2:	1dfc      	adds	r4, r7, #7
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7ff fbb1 	bl	800293c <xMBPortEventPost>
 80031da:	0003      	movs	r3, r0
 80031dc:	7023      	strb	r3, [r4, #0]
        break;
 80031de:	e01d      	b.n	800321c <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80031e0:	1dfc      	adds	r4, r7, #7
 80031e2:	2001      	movs	r0, #1
 80031e4:	f7ff fbaa 	bl	800293c <xMBPortEventPost>
 80031e8:	0003      	movs	r3, r0
 80031ea:	7023      	strb	r3, [r4, #0]
        break;
 80031ec:	e016      	b.n	800321c <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <xMBRTUTimerT35Expired+0x84>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d011      	beq.n	800321c <xMBRTUTimerT35Expired+0x6c>
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <xMBRTUTimerT35Expired+0x84>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d00c      	beq.n	800321c <xMBRTUTimerT35Expired+0x6c>
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <xMBRTUTimerT35Expired+0x84>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d007      	beq.n	800321c <xMBRTUTimerT35Expired+0x6c>
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <xMBRTUTimerT35Expired+0x88>)
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <xMBRTUTimerT35Expired+0x8c>)
 8003210:	21ad      	movs	r1, #173	; 0xad
 8003212:	0049      	lsls	r1, r1, #1
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <xMBRTUTimerT35Expired+0x90>)
 8003216:	f002 fb15 	bl	8005844 <__assert_func>
        break;
 800321a:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800321c:	f7ff fd5c 	bl	8002cd8 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <xMBRTUTimerT35Expired+0x84>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	781b      	ldrb	r3, [r3, #0]
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b003      	add	sp, #12
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	20000223 	.word	0x20000223
 8003238:	080069c8 	.word	0x080069c8
 800323c:	08006ce8 	.word	0x08006ce8
 8003240:	08006974 	.word	0x08006974

08003244 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003250:	2003      	movs	r0, #3
 8003252:	f000 f80f 	bl	8003274 <HAL_InitTick>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d003      	beq.n	8003262 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e001      	b.n	8003266 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003262:	f7fd fdb3 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b002      	add	sp, #8
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800327c:	230f      	movs	r3, #15
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_InitTick+0x88>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02b      	beq.n	80032e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_InitTick+0x8c>)
 800328e:	681c      	ldr	r4, [r3, #0]
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_InitTick+0x88>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0019      	movs	r1, r3
 8003296:	23fa      	movs	r3, #250	; 0xfa
 8003298:	0098      	lsls	r0, r3, #2
 800329a:	f7fc ff3f 	bl	800011c <__udivsi3>
 800329e:	0003      	movs	r3, r0
 80032a0:	0019      	movs	r1, r3
 80032a2:	0020      	movs	r0, r4
 80032a4:	f7fc ff3a 	bl	800011c <__udivsi3>
 80032a8:	0003      	movs	r3, r0
 80032aa:	0018      	movs	r0, r3
 80032ac:	f000 f8ed 	bl	800348a <HAL_SYSTICK_Config>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d112      	bne.n	80032da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d80a      	bhi.n	80032d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	2301      	movs	r3, #1
 80032be:	425b      	negs	r3, r3
 80032c0:	2200      	movs	r2, #0
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 f8cc 	bl	8003460 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_InitTick+0x90>)
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00d      	b.n	80032ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e008      	b.n	80032ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032da:	230f      	movs	r3, #15
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e003      	b.n	80032ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032e4:	230f      	movs	r3, #15
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	781b      	ldrb	r3, [r3, #0]
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b005      	add	sp, #20
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20000090 	.word	0x20000090
 8003300:	20000000 	.word	0x20000000
 8003304:	2000008c 	.word	0x2000008c

08003308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_IncTick+0x18>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_IncTick+0x1c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	18d2      	adds	r2, r2, r3
 8003316:	4b02      	ldr	r3, [pc, #8]	; (8003320 <HAL_IncTick+0x18>)
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	2000032c 	.word	0x2000032c
 8003324:	20000090 	.word	0x20000090

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <HAL_GetTick+0x10>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	2000032c 	.word	0x2000032c

0800333c <__NVIC_SetPriority>:
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	0002      	movs	r2, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	1dfb      	adds	r3, r7, #7
 8003348:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b7f      	cmp	r3, #127	; 0x7f
 8003350:	d828      	bhi.n	80033a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003352:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <__NVIC_SetPriority+0xd4>)
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b25b      	sxtb	r3, r3
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	33c0      	adds	r3, #192	; 0xc0
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	589b      	ldr	r3, [r3, r2]
 8003362:	1dfa      	adds	r2, r7, #7
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	0011      	movs	r1, r2
 8003368:	2203      	movs	r2, #3
 800336a:	400a      	ands	r2, r1
 800336c:	00d2      	lsls	r2, r2, #3
 800336e:	21ff      	movs	r1, #255	; 0xff
 8003370:	4091      	lsls	r1, r2
 8003372:	000a      	movs	r2, r1
 8003374:	43d2      	mvns	r2, r2
 8003376:	401a      	ands	r2, r3
 8003378:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	401a      	ands	r2, r3
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	0018      	movs	r0, r3
 8003388:	2303      	movs	r3, #3
 800338a:	4003      	ands	r3, r0
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003390:	481f      	ldr	r0, [pc, #124]	; (8003410 <__NVIC_SetPriority+0xd4>)
 8003392:	1dfb      	adds	r3, r7, #7
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b25b      	sxtb	r3, r3
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	430a      	orrs	r2, r1
 800339c:	33c0      	adds	r3, #192	; 0xc0
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	501a      	str	r2, [r3, r0]
}
 80033a2:	e031      	b.n	8003408 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <__NVIC_SetPriority+0xd8>)
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	0019      	movs	r1, r3
 80033ac:	230f      	movs	r3, #15
 80033ae:	400b      	ands	r3, r1
 80033b0:	3b08      	subs	r3, #8
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3306      	adds	r3, #6
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	18d3      	adds	r3, r2, r3
 80033ba:	3304      	adds	r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1dfa      	adds	r2, r7, #7
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	0011      	movs	r1, r2
 80033c4:	2203      	movs	r2, #3
 80033c6:	400a      	ands	r2, r1
 80033c8:	00d2      	lsls	r2, r2, #3
 80033ca:	21ff      	movs	r1, #255	; 0xff
 80033cc:	4091      	lsls	r1, r2
 80033ce:	000a      	movs	r2, r1
 80033d0:	43d2      	mvns	r2, r2
 80033d2:	401a      	ands	r2, r3
 80033d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	401a      	ands	r2, r3
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	0018      	movs	r0, r3
 80033e4:	2303      	movs	r3, #3
 80033e6:	4003      	ands	r3, r0
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ec:	4809      	ldr	r0, [pc, #36]	; (8003414 <__NVIC_SetPriority+0xd8>)
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	001c      	movs	r4, r3
 80033f4:	230f      	movs	r3, #15
 80033f6:	4023      	ands	r3, r4
 80033f8:	3b08      	subs	r3, #8
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	430a      	orrs	r2, r1
 80033fe:	3306      	adds	r3, #6
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	18c3      	adds	r3, r0, r3
 8003404:	3304      	adds	r3, #4
 8003406:	601a      	str	r2, [r3, #0]
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b003      	add	sp, #12
 800340e:	bd90      	pop	{r4, r7, pc}
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1e5a      	subs	r2, r3, #1
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	045b      	lsls	r3, r3, #17
 8003428:	429a      	cmp	r2, r3
 800342a:	d301      	bcc.n	8003430 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342c:	2301      	movs	r3, #1
 800342e:	e010      	b.n	8003452 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <SysTick_Config+0x44>)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	3a01      	subs	r2, #1
 8003436:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003438:	2301      	movs	r3, #1
 800343a:	425b      	negs	r3, r3
 800343c:	2103      	movs	r1, #3
 800343e:	0018      	movs	r0, r3
 8003440:	f7ff ff7c 	bl	800333c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x44>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x44>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b002      	add	sp, #8
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	210f      	movs	r1, #15
 800346c:	187b      	adds	r3, r7, r1
 800346e:	1c02      	adds	r2, r0, #0
 8003470:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	187b      	adds	r3, r7, r1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b25b      	sxtb	r3, r3
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff ff5d 	bl	800333c <__NVIC_SetPriority>
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff ffbf 	bl	8003418 <SysTick_Config>
 800349a:	0003      	movs	r3, r0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034b2:	e153      	b.n	800375c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4091      	lsls	r1, r2
 80034be:	000a      	movs	r2, r1
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d100      	bne.n	80034cc <HAL_GPIO_Init+0x28>
 80034ca:	e144      	b.n	8003756 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x38>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b12      	cmp	r3, #18
 80034da:	d125      	bne.n	8003528 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	58d3      	ldr	r3, [r2, r3]
 80034e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2207      	movs	r2, #7
 80034ee:	4013      	ands	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	409a      	lsls	r2, r3
 80034f6:	0013      	movs	r3, r2
 80034f8:	43da      	mvns	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	220f      	movs	r2, #15
 8003506:	401a      	ands	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2107      	movs	r1, #7
 800350c:	400b      	ands	r3, r1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	409a      	lsls	r2, r3
 8003512:	0013      	movs	r3, r2
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	08da      	lsrs	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3208      	adds	r2, #8
 8003522:	0092      	lsls	r2, r2, #2
 8003524:	6979      	ldr	r1, [r7, #20]
 8003526:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	409a      	lsls	r2, r3
 8003536:	0013      	movs	r3, r2
 8003538:	43da      	mvns	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4013      	ands	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2203      	movs	r2, #3
 8003546:	401a      	ands	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	0013      	movs	r3, r2
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d00b      	beq.n	800357c <HAL_GPIO_Init+0xd8>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d007      	beq.n	800357c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003570:	2b11      	cmp	r3, #17
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b12      	cmp	r3, #18
 800357a:	d130      	bne.n	80035de <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	409a      	lsls	r2, r3
 800358a:	0013      	movs	r3, r2
 800358c:	43da      	mvns	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	4013      	ands	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035b2:	2201      	movs	r2, #1
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	43da      	mvns	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	4013      	ands	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	2201      	movs	r2, #1
 80035ca:	401a      	ands	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d017      	beq.n	8003616 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	409a      	lsls	r2, r3
 80035f4:	0013      	movs	r3, r2
 80035f6:	43da      	mvns	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4013      	ands	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	0013      	movs	r3, r2
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	055b      	lsls	r3, r3, #21
 800361e:	4013      	ands	r3, r2
 8003620:	d100      	bne.n	8003624 <HAL_GPIO_Init+0x180>
 8003622:	e098      	b.n	8003756 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003624:	4a53      	ldr	r2, [pc, #332]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3318      	adds	r3, #24
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	589b      	ldr	r3, [r3, r2]
 8003630:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2203      	movs	r2, #3
 8003636:	4013      	ands	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	220f      	movs	r2, #15
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	43da      	mvns	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	23a0      	movs	r3, #160	; 0xa0
 800364c:	05db      	lsls	r3, r3, #23
 800364e:	429a      	cmp	r2, r3
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x1e2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a48      	ldr	r2, [pc, #288]	; (8003778 <HAL_GPIO_Init+0x2d4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x1de>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a47      	ldr	r2, [pc, #284]	; (800377c <HAL_GPIO_Init+0x2d8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x1da>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a46      	ldr	r2, [pc, #280]	; (8003780 <HAL_GPIO_Init+0x2dc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x1d6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_GPIO_Init+0x2e0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x1d2>
 8003672:	2304      	movs	r3, #4
 8003674:	e008      	b.n	8003688 <HAL_GPIO_Init+0x1e4>
 8003676:	2305      	movs	r3, #5
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x1e4>
 800367a:	2303      	movs	r3, #3
 800367c:	e004      	b.n	8003688 <HAL_GPIO_Init+0x1e4>
 800367e:	2302      	movs	r3, #2
 8003680:	e002      	b.n	8003688 <HAL_GPIO_Init+0x1e4>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_GPIO_Init+0x1e4>
 8003686:	2300      	movs	r3, #0
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	2103      	movs	r1, #3
 800368c:	400a      	ands	r2, r1
 800368e:	00d2      	lsls	r2, r2, #3
 8003690:	4093      	lsls	r3, r2
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003698:	4936      	ldr	r1, [pc, #216]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3318      	adds	r3, #24
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80036a6:	4a33      	ldr	r2, [pc, #204]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	58d3      	ldr	r3, [r2, r3]
 80036ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	43da      	mvns	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4013      	ands	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	025b      	lsls	r3, r3, #9
 80036c0:	4013      	ands	r3, r2
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80036cc:	4929      	ldr	r1, [pc, #164]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036d6:	2384      	movs	r3, #132	; 0x84
 80036d8:	58d3      	ldr	r3, [r2, r3]
 80036da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43da      	mvns	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4013      	ands	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	029b      	lsls	r3, r3, #10
 80036ee:	4013      	ands	r3, r2
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80036fa:	491e      	ldr	r1, [pc, #120]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036fc:	2284      	movs	r2, #132	; 0x84
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003702:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	43da      	mvns	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4013      	ands	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	035b      	lsls	r3, r3, #13
 800371a:	4013      	ands	r3, r2
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	43da      	mvns	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	039b      	lsls	r3, r3, #14
 8003744:	4013      	ands	r3, r2
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3301      	adds	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	40da      	lsrs	r2, r3
 8003764:	1e13      	subs	r3, r2, #0
 8003766:	d000      	beq.n	800376a <HAL_GPIO_Init+0x2c6>
 8003768:	e6a4      	b.n	80034b4 <HAL_GPIO_Init+0x10>
  }
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021800 	.word	0x40021800
 8003778:	50000400 	.word	0x50000400
 800377c:	50000800 	.word	0x50000800
 8003780:	50000c00 	.word	0x50000c00
 8003784:	50001400 	.word	0x50001400

08003788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e082      	b.n	80038a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2241      	movs	r2, #65	; 0x41
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd f89b 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2241      	movs	r2, #65	; 0x41
 80037ba:	2124      	movs	r1, #36	; 0x24
 80037bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	438a      	bics	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4934      	ldr	r1, [pc, #208]	; (80038a8 <HAL_I2C_Init+0x120>)
 80037d8:	400a      	ands	r2, r1
 80037da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4931      	ldr	r1, [pc, #196]	; (80038ac <HAL_I2C_Init+0x124>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d108      	bne.n	8003806 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	0209      	lsls	r1, r1, #8
 8003800:	430a      	orrs	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	e007      	b.n	8003816 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2184      	movs	r1, #132	; 0x84
 8003810:	0209      	lsls	r1, r1, #8
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d104      	bne.n	8003828 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0112      	lsls	r2, r2, #4
 8003826:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	491f      	ldr	r1, [pc, #124]	; (80038b0 <HAL_I2C_Init+0x128>)
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	491a      	ldr	r1, [pc, #104]	; (80038ac <HAL_I2C_Init+0x124>)
 8003844:	400a      	ands	r2, r1
 8003846:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	431a      	orrs	r2, r3
 8003852:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69d9      	ldr	r1, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2101      	movs	r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2241      	movs	r2, #65	; 0x41
 800388c:	2120      	movs	r1, #32
 800388e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2242      	movs	r2, #66	; 0x42
 800389a:	2100      	movs	r1, #0
 800389c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	f0ffffff 	.word	0xf0ffffff
 80038ac:	ffff7fff 	.word	0xffff7fff
 80038b0:	02008000 	.word	0x02008000

080038b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	0008      	movs	r0, r1
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	0019      	movs	r1, r3
 80038c2:	230a      	movs	r3, #10
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	1c02      	adds	r2, r0, #0
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	2308      	movs	r3, #8
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	1c0a      	adds	r2, r1, #0
 80038d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2241      	movs	r2, #65	; 0x41
 80038d6:	5c9b      	ldrb	r3, [r3, r2]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d000      	beq.n	80038e0 <HAL_I2C_Master_Transmit+0x2c>
 80038de:	e0e7      	b.n	8003ab0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_I2C_Master_Transmit+0x3a>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0e1      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1fe>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2240      	movs	r2, #64	; 0x40
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038f6:	f7ff fd17 	bl	8003328 <HAL_GetTick>
 80038fa:	0003      	movs	r3, r0
 80038fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	0219      	lsls	r1, r3, #8
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2319      	movs	r3, #25
 800390a:	2201      	movs	r2, #1
 800390c:	f000 f8fc 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0cc      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2241      	movs	r2, #65	; 0x41
 800391c:	2121      	movs	r1, #33	; 0x21
 800391e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2242      	movs	r2, #66	; 0x42
 8003924:	2110      	movs	r1, #16
 8003926:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2208      	movs	r2, #8
 8003938:	18ba      	adds	r2, r7, r2
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2bff      	cmp	r3, #255	; 0xff
 800394c:	d911      	bls.n	8003972 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	22ff      	movs	r2, #255	; 0xff
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	b2da      	uxtb	r2, r3
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	045c      	lsls	r4, r3, #17
 800395e:	230a      	movs	r3, #10
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	8819      	ldrh	r1, [r3, #0]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	4b55      	ldr	r3, [pc, #340]	; (8003abc <HAL_I2C_Master_Transmit+0x208>)
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	0023      	movs	r3, r4
 800396c:	f000 fa92 	bl	8003e94 <I2C_TransferConfig>
 8003970:	e075      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	b2da      	uxtb	r2, r3
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	049c      	lsls	r4, r3, #18
 8003986:	230a      	movs	r3, #10
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	8819      	ldrh	r1, [r3, #0]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <HAL_I2C_Master_Transmit+0x208>)
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	0023      	movs	r3, r4
 8003994:	f000 fa7e 	bl	8003e94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003998:	e061      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f8f0 	bl	8003b86 <I2C_WaitOnTXISFlagUntilTimeout>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e081      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03a      	beq.n	8003a5e <HAL_I2C_Master_Transmit+0x1aa>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d136      	bne.n	8003a5e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	0013      	movs	r3, r2
 80039fa:	2200      	movs	r2, #0
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	f000 f883 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e053      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2bff      	cmp	r3, #255	; 0xff
 8003a12:	d911      	bls.n	8003a38 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	22ff      	movs	r2, #255	; 0xff
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	045c      	lsls	r4, r3, #17
 8003a24:	230a      	movs	r3, #10
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	8819      	ldrh	r1, [r3, #0]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	0023      	movs	r3, r4
 8003a32:	f000 fa2f 	bl	8003e94 <I2C_TransferConfig>
 8003a36:	e012      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	049c      	lsls	r4, r3, #18
 8003a4c:	230a      	movs	r3, #10
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	8819      	ldrh	r1, [r3, #0]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	2300      	movs	r3, #0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	0023      	movs	r3, r4
 8003a5a:	f000 fa1b 	bl	8003e94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d198      	bne.n	800399a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f8c8 	bl	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a74:	1e03      	subs	r3, r0, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e01a      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2220      	movs	r2, #32
 8003a82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <HAL_I2C_Master_Transmit+0x20c>)
 8003a90:	400a      	ands	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2241      	movs	r2, #65	; 0x41
 8003a98:	2120      	movs	r1, #32
 8003a9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2242      	movs	r2, #66	; 0x42
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e000      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
  }
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b007      	add	sp, #28
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	80002000 	.word	0x80002000
 8003ac0:	fe00e800 	.word	0xfe00e800

08003ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d007      	beq.n	8003b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2101      	movs	r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	619a      	str	r2, [r3, #24]
  }
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b18:	e021      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	d01e      	beq.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7ff fc02 	bl	8003328 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2241      	movs	r2, #65	; 0x41
 8003b46:	2120      	movs	r1, #32
 8003b48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2242      	movs	r2, #66	; 0x42
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	2100      	movs	r1, #0
 8003b58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00f      	b.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	425a      	negs	r2, r3
 8003b6e:	4153      	adcs	r3, r2
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	001a      	movs	r2, r3
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d0ce      	beq.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b92:	e02b      	b.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 f86e 	bl	8003c7c <I2C_IsErrorOccurred>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e029      	b.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	d01e      	beq.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7ff fbbb 	bl	8003328 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	2220      	movs	r2, #32
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2241      	movs	r2, #65	; 0x41
 8003bd4:	2120      	movs	r1, #32
 8003bd6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2242      	movs	r2, #66	; 0x42
 8003bdc:	2100      	movs	r1, #0
 8003bde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e007      	b.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d1cc      	bne.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b004      	add	sp, #16
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c10:	e028      	b.n	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f82f 	bl	8003c7c <I2C_IsErrorOccurred>
 8003c1e:	1e03      	subs	r3, r0, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e026      	b.n	8003c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7ff fb7f 	bl	8003328 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d113      	bne.n	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	2220      	movs	r2, #32
 8003c42:	431a      	orrs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2241      	movs	r2, #65	; 0x41
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2242      	movs	r2, #66	; 0x42
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e007      	b.n	8003c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d1cf      	bne.n	8003c12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b08b      	sub	sp, #44	; 0x2c
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2327      	movs	r3, #39	; 0x27
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d100      	bne.n	8003caa <I2C_IsErrorOccurred+0x2e>
 8003ca8:	e08e      	b.n	8003dc8 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2210      	movs	r2, #16
 8003cb0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cb2:	e06c      	b.n	8003d8e <I2C_IsErrorOccurred+0x112>
 8003cb4:	2427      	movs	r4, #39	; 0x27
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	193a      	adds	r2, r7, r4
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d064      	beq.n	8003d8e <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7ff fb30 	bl	8003328 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d306      	bcc.n	8003ce2 <I2C_IsErrorOccurred+0x66>
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	193a      	adds	r2, r7, r4
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d155      	bne.n	8003d8e <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	01db      	lsls	r3, r3, #7
 8003cec:	4013      	ands	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cf0:	2013      	movs	r0, #19
 8003cf2:	183b      	adds	r3, r7, r0
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	2142      	movs	r1, #66	; 0x42
 8003cf8:	5c52      	ldrb	r2, [r2, r1]
 8003cfa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	401a      	ands	r2, r3
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d137      	bne.n	8003d80 <I2C_IsErrorOccurred+0x104>
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	01db      	lsls	r3, r3, #7
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d032      	beq.n	8003d80 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d02e      	beq.n	8003d80 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	01c9      	lsls	r1, r1, #7
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d34:	f7ff faf8 	bl	8003328 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	e020      	b.n	8003d80 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d3e:	f7ff faf3 	bl	8003328 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2027      	movs	r0, #39	; 0x27
 8003d4a:	183a      	adds	r2, r7, r0
 8003d4c:	1839      	adds	r1, r7, r0
 8003d4e:	7809      	ldrb	r1, [r1, #0]
 8003d50:	7011      	strb	r1, [r2, #0]
 8003d52:	2b19      	cmp	r3, #25
 8003d54:	d914      	bls.n	8003d80 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2241      	movs	r2, #65	; 0x41
 8003d66:	2120      	movs	r1, #32
 8003d68:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2242      	movs	r2, #66	; 0x42
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2240      	movs	r2, #64	; 0x40
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8003d7a:	183b      	adds	r3, r7, r0
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2220      	movs	r2, #32
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d1d7      	bne.n	8003d3e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2220      	movs	r2, #32
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d004      	beq.n	8003da6 <I2C_IsErrorOccurred+0x12a>
 8003d9c:	2327      	movs	r3, #39	; 0x27
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d086      	beq.n	8003cb4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003da6:	2327      	movs	r3, #39	; 0x27
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2220      	movs	r2, #32
 8003db6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2204      	movs	r2, #4
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dc0:	2327      	movs	r3, #39	; 0x27
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d00c      	beq.n	8003df4 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	4313      	orrs	r3, r2
 8003de0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	0052      	lsls	r2, r2, #1
 8003dea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dec:	2327      	movs	r3, #39	; 0x27
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d00c      	beq.n	8003e18 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2208      	movs	r2, #8
 8003e02:	4313      	orrs	r3, r2
 8003e04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	00d2      	lsls	r2, r2, #3
 8003e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e10:	2327      	movs	r3, #39	; 0x27
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d00c      	beq.n	8003e3c <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	2202      	movs	r2, #2
 8003e26:	4313      	orrs	r3, r2
 8003e28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e34:	2327      	movs	r3, #39	; 0x27
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003e3c:	2327      	movs	r3, #39	; 0x27
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01d      	beq.n	8003e82 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7ff fe3b 	bl	8003ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	490d      	ldr	r1, [pc, #52]	; (8003e90 <I2C_IsErrorOccurred+0x214>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2241      	movs	r2, #65	; 0x41
 8003e6e:	2120      	movs	r1, #32
 8003e70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2242      	movs	r2, #66	; 0x42
 8003e76:	2100      	movs	r1, #0
 8003e78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003e82:	2327      	movs	r3, #39	; 0x27
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	781b      	ldrb	r3, [r3, #0]
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b00b      	add	sp, #44	; 0x2c
 8003e8e:	bd90      	pop	{r4, r7, pc}
 8003e90:	fe00e800 	.word	0xfe00e800

08003e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	0008      	movs	r0, r1
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	240a      	movs	r4, #10
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	1c02      	adds	r2, r0, #0
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	2009      	movs	r0, #9
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	1c0a      	adds	r2, r1, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	059b      	lsls	r3, r3, #22
 8003eb8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eba:	183b      	adds	r3, r7, r0
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	0419      	lsls	r1, r3, #16
 8003ec0:	23ff      	movs	r3, #255	; 0xff
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ec6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ede:	0d51      	lsrs	r1, r2, #21
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	00d2      	lsls	r2, r2, #3
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	4907      	ldr	r1, [pc, #28]	; (8003f04 <I2C_TransferConfig+0x70>)
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	43d2      	mvns	r2, r2
 8003eec:	401a      	ands	r2, r3
 8003eee:	0011      	movs	r1, r2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b007      	add	sp, #28
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	03ff63ff 	.word	0x03ff63ff

08003f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2241      	movs	r2, #65	; 0x41
 8003f16:	5c9b      	ldrb	r3, [r3, r2]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d138      	bne.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2240      	movs	r2, #64	; 0x40
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e032      	b.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2241      	movs	r2, #65	; 0x41
 8003f38:	2124      	movs	r1, #36	; 0x24
 8003f3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2101      	movs	r1, #1
 8003f48:	438a      	bics	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4911      	ldr	r1, [pc, #68]	; (8003f9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2241      	movs	r2, #65	; 0x41
 8003f80:	2120      	movs	r1, #32
 8003f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b002      	add	sp, #8
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	ffffefff 	.word	0xffffefff

08003fa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2241      	movs	r2, #65	; 0x41
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d139      	bne.n	800402a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2240      	movs	r2, #64	; 0x40
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e033      	b.n	800402c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2241      	movs	r2, #65	; 0x41
 8003fd0:	2124      	movs	r1, #36	; 0x24
 8003fd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	430a      	orrs	r2, r1
 8004014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2241      	movs	r2, #65	; 0x41
 800401a:	2120      	movs	r1, #32
 800401c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2240      	movs	r2, #64	; 0x40
 8004022:	2100      	movs	r1, #0
 8004024:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b004      	add	sp, #16
 8004032:	bd80      	pop	{r7, pc}
 8004034:	fffff0ff 	.word	0xfffff0ff

08004038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e1e5      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2201      	movs	r2, #1
 8004050:	4013      	ands	r3, r2
 8004052:	d100      	bne.n	8004056 <HAL_RCC_OscConfig+0x1e>
 8004054:	e06f      	b.n	8004136 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004056:	4bc4      	ldr	r3, [pc, #784]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2238      	movs	r2, #56	; 0x38
 800405c:	4013      	ands	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d10b      	bne.n	800407e <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004066:	4bc0      	ldr	r3, [pc, #768]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	4013      	ands	r3, r2
 8004070:	d061      	beq.n	8004136 <HAL_RCC_OscConfig+0xfe>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d15d      	bne.n	8004136 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1cb      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	025b      	lsls	r3, r3, #9
 8004086:	429a      	cmp	r2, r3
 8004088:	d107      	bne.n	800409a <HAL_RCC_OscConfig+0x62>
 800408a:	4bb7      	ldr	r3, [pc, #732]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4bb6      	ldr	r3, [pc, #728]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	0249      	lsls	r1, r1, #9
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e020      	b.n	80040dc <HAL_RCC_OscConfig+0xa4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	23a0      	movs	r3, #160	; 0xa0
 80040a0:	02db      	lsls	r3, r3, #11
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d10e      	bne.n	80040c4 <HAL_RCC_OscConfig+0x8c>
 80040a6:	4bb0      	ldr	r3, [pc, #704]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4baf      	ldr	r3, [pc, #700]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	02c9      	lsls	r1, r1, #11
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	4bac      	ldr	r3, [pc, #688]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4bab      	ldr	r3, [pc, #684]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	0249      	lsls	r1, r1, #9
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xa4>
 80040c4:	4ba8      	ldr	r3, [pc, #672]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4ba7      	ldr	r3, [pc, #668]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040ca:	49a8      	ldr	r1, [pc, #672]	; (800436c <HAL_RCC_OscConfig+0x334>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	4ba5      	ldr	r3, [pc, #660]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4ba4      	ldr	r3, [pc, #656]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80040d6:	49a6      	ldr	r1, [pc, #664]	; (8004370 <HAL_RCC_OscConfig+0x338>)
 80040d8:	400a      	ands	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d014      	beq.n	800410e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7ff f920 	bl	8003328 <HAL_GetTick>
 80040e8:	0003      	movs	r3, r0
 80040ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ee:	f7ff f91b 	bl	8003328 <HAL_GetTick>
 80040f2:	0002      	movs	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b64      	cmp	r3, #100	; 0x64
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e18a      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004100:	4b99      	ldr	r3, [pc, #612]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	4013      	ands	r3, r2
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0xb6>
 800410c:	e013      	b.n	8004136 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7ff f90b 	bl	8003328 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004118:	f7ff f906 	bl	8003328 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e175      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412a:	4b8f      	ldr	r3, [pc, #572]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	4013      	ands	r3, r2
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d100      	bne.n	8004142 <HAL_RCC_OscConfig+0x10a>
 8004140:	e08c      	b.n	800425c <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4b89      	ldr	r3, [pc, #548]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2238      	movs	r2, #56	; 0x38
 8004148:	4013      	ands	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d135      	bne.n	80041be <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004152:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4013      	ands	r3, r2
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x132>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e155      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4a81      	ldr	r2, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x33c>)
 8004170:	4013      	ands	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d112      	bne.n	80041ac <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004186:	4b78      	ldr	r3, [pc, #480]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7b      	ldr	r2, [pc, #492]	; (8004378 <HAL_RCC_OscConfig+0x340>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	4b74      	ldr	r3, [pc, #464]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800419a:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	0adb      	lsrs	r3, r3, #11
 80041a0:	2207      	movs	r2, #7
 80041a2:	4013      	ands	r3, r2
 80041a4:	4a75      	ldr	r2, [pc, #468]	; (800437c <HAL_RCC_OscConfig+0x344>)
 80041a6:	40da      	lsrs	r2, r3
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <HAL_RCC_OscConfig+0x348>)
 80041aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041ac:	4b75      	ldr	r3, [pc, #468]	; (8004384 <HAL_RCC_OscConfig+0x34c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7ff f85f 	bl	8003274 <HAL_InitTick>
 80041b6:	1e03      	subs	r3, r0, #0
 80041b8:	d050      	beq.n	800425c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e12b      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d030      	beq.n	8004228 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041c6:	4b68      	ldr	r3, [pc, #416]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6b      	ldr	r2, [pc, #428]	; (8004378 <HAL_RCC_OscConfig+0x340>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	4b64      	ldr	r3, [pc, #400]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80041da:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b62      	ldr	r3, [pc, #392]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	0049      	lsls	r1, r1, #1
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7ff f89e 	bl	8003328 <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7ff f899 	bl	8003328 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e108      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004204:	4b58      	ldr	r3, [pc, #352]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4013      	ands	r3, r2
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b55      	ldr	r3, [pc, #340]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a57      	ldr	r2, [pc, #348]	; (8004374 <HAL_RCC_OscConfig+0x33c>)
 8004216:	4013      	ands	r3, r2
 8004218:	0019      	movs	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	4b51      	ldr	r3, [pc, #324]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	e019      	b.n	800425c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800422e:	4956      	ldr	r1, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x350>)
 8004230:	400a      	ands	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7ff f878 	bl	8003328 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423e:	f7ff f873 	bl	8003328 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e0e2      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004250:	4b45      	ldr	r3, [pc, #276]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4013      	ands	r3, r2
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	4013      	ands	r3, r2
 8004264:	d047      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004266:	4b40      	ldr	r3, [pc, #256]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2238      	movs	r2, #56	; 0x38
 800426c:	4013      	ands	r3, r2
 800426e:	2b18      	cmp	r3, #24
 8004270:	d10a      	bne.n	8004288 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	2202      	movs	r2, #2
 8004278:	4013      	ands	r3, r2
 800427a:	d03c      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2be>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d138      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0c6      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d019      	beq.n	80042c4 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004296:	2101      	movs	r1, #1
 8004298:	430a      	orrs	r2, r1
 800429a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7ff f844 	bl	8003328 <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a6:	f7ff f83f 	bl	8003328 <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0ae      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80042ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d0f1      	beq.n	80042a6 <HAL_RCC_OscConfig+0x26e>
 80042c2:	e018      	b.n	80042f6 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042c4:	4b28      	ldr	r3, [pc, #160]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80042c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c8:	4b27      	ldr	r3, [pc, #156]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	438a      	bics	r2, r1
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7ff f82a 	bl	8003328 <HAL_GetTick>
 80042d4:	0003      	movs	r3, r0
 80042d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7ff f825 	bl	8003328 <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e094      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	2202      	movs	r2, #2
 80042f2:	4013      	ands	r3, r2
 80042f4:	d1f1      	bne.n	80042da <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4013      	ands	r3, r2
 80042fe:	d100      	bne.n	8004302 <HAL_RCC_OscConfig+0x2ca>
 8004300:	e088      	b.n	8004414 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004302:	230f      	movs	r3, #15
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2238      	movs	r2, #56	; 0x38
 8004310:	4013      	ands	r3, r2
 8004312:	2b20      	cmp	r3, #32
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x2ea>
 8004320:	e078      	b.n	8004414 <HAL_RCC_OscConfig+0x3dc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d000      	beq.n	800432c <HAL_RCC_OscConfig+0x2f4>
 800432a:	e073      	b.n	8004414 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e072      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x30e>
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800433a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800433e:	2101      	movs	r1, #1
 8004340:	430a      	orrs	r2, r1
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c
 8004344:	e02e      	b.n	80043a4 <HAL_RCC_OscConfig+0x36c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b05      	cmp	r3, #5
 800434c:	d11e      	bne.n	800438c <HAL_RCC_OscConfig+0x354>
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004354:	2104      	movs	r1, #4
 8004356:	430a      	orrs	r2, r1
 8004358:	65da      	str	r2, [r3, #92]	; 0x5c
 800435a:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 800435c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800435e:	4b02      	ldr	r3, [pc, #8]	; (8004368 <HAL_RCC_OscConfig+0x330>)
 8004360:	2101      	movs	r1, #1
 8004362:	430a      	orrs	r2, r1
 8004364:	65da      	str	r2, [r3, #92]	; 0x5c
 8004366:	e01d      	b.n	80043a4 <HAL_RCC_OscConfig+0x36c>
 8004368:	40021000 	.word	0x40021000
 800436c:	fffeffff 	.word	0xfffeffff
 8004370:	fffbffff 	.word	0xfffbffff
 8004374:	ffff80ff 	.word	0xffff80ff
 8004378:	ffffc7ff 	.word	0xffffc7ff
 800437c:	02dc6c00 	.word	0x02dc6c00
 8004380:	20000000 	.word	0x20000000
 8004384:	2000008c 	.word	0x2000008c
 8004388:	fffffeff 	.word	0xfffffeff
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 800438e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004390:	4b23      	ldr	r3, [pc, #140]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 8004392:	2101      	movs	r1, #1
 8004394:	438a      	bics	r2, r1
 8004396:	65da      	str	r2, [r3, #92]	; 0x5c
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 800439a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 800439e:	2104      	movs	r1, #4
 80043a0:	438a      	bics	r2, r1
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d014      	beq.n	80043d6 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe ffbc 	bl	8003328 <HAL_GetTick>
 80043b0:	0003      	movs	r3, r0
 80043b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80043b4:	e009      	b.n	80043ca <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe ffb7 	bl	8003328 <HAL_GetTick>
 80043ba:	0002      	movs	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_RCC_OscConfig+0x3ec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e025      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	2202      	movs	r2, #2
 80043d0:	4013      	ands	r3, r2
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x37e>
 80043d4:	e013      	b.n	80043fe <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe ffa7 	bl	8003328 <HAL_GetTick>
 80043da:	0003      	movs	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80043de:	e009      	b.n	80043f4 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fe ffa2 	bl	8003328 <HAL_GetTick>
 80043e4:	0002      	movs	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <HAL_RCC_OscConfig+0x3ec>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e010      	b.n	8004416 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2202      	movs	r2, #2
 80043fa:	4013      	ands	r3, r2
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043fe:	230f      	movs	r3, #15
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 800440a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCC_OscConfig+0x3e8>)
 800440e:	4906      	ldr	r1, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x3f0>)
 8004410:	400a      	ands	r2, r1
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b006      	add	sp, #24
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	40021000 	.word	0x40021000
 8004424:	00001388 	.word	0x00001388
 8004428:	efffffff 	.word	0xefffffff

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0e9      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b76      	ldr	r3, [pc, #472]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2207      	movs	r2, #7
 8004446:	4013      	ands	r3, r2
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d91e      	bls.n	800448c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b73      	ldr	r3, [pc, #460]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2207      	movs	r2, #7
 8004454:	4393      	bics	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	4b70      	ldr	r3, [pc, #448]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004460:	f7fe ff62 	bl	8003328 <HAL_GetTick>
 8004464:	0003      	movs	r3, r0
 8004466:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004468:	e009      	b.n	800447e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446a:	f7fe ff5d 	bl	8003328 <HAL_GetTick>
 800446e:	0002      	movs	r2, r0
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	4a6a      	ldr	r2, [pc, #424]	; (8004620 <HAL_RCC_ClockConfig+0x1f4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0ca      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800447e:	4b67      	ldr	r3, [pc, #412]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2207      	movs	r2, #7
 8004484:	4013      	ands	r3, r2
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d1ee      	bne.n	800446a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2202      	movs	r2, #2
 8004492:	4013      	ands	r3, r2
 8004494:	d017      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2204      	movs	r2, #4
 800449c:	4013      	ands	r3, r2
 800449e:	d008      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044a0:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a60      	ldr	r2, [pc, #384]	; (8004628 <HAL_RCC_ClockConfig+0x1fc>)
 80044a6:	401a      	ands	r2, r3
 80044a8:	4b5e      	ldr	r3, [pc, #376]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044aa:	21b0      	movs	r1, #176	; 0xb0
 80044ac:	0109      	lsls	r1, r1, #4
 80044ae:	430a      	orrs	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a5d      	ldr	r2, [pc, #372]	; (800462c <HAL_RCC_ClockConfig+0x200>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b58      	ldr	r3, [pc, #352]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	d055      	beq.n	800457c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80044d0:	4b54      	ldr	r3, [pc, #336]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	221c      	movs	r2, #28
 80044d6:	4393      	bics	r3, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	4b51      	ldr	r3, [pc, #324]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ec:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	4013      	ands	r3, r2
 80044f6:	d11f      	bne.n	8004538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e08b      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004504:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4013      	ands	r3, r2
 800450e:	d113      	bne.n	8004538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e07f      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d106      	bne.n	800452a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800451c:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	2202      	movs	r2, #2
 8004522:	4013      	ands	r3, r2
 8004524:	d108      	bne.n	8004538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e074      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800452a:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e06d      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004538:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2207      	movs	r2, #7
 800453e:	4393      	bics	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454c:	f7fe feec 	bl	8003328 <HAL_GetTick>
 8004550:	0003      	movs	r3, r0
 8004552:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004554:	e009      	b.n	800456a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004556:	f7fe fee7 	bl	8003328 <HAL_GetTick>
 800455a:	0002      	movs	r2, r0
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <HAL_RCC_ClockConfig+0x1f4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e054      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2238      	movs	r2, #56	; 0x38
 8004570:	401a      	ands	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	429a      	cmp	r2, r3
 800457a:	d1ec      	bne.n	8004556 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b27      	ldr	r3, [pc, #156]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2207      	movs	r2, #7
 8004582:	4013      	ands	r3, r2
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d21e      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2207      	movs	r2, #7
 8004590:	4393      	bics	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800459c:	f7fe fec4 	bl	8003328 <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045a4:	e009      	b.n	80045ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a6:	f7fe febf 	bl	8003328 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <HAL_RCC_ClockConfig+0x1f4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e02c      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ba:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2207      	movs	r2, #7
 80045c0:	4013      	ands	r3, r2
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1ee      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2204      	movs	r2, #4
 80045ce:	4013      	ands	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_RCC_ClockConfig+0x204>)
 80045d8:	4013      	ands	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045e6:	f000 f82b 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045ea:	0001      	movs	r1, r0
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	220f      	movs	r2, #15
 80045f4:	401a      	ands	r2, r3
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCC_ClockConfig+0x208>)
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	58d3      	ldr	r3, [r2, r3]
 80045fc:	221f      	movs	r2, #31
 80045fe:	4013      	ands	r3, r2
 8004600:	000a      	movs	r2, r1
 8004602:	40da      	lsrs	r2, r3
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <HAL_RCC_ClockConfig+0x20c>)
 8004606:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <HAL_RCC_ClockConfig+0x210>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0018      	movs	r0, r3
 800460e:	f7fe fe31 	bl	8003274 <HAL_InitTick>
 8004612:	0003      	movs	r3, r0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40022000 	.word	0x40022000
 8004620:	00001388 	.word	0x00001388
 8004624:	40021000 	.word	0x40021000
 8004628:	ffff84ff 	.word	0xffff84ff
 800462c:	fffff0ff 	.word	0xfffff0ff
 8004630:	ffff8fff 	.word	0xffff8fff
 8004634:	08006a4c 	.word	0x08006a4c
 8004638:	20000000 	.word	0x20000000
 800463c:	2000008c 	.word	0x2000008c

08004640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2238      	movs	r2, #56	; 0x38
 800464c:	4013      	ands	r3, r2
 800464e:	d10f      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0adb      	lsrs	r3, r3, #11
 8004656:	2207      	movs	r2, #7
 8004658:	4013      	ands	r3, r2
 800465a:	2201      	movs	r2, #1
 800465c:	409a      	lsls	r2, r3
 800465e:	0013      	movs	r3, r2
 8004660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	4815      	ldr	r0, [pc, #84]	; (80046bc <HAL_RCC_GetSysClockFreq+0x7c>)
 8004666:	f7fb fd59 	bl	800011c <__udivsi3>
 800466a:	0003      	movs	r3, r0
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e01e      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2238      	movs	r2, #56	; 0x38
 8004676:	4013      	ands	r3, r2
 8004678:	2b08      	cmp	r3, #8
 800467a:	d102      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x80>)
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e015      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2238      	movs	r2, #56	; 0x38
 8004688:	4013      	ands	r3, r2
 800468a:	2b20      	cmp	r3, #32
 800468c:	d103      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	e00b      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2238      	movs	r2, #56	; 0x38
 800469c:	4013      	ands	r3, r2
 800469e:	2b18      	cmp	r3, #24
 80046a0:	d103      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80046a2:	23fa      	movs	r3, #250	; 0xfa
 80046a4:	01db      	lsls	r3, r3, #7
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e001      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80046ae:	687b      	ldr	r3, [r7, #4]
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	02dc6c00 	.word	0x02dc6c00
 80046c0:	007a1200 	.word	0x007a1200

080046c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80046cc:	2313      	movs	r3, #19
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d4:	2312      	movs	r3, #18
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	4013      	ands	r3, r2
 80046e6:	d100      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80046e8:	e079      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ea:	2011      	movs	r0, #17
 80046ec:	183b      	adds	r3, r7, r0
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f2:	4b64      	ldr	r3, [pc, #400]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	055b      	lsls	r3, r3, #21
 80046fa:	4013      	ands	r3, r2
 80046fc:	d110      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fe:	4b61      	ldr	r3, [pc, #388]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004702:	4b60      	ldr	r3, [pc, #384]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	0549      	lsls	r1, r1, #21
 8004708:	430a      	orrs	r2, r1
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
 800470c:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800470e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	055b      	lsls	r3, r3, #21
 8004714:	4013      	ands	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471a:	183b      	adds	r3, r7, r0
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004720:	4b58      	ldr	r3, [pc, #352]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004724:	23c0      	movs	r3, #192	; 0xc0
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4013      	ands	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d019      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	429a      	cmp	r2, r3
 800473a:	d014      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800473c:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	4a51      	ldr	r2, [pc, #324]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004742:	4013      	ands	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004746:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004748:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800474a:	4b4e      	ldr	r3, [pc, #312]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0249      	lsls	r1, r1, #9
 8004750:	430a      	orrs	r2, r1
 8004752:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004754:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004756:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004758:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800475a:	494c      	ldr	r1, [pc, #304]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800475c:	400a      	ands	r2, r1
 800475e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004760:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2201      	movs	r2, #1
 800476a:	4013      	ands	r3, r2
 800476c:	d016      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fe fddb 	bl	8003328 <HAL_GetTick>
 8004772:	0003      	movs	r3, r0
 8004774:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004776:	e00c      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fe fdd6 	bl	8003328 <HAL_GetTick>
 800477c:	0002      	movs	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	4a43      	ldr	r2, [pc, #268]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d904      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8004788:	2313      	movs	r3, #19
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2203      	movs	r2, #3
 800478e:	701a      	strb	r2, [r3, #0]
          break;
 8004790:	e004      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004792:	4b3c      	ldr	r3, [pc, #240]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	2202      	movs	r2, #2
 8004798:	4013      	ands	r3, r2
 800479a:	d0ed      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800479c:	2313      	movs	r3, #19
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047aa:	4a37      	ldr	r2, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047b6:	430a      	orrs	r2, r1
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80047ba:	e005      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	2312      	movs	r3, #18
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2213      	movs	r2, #19
 80047c2:	18ba      	adds	r2, r7, r2
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c8:	2311      	movs	r3, #17
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d8:	492e      	ldr	r1, [pc, #184]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	400a      	ands	r2, r1
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4013      	ands	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e8:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	2203      	movs	r2, #3
 80047ee:	4393      	bics	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2240      	movs	r2, #64	; 0x40
 8004802:	4013      	ands	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	4a23      	ldr	r2, [pc, #140]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004816:	430a      	orrs	r2, r1
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	01db      	lsls	r3, r3, #7
 8004822:	4013      	ands	r3, r2
 8004824:	d008      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	0899      	lsrs	r1, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004834:	430a      	orrs	r2, r1
 8004836:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	4013      	ands	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800484a:	4013      	ands	r3, r2
 800484c:	0019      	movs	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004854:	430a      	orrs	r2, r1
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	da09      	bge.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004860:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	22e0      	movs	r2, #224	; 0xe0
 8004866:	4393      	bics	r3, r2
 8004868:	0019      	movs	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004874:	2312      	movs	r3, #18
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	781b      	ldrb	r3, [r3, #0]
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b006      	add	sp, #24
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	40021000 	.word	0x40021000
 8004888:	fffffcff 	.word	0xfffffcff
 800488c:	fffeffff 	.word	0xfffeffff
 8004890:	00001388 	.word	0x00001388
 8004894:	efffffff 	.word	0xefffffff
 8004898:	ffffcfff 	.word	0xffffcfff
 800489c:	ffff3fff 	.word	0xffff3fff

080048a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0a8      	b.n	8004a04 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	2382      	movs	r3, #130	; 0x82
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d009      	beq.n	80048da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	61da      	str	r2, [r3, #28]
 80048cc:	e005      	b.n	80048da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	225d      	movs	r2, #93	; 0x5d
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d107      	bne.n	80048fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	225c      	movs	r2, #92	; 0x5c
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7fc f9e0 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	225d      	movs	r2, #93	; 0x5d
 8004900:	2102      	movs	r1, #2
 8004902:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2140      	movs	r1, #64	; 0x40
 8004910:	438a      	bics	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	23e0      	movs	r3, #224	; 0xe0
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	429a      	cmp	r2, r3
 800491e:	d902      	bls.n	8004926 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e002      	b.n	800492c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	015b      	lsls	r3, r3, #5
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	23f0      	movs	r3, #240	; 0xf0
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	429a      	cmp	r2, r3
 8004936:	d008      	beq.n	800494a <HAL_SPI_Init+0xaa>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	23e0      	movs	r3, #224	; 0xe0
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	429a      	cmp	r2, r3
 8004942:	d002      	beq.n	800494a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	2382      	movs	r3, #130	; 0x82
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	401a      	ands	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	2384      	movs	r3, #132	; 0x84
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	400b      	ands	r3, r1
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2102      	movs	r1, #2
 8004966:	400b      	ands	r3, r1
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2101      	movs	r1, #1
 8004970:	400b      	ands	r3, r1
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6999      	ldr	r1, [r3, #24]
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	400b      	ands	r3, r1
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2138      	movs	r1, #56	; 0x38
 8004986:	400b      	ands	r3, r1
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	400b      	ands	r3, r1
 8004992:	431a      	orrs	r2, r3
 8004994:	0011      	movs	r1, r2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	401a      	ands	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	2204      	movs	r2, #4
 80049b0:	401a      	ands	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2110      	movs	r1, #16
 80049b8:	400b      	ands	r3, r1
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	2108      	movs	r1, #8
 80049c2:	400b      	ands	r3, r1
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	23f0      	movs	r3, #240	; 0xf0
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	400b      	ands	r3, r1
 80049d0:	431a      	orrs	r2, r3
 80049d2:	0011      	movs	r1, r2
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	015b      	lsls	r3, r3, #5
 80049da:	401a      	ands	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4907      	ldr	r1, [pc, #28]	; (8004a0c <HAL_SPI_Init+0x16c>)
 80049f0:	400a      	ands	r2, r1
 80049f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	225d      	movs	r2, #93	; 0x5d
 80049fe:	2101      	movs	r1, #1
 8004a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	fffff7ff 	.word	0xfffff7ff

08004a10 <LL_EXTI_EnableIT_0_31>:
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004a18:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <LL_EXTI_EnableIT_0_31+0x20>)
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	58d2      	ldr	r2, [r2, r3]
 8004a1e:	4904      	ldr	r1, [pc, #16]	; (8004a30 <LL_EXTI_EnableIT_0_31+0x20>)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	508b      	str	r3, [r1, r2]
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021800 	.word	0x40021800

08004a34 <LL_EXTI_DisableIT_0_31>:
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004a3c:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <LL_EXTI_DisableIT_0_31+0x24>)
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	58d3      	ldr	r3, [r2, r3]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	43d2      	mvns	r2, r2
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <LL_EXTI_DisableIT_0_31+0x24>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	508b      	str	r3, [r1, r2]
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b002      	add	sp, #8
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	40021800 	.word	0x40021800

08004a5c <LL_EXTI_EnableEvent_0_31>:
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004a66:	2384      	movs	r3, #132	; 0x84
 8004a68:	58d2      	ldr	r2, [r2, r3]
 8004a6a:	4904      	ldr	r1, [pc, #16]	; (8004a7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	2284      	movs	r2, #132	; 0x84
 8004a72:	508b      	str	r3, [r1, r2]
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021800 	.word	0x40021800

08004a80 <LL_EXTI_DisableEvent_0_31>:
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004a88:	4a06      	ldr	r2, [pc, #24]	; (8004aa4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004a8a:	2384      	movs	r3, #132	; 0x84
 8004a8c:	58d3      	ldr	r3, [r2, r3]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	43d2      	mvns	r2, r2
 8004a92:	4904      	ldr	r1, [pc, #16]	; (8004aa4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	2284      	movs	r2, #132	; 0x84
 8004a98:	508b      	str	r3, [r1, r2]
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	40021800 	.word	0x40021800

08004aa8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021800 	.word	0x40021800

08004ac8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	43d9      	mvns	r1, r3
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b002      	add	sp, #8
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	40021800 	.word	0x40021800

08004aec <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b002      	add	sp, #8
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021800 	.word	0x40021800

08004b0c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	43d9      	mvns	r1, r3
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004b1e:	400a      	ands	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	40021800 	.word	0x40021800

08004b30 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004b38:	230f      	movs	r3, #15
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d100      	bne.n	8004b4a <LL_EXTI_Init+0x1a>
 8004b48:	e068      	b.n	8004c1c <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <LL_EXTI_Init+0x24>
 8004b52:	e06e      	b.n	8004c32 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	795b      	ldrb	r3, [r3, #5]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d01b      	beq.n	8004b94 <LL_EXTI_Init+0x64>
 8004b5c:	dc25      	bgt.n	8004baa <LL_EXTI_Init+0x7a>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <LL_EXTI_Init+0x38>
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d00b      	beq.n	8004b7e <LL_EXTI_Init+0x4e>
 8004b66:	e020      	b.n	8004baa <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7ff ff87 	bl	8004a80 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff ff4a 	bl	8004a10 <LL_EXTI_EnableIT_0_31>
          break;
 8004b7c:	e01a      	b.n	8004bb4 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7ff ff56 	bl	8004a34 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7ff ff65 	bl	8004a5c <LL_EXTI_EnableEvent_0_31>
          break;
 8004b92:	e00f      	b.n	8004bb4 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7ff ff39 	bl	8004a10 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7ff ff5a 	bl	8004a5c <LL_EXTI_EnableEvent_0_31>
          break;
 8004ba8:	e004      	b.n	8004bb4 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8004baa:	230f      	movs	r3, #15
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
          break;
 8004bb2:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	799b      	ldrb	r3, [r3, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03a      	beq.n	8004c32 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	799b      	ldrb	r3, [r3, #6]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d01b      	beq.n	8004bfc <LL_EXTI_Init+0xcc>
 8004bc4:	dc25      	bgt.n	8004c12 <LL_EXTI_Init+0xe2>
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d002      	beq.n	8004bd0 <LL_EXTI_Init+0xa0>
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d00b      	beq.n	8004be6 <LL_EXTI_Init+0xb6>
 8004bce:	e020      	b.n	8004c12 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff ff99 	bl	8004b0c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f7ff ff62 	bl	8004aa8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004be4:	e026      	b.n	8004c34 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7ff ff6c 	bl	8004ac8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7ff ff79 	bl	8004aec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004bfa:	e01b      	b.n	8004c34 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7ff ff51 	bl	8004aa8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff ff6e 	bl	8004aec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004c10:	e010      	b.n	8004c34 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8004c12:	230f      	movs	r3, #15
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
            break;
 8004c1a:	e00b      	b.n	8004c34 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7ff ff07 	bl	8004a34 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f7ff ff28 	bl	8004a80 <LL_EXTI_DisableEvent_0_31>
 8004c30:	e000      	b.n	8004c34 <LL_EXTI_Init+0x104>
      }
 8004c32:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8004c34:	230f      	movs	r3, #15
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	781b      	ldrb	r3, [r3, #0]
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b004      	add	sp, #16
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <LL_GPIO_SetPinMode>:
{
 8004c42:	b590      	push	{r4, r7, lr}
 8004c44:	b08d      	sub	sp, #52	; 0x34
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681c      	ldr	r4, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004c56:	231f      	movs	r3, #31
 8004c58:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e00e      	b.n	8004c84 <LL_GPIO_SetPinMode+0x42>
    result <<= 1U;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
    s--;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ed      	bne.n	8004c66 <LL_GPIO_SetPinMode+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	0013      	movs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
  return result;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <LL_GPIO_SetPinMode+0x60>
    return 32U;
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	e004      	b.n	8004cac <LL_GPIO_SetPinMode+0x6a>
  return __builtin_clz(value);
 8004ca2:	69f8      	ldr	r0, [r7, #28]
 8004ca4:	f7fb fac6 	bl	8000234 <__clzsi2>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	2203      	movs	r2, #3
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	0013      	movs	r3, r2
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401c      	ands	r4, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004cbc:	231f      	movs	r3, #31
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	e00e      	b.n	8004cea <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	623b      	str	r3, [r7, #32]
    s--;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ed      	bne.n	8004ccc <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	0013      	movs	r3, r2
 8004cf8:	623b      	str	r3, [r7, #32]
  return result;
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e004      	b.n	8004d12 <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 8004d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d0a:	f7fb fa93 	bl	8000234 <__clzsi2>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	409a      	lsls	r2, r3
 8004d18:	0013      	movs	r3, r2
 8004d1a:	0022      	movs	r2, r4
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b00d      	add	sp, #52	; 0x34
 8004d28:	bd90      	pop	{r4, r7, pc}

08004d2a <LL_GPIO_SetPinOutputType>:
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	43d2      	mvns	r2, r2
 8004d3e:	401a      	ands	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	434b      	muls	r3, r1
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	605a      	str	r2, [r3, #4]
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b004      	add	sp, #16
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <LL_GPIO_SetPinSpeed>:
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b08d      	sub	sp, #52	; 0x34
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689c      	ldr	r4, [r3, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004d68:	231f      	movs	r3, #31
 8004d6a:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e00e      	b.n	8004d96 <LL_GPIO_SetPinSpeed+0x42>
    result <<= 1U;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2201      	movs	r2, #1
 8004d82:	4013      	ands	r3, r2
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    s--;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ed      	bne.n	8004d78 <LL_GPIO_SetPinSpeed+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	409a      	lsls	r2, r3
 8004da2:	0013      	movs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  return result;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <LL_GPIO_SetPinSpeed+0x60>
    return 32U;
 8004db0:	2320      	movs	r3, #32
 8004db2:	e004      	b.n	8004dbe <LL_GPIO_SetPinSpeed+0x6a>
  return __builtin_clz(value);
 8004db4:	69f8      	ldr	r0, [r7, #28]
 8004db6:	f7fb fa3d 	bl	8000234 <__clzsi2>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	0013      	movs	r3, r2
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	401c      	ands	r4, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004dce:	231f      	movs	r3, #31
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ddc:	e00e      	b.n	8004dfc <LL_GPIO_SetPinSpeed+0xa8>
    result <<= 1U;
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2201      	movs	r2, #1
 8004de8:	4013      	ands	r3, r2
 8004dea:	6a3a      	ldr	r2, [r7, #32]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	623b      	str	r3, [r7, #32]
    s--;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	3b01      	subs	r3, #1
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ed      	bne.n	8004dde <LL_GPIO_SetPinSpeed+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	409a      	lsls	r2, r3
 8004e08:	0013      	movs	r3, r2
 8004e0a:	623b      	str	r3, [r7, #32]
  return result;
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <LL_GPIO_SetPinSpeed+0xc6>
    return 32U;
 8004e16:	2320      	movs	r3, #32
 8004e18:	e004      	b.n	8004e24 <LL_GPIO_SetPinSpeed+0xd0>
  return __builtin_clz(value);
 8004e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e1c:	f7fb fa0a 	bl	8000234 <__clzsi2>
 8004e20:	0003      	movs	r3, r0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	0013      	movs	r3, r2
 8004e2c:	0022      	movs	r2, r4
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b00d      	add	sp, #52	; 0x34
 8004e3a:	bd90      	pop	{r4, r7, pc}

08004e3c <LL_GPIO_SetPinPull>:
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b08d      	sub	sp, #52	; 0x34
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68dc      	ldr	r4, [r3, #12]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004e50:	231f      	movs	r3, #31
 8004e52:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	e00e      	b.n	8004e7e <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    s--;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ed      	bne.n	8004e60 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	0013      	movs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  return result;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <LL_GPIO_SetPinPull+0x60>
    return 32U;
 8004e98:	2320      	movs	r3, #32
 8004e9a:	e004      	b.n	8004ea6 <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 8004e9c:	69f8      	ldr	r0, [r7, #28]
 8004e9e:	f7fb f9c9 	bl	8000234 <__clzsi2>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	0013      	movs	r3, r2
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	401c      	ands	r4, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004eb6:	231f      	movs	r3, #31
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec4:	e00e      	b.n	8004ee4 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	2201      	movs	r2, #1
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	623b      	str	r3, [r7, #32]
    s--;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	3b01      	subs	r3, #1
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1ed      	bne.n	8004ec6 <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004eea:	6a3a      	ldr	r2, [r7, #32]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	0013      	movs	r3, r2
 8004ef2:	623b      	str	r3, [r7, #32]
  return result;
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 8004efe:	2320      	movs	r3, #32
 8004f00:	e004      	b.n	8004f0c <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 8004f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f04:	f7fb f996 	bl	8000234 <__clzsi2>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	409a      	lsls	r2, r3
 8004f12:	0013      	movs	r3, r2
 8004f14:	0022      	movs	r2, r4
 8004f16:	431a      	orrs	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	60da      	str	r2, [r3, #12]
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b00d      	add	sp, #52	; 0x34
 8004f22:	bd90      	pop	{r4, r7, pc}

08004f24 <LL_GPIO_SetAFPin_0_7>:
{
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b08d      	sub	sp, #52	; 0x34
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1c      	ldr	r4, [r3, #32]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004f38:	231f      	movs	r3, #31
 8004f3a:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e00e      	b.n	8004f66 <LL_GPIO_SetAFPin_0_7+0x42>
    result <<= 1U;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
    s--;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ed      	bne.n	8004f48 <LL_GPIO_SetAFPin_0_7+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	409a      	lsls	r2, r3
 8004f72:	0013      	movs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  return result;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <LL_GPIO_SetAFPin_0_7+0x60>
    return 32U;
 8004f80:	2320      	movs	r3, #32
 8004f82:	e004      	b.n	8004f8e <LL_GPIO_SetAFPin_0_7+0x6a>
  return __builtin_clz(value);
 8004f84:	69f8      	ldr	r0, [r7, #28]
 8004f86:	f7fb f955 	bl	8000234 <__clzsi2>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	220f      	movs	r2, #15
 8004f92:	409a      	lsls	r2, r3
 8004f94:	0013      	movs	r3, r2
 8004f96:	43db      	mvns	r3, r3
 8004f98:	401c      	ands	r4, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004f9e:	231f      	movs	r3, #31
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fac:	e00e      	b.n	8004fcc <LL_GPIO_SetAFPin_0_7+0xa8>
    result <<= 1U;
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	4013      	ands	r3, r2
 8004fba:	6a3a      	ldr	r2, [r7, #32]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	623b      	str	r3, [r7, #32]
    s--;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ed      	bne.n	8004fae <LL_GPIO_SetAFPin_0_7+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	0013      	movs	r3, r2
 8004fda:	623b      	str	r3, [r7, #32]
  return result;
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <LL_GPIO_SetAFPin_0_7+0xc6>
    return 32U;
 8004fe6:	2320      	movs	r3, #32
 8004fe8:	e004      	b.n	8004ff4 <LL_GPIO_SetAFPin_0_7+0xd0>
  return __builtin_clz(value);
 8004fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fec:	f7fb f922 	bl	8000234 <__clzsi2>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	0013      	movs	r3, r2
 8004ffc:	0022      	movs	r2, r4
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b00d      	add	sp, #52	; 0x34
 800500a:	bd90      	pop	{r4, r7, pc}

0800500c <LL_GPIO_SetAFPin_8_15>:
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b08d      	sub	sp, #52	; 0x34
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	0a1b      	lsrs	r3, r3, #8
 8005020:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8005022:	231f      	movs	r3, #31
 8005024:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e00e      	b.n	8005050 <LL_GPIO_SetAFPin_8_15+0x44>
    result <<= 1U;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2201      	movs	r2, #1
 800503c:	4013      	ands	r3, r2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    s--;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3b01      	subs	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ed      	bne.n	8005032 <LL_GPIO_SetAFPin_8_15+0x26>
  result <<= s;                        /* shift when v's highest bits are zero */
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	409a      	lsls	r2, r3
 800505c:	0013      	movs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
  return result;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <LL_GPIO_SetAFPin_8_15+0x62>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e004      	b.n	8005078 <LL_GPIO_SetAFPin_8_15+0x6c>
  return __builtin_clz(value);
 800506e:	69f8      	ldr	r0, [r7, #28]
 8005070:	f7fb f8e0 	bl	8000234 <__clzsi2>
 8005074:	0003      	movs	r3, r0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	220f      	movs	r2, #15
 800507c:	409a      	lsls	r2, r3
 800507e:	0013      	movs	r3, r2
 8005080:	43db      	mvns	r3, r3
 8005082:	401c      	ands	r4, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800508a:	231f      	movs	r3, #31
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
 8005098:	e00e      	b.n	80050b8 <LL_GPIO_SetAFPin_8_15+0xac>
    result <<= 1U;
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2201      	movs	r2, #1
 80050a4:	4013      	ands	r3, r2
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	623b      	str	r3, [r7, #32]
    s--;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	3b01      	subs	r3, #1
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ed      	bne.n	800509a <LL_GPIO_SetAFPin_8_15+0x8e>
  result <<= s;                        /* shift when v's highest bits are zero */
 80050be:	6a3a      	ldr	r2, [r7, #32]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	409a      	lsls	r2, r3
 80050c4:	0013      	movs	r3, r2
 80050c6:	623b      	str	r3, [r7, #32]
  return result;
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <LL_GPIO_SetAFPin_8_15+0xca>
    return 32U;
 80050d2:	2320      	movs	r3, #32
 80050d4:	e004      	b.n	80050e0 <LL_GPIO_SetAFPin_8_15+0xd4>
  return __builtin_clz(value);
 80050d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050d8:	f7fb f8ac 	bl	8000234 <__clzsi2>
 80050dc:	0003      	movs	r3, r0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	409a      	lsls	r2, r3
 80050e6:	0013      	movs	r3, r2
 80050e8:	0022      	movs	r2, r4
 80050ea:	431a      	orrs	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b00d      	add	sp, #52	; 0x34
 80050f6:	bd90      	pop	{r4, r7, pc}

080050f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8005108:	231f      	movs	r3, #31
 800510a:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	e00e      	b.n	8005136 <LL_GPIO_Init+0x3e>
    result <<= 1U;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	2201      	movs	r2, #1
 8005122:	4013      	ands	r3, r2
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
    s--;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3b01      	subs	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ed      	bne.n	8005118 <LL_GPIO_Init+0x20>
  result <<= s;                        /* shift when v's highest bits are zero */
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	409a      	lsls	r2, r3
 8005142:	0013      	movs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
  return result;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <LL_GPIO_Init+0x5c>
    return 32U;
 8005150:	2320      	movs	r3, #32
 8005152:	e004      	b.n	800515e <LL_GPIO_Init+0x66>
  return __builtin_clz(value);
 8005154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005156:	f7fb f86d 	bl	8000234 <__clzsi2>
 800515a:	0003      	movs	r3, r0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8005160:	e06c      	b.n	800523c <LL_GPIO_Init+0x144>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2101      	movs	r1, #1
 8005168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516a:	4091      	lsls	r1, r2
 800516c:	000a      	movs	r2, r1
 800516e:	4013      	ands	r3, r2
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28

    if (currentpin != 0U)
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	2b00      	cmp	r3, #0
 8005176:	d05e      	beq.n	8005236 <LL_GPIO_Init+0x13e>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	0018      	movs	r0, r3
 8005182:	f7ff fd5e 	bl	8004c42 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d003      	beq.n	8005196 <LL_GPIO_Init+0x9e>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d106      	bne.n	80051a4 <LL_GPIO_Init+0xac>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f7ff fdd8 	bl	8004d54 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7ff fe45 	bl	8004e3c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d13d      	bne.n	8005236 <LL_GPIO_Init+0x13e>
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80051be:	231f      	movs	r3, #31
 80051c0:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e00e      	b.n	80051ec <LL_GPIO_Init+0xf4>
    result <<= 1U;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2201      	movs	r2, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
    s--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	085b      	lsrs	r3, r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ed      	bne.n	80051ce <LL_GPIO_Init+0xd6>
  result <<= s;                        /* shift when v's highest bits are zero */
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	409a      	lsls	r2, r3
 80051f8:	0013      	movs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  return result;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <LL_GPIO_Init+0x112>
    return 32U;
 8005206:	2320      	movs	r3, #32
 8005208:	e004      	b.n	8005214 <LL_GPIO_Init+0x11c>
  return __builtin_clz(value);
 800520a:	6978      	ldr	r0, [r7, #20]
 800520c:	f7fb f812 	bl	8000234 <__clzsi2>
 8005210:	0003      	movs	r3, r0
 8005212:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8005214:	2b07      	cmp	r3, #7
 8005216:	d807      	bhi.n	8005228 <LL_GPIO_Init+0x130>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff fe7f 	bl	8004f24 <LL_GPIO_SetAFPin_0_7>
 8005226:	e006      	b.n	8005236 <LL_GPIO_Init+0x13e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0018      	movs	r0, r3
 8005232:	f7ff feeb 	bl	800500c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	3301      	adds	r3, #1
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	40da      	lsrs	r2, r3
 8005244:	1e13      	subs	r3, r2, #0
 8005246:	d18c      	bne.n	8005162 <LL_GPIO_Init+0x6a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d003      	beq.n	8005258 <LL_GPIO_Init+0x160>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d107      	bne.n	8005268 <LL_GPIO_Init+0x170>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6819      	ldr	r1, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0018      	movs	r0, r3
 8005264:	f7ff fd61 	bl	8004d2a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005268:	2300      	movs	r3, #0
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b00c      	add	sp, #48	; 0x30
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <LL_RCC_HSIKER_GetDivider>:
  *         @arg @ref LL_RCC_HSIKER_DIV_6
  *         @arg @ref LL_RCC_HSIKER_DIV_7
  *         @arg @ref LL_RCC_HSIKER_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSIKER_GetDivider(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIKERDIV));
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <LL_RCC_HSIKER_GetDivider+0x14>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	22e0      	movs	r2, #224	; 0xe0
 800527e:	4013      	ands	r3, r2
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	40021000 	.word	0x40021000

0800528c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <LL_RCC_HSI_IsReady+0x24>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	401a      	ands	r2, r3
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	429a      	cmp	r2, r3
 80052a0:	d101      	bne.n	80052a6 <LL_RCC_HSI_IsReady+0x1a>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <LL_RCC_HSI_IsReady+0x1c>
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	40021000 	.word	0x40021000

080052b4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR1         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <LL_RCC_LSE_IsReady+0x1c>)
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	2202      	movs	r2, #2
 80052be:	4013      	ands	r3, r2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d101      	bne.n	80052c8 <LL_RCC_LSE_IsReady+0x14>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <LL_RCC_LSE_IsReady+0x16>
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <LL_RCC_GetSysClkSource+0x14>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2238      	movs	r2, #56	; 0x38
 80052de:	4013      	ands	r3, r2
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	40021000 	.word	0x40021000

080052ec <LL_RCC_GetAHBPrescaler>:
  * @rmtoll CFGR         HPRE          LL_RCC_GetAHBPrescaler
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_SYSCLK_DIV_1
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <LL_RCC_GetAHBPrescaler+0x14>)
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	23f0      	movs	r3, #240	; 0xf0
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4013      	ands	r3, r2
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000

08005304 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <LL_RCC_GetAPB1Prescaler+0x14>)
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	23e0      	movs	r3, #224	; 0xe0
 800530e:	01db      	lsls	r3, r3, #7
 8005310:	4013      	ands	r3, r2
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000

0800531c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSIKER
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <LL_RCC_GetUSARTClockSource+0x20>)
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	401a      	ands	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	4313      	orrs	r3, r2
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b002      	add	sp, #8
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	40021000 	.word	0x40021000

08005340 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005348:	f000 f870 	bl	800542c <RCC_GetSystemClockFreq>
 800534c:	0002      	movs	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	0018      	movs	r0, r3
 8005358:	f000 f88e 	bl	8005478 <RCC_GetHCLKClockFreq>
 800535c:	0002      	movs	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f89e 	bl	80054a8 <RCC_GetPCLK1ClockFreq>
 800536c:	0002      	movs	r2, r0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	609a      	str	r2, [r3, #8]
}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b002      	add	sp, #8
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b03      	cmp	r3, #3
 800538c:	d140      	bne.n	8005410 <LL_RCC_GetUSARTClockFreq+0x94>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	0018      	movs	r0, r3
 8005392:	f7ff ffc3 	bl	800531c <LL_RCC_GetUSARTClockSource>
 8005396:	0003      	movs	r3, r0
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <LL_RCC_GetUSARTClockFreq+0xa0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <LL_RCC_GetUSARTClockFreq+0x62>
 800539e:	4a1f      	ldr	r2, [pc, #124]	; (800541c <LL_RCC_GetUSARTClockFreq+0xa0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d825      	bhi.n	80053f0 <LL_RCC_GetUSARTClockFreq+0x74>
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <LL_RCC_GetUSARTClockFreq+0x36>
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d005      	beq.n	80053bc <LL_RCC_GetUSARTClockFreq+0x40>
 80053b0:	e01e      	b.n	80053f0 <LL_RCC_GetUSARTClockFreq+0x74>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80053b2:	f000 f83b 	bl	800542c <RCC_GetSystemClockFreq>
 80053b6:	0003      	movs	r3, r0
 80053b8:	60fb      	str	r3, [r7, #12]
        break;
 80053ba:	e029      	b.n	8005410 <LL_RCC_GetUSARTClockFreq+0x94>

      case LL_RCC_USART1_CLKSOURCE_HSIKER:    /* USART1 Clock is HSI Kernel */
        if (LL_RCC_HSI_IsReady() == 1U)
 80053bc:	f7ff ff66 	bl	800528c <LL_RCC_HSI_IsReady>
 80053c0:	0003      	movs	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d121      	bne.n	800540a <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = (HSI_VALUE / ((LL_RCC_HSIKER_GetDivider() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80053c6:	f7ff ff55 	bl	8005274 <LL_RCC_HSIKER_GetDivider>
 80053ca:	0003      	movs	r3, r0
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	3301      	adds	r3, #1
 80053d0:	0019      	movs	r1, r3
 80053d2:	4815      	ldr	r0, [pc, #84]	; (8005428 <LL_RCC_GetUSARTClockFreq+0xac>)
 80053d4:	f7fa fea2 	bl	800011c <__udivsi3>
 80053d8:	0003      	movs	r3, r0
 80053da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053dc:	e015      	b.n	800540a <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80053de:	f7ff ff69 	bl	80052b4 <LL_RCC_LSE_IsReady>
 80053e2:	0003      	movs	r3, r0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d112      	bne.n	800540e <LL_RCC_GetUSARTClockFreq+0x92>
        {
          usart_frequency = LSE_VALUE;
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053ee:	e00e      	b.n	800540e <LL_RCC_GetUSARTClockFreq+0x92>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80053f0:	f000 f81c 	bl	800542c <RCC_GetSystemClockFreq>
 80053f4:	0003      	movs	r3, r0
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 f83e 	bl	8005478 <RCC_GetHCLKClockFreq>
 80053fc:	0003      	movs	r3, r0
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 f852 	bl	80054a8 <RCC_GetPCLK1ClockFreq>
 8005404:	0003      	movs	r3, r0
 8005406:	60fb      	str	r3, [r7, #12]
        break;
 8005408:	e002      	b.n	8005410 <LL_RCC_GetUSARTClockFreq+0x94>
        break;
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	e000      	b.n	8005410 <LL_RCC_GetUSARTClockFreq+0x94>
        break;
 800540e:	46c0      	nop			; (mov r8, r8)
    }
  }
  else
  {
  }
  return usart_frequency;
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	0018      	movs	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	b004      	add	sp, #16
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	00030003 	.word	0x00030003
 8005420:	00030001 	.word	0x00030001
 8005424:	00030002 	.word	0x00030002
 8005428:	02dc6c00 	.word	0x02dc6c00

0800542c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005432:	f7ff ff4f 	bl	80052d4 <LL_RCC_GetSysClkSource>
 8005436:	0003      	movs	r3, r0
 8005438:	2b08      	cmp	r3, #8
 800543a:	d102      	bne.n	8005442 <RCC_GetSystemClockFreq+0x16>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <RCC_GetSystemClockFreq+0x40>)
 800543e:	607b      	str	r3, [r7, #4]
      break;
 8005440:	e00f      	b.n	8005462 <RCC_GetSystemClockFreq+0x36>
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <RCC_GetSystemClockFreq+0x44>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0adb      	lsrs	r3, r3, #11
 8005448:	2207      	movs	r2, #7
 800544a:	4013      	ands	r3, r2
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	0013      	movs	r3, r2
 8005452:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	4807      	ldr	r0, [pc, #28]	; (8005474 <RCC_GetSystemClockFreq+0x48>)
 8005458:	f7fa fe60 	bl	800011c <__udivsi3>
 800545c:	0003      	movs	r3, r0
 800545e:	607b      	str	r3, [r7, #4]
      break;
 8005460:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8005462:	687b      	ldr	r3, [r7, #4]
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}
 800546c:	007a1200 	.word	0x007a1200
 8005470:	40021000 	.word	0x40021000
 8005474:	02dc6c00 	.word	0x02dc6c00

08005478 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005480:	f7ff ff34 	bl	80052ec <LL_RCC_GetAHBPrescaler>
 8005484:	0003      	movs	r3, r0
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	220f      	movs	r2, #15
 800548a:	401a      	ands	r2, r3
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <RCC_GetHCLKClockFreq+0x2c>)
 800548e:	0092      	lsls	r2, r2, #2
 8005490:	58d3      	ldr	r3, [r2, r3]
 8005492:	221f      	movs	r2, #31
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	40da      	lsrs	r2, r3
 800549a:	0013      	movs	r3, r2
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	08006a4c 	.word	0x08006a4c

080054a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80054b0:	f7ff ff28 	bl	8005304 <LL_RCC_GetAPB1Prescaler>
 80054b4:	0003      	movs	r3, r0
 80054b6:	0b1a      	lsrs	r2, r3, #12
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <RCC_GetPCLK1ClockFreq+0x28>)
 80054ba:	0092      	lsls	r2, r2, #2
 80054bc:	58d3      	ldr	r3, [r2, r3]
 80054be:	221f      	movs	r2, #31
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	40da      	lsrs	r2, r3
 80054c6:	0013      	movs	r3, r2
}
 80054c8:	0018      	movs	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	08006a8c 	.word	0x08006a8c

080054d4 <LL_TIM_SetPrescaler>:
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}

080054ec <LL_TIM_SetAutoReload>:
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <LL_TIM_SetRepetitionCounter>:
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2201      	movs	r2, #1
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	615a      	str	r2, [r3, #20]
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b002      	add	sp, #8
 8005536:	bd80      	pop	{r7, pc}

08005538 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <LL_TIM_Init+0xc4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <LL_TIM_Init+0x20>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <LL_TIM_Init+0xc8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d107      	bne.n	8005568 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2270      	movs	r2, #112	; 0x70
 800555c:	4393      	bics	r3, r2
 800555e:	001a      	movs	r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a24      	ldr	r2, [pc, #144]	; (80055fc <LL_TIM_Init+0xc4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <LL_TIM_Init+0x58>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a23      	ldr	r2, [pc, #140]	; (8005600 <LL_TIM_Init+0xc8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <LL_TIM_Init+0x58>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a22      	ldr	r2, [pc, #136]	; (8005604 <LL_TIM_Init+0xcc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <LL_TIM_Init+0x58>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a21      	ldr	r2, [pc, #132]	; (8005608 <LL_TIM_Init+0xd0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <LL_TIM_Init+0x58>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a20      	ldr	r2, [pc, #128]	; (800560c <LL_TIM_Init+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d106      	bne.n	800559e <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <LL_TIM_Init+0xd8>)
 8005594:	401a      	ands	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	0011      	movs	r1, r2
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7ff ff9d 	bl	80054ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	001a      	movs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	0011      	movs	r1, r2
 80055bc:	0018      	movs	r0, r3
 80055be:	f7ff ff89 	bl	80054d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <LL_TIM_Init+0xc4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <LL_TIM_Init+0xa2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <LL_TIM_Init+0xd0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <LL_TIM_Init+0xa2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a0d      	ldr	r2, [pc, #52]	; (800560c <LL_TIM_Init+0xd4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d106      	bne.n	80055e8 <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7ff ff8e 	bl	8005504 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7ff ff96 	bl	800551c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40000400 	.word	0x40000400
 8005604:	40002000 	.word	0x40002000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800
 8005610:	fffffcff 	.word	0xfffffcff

08005614 <LL_USART_IsEnabled>:
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	4013      	ands	r3, r2
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <LL_USART_IsEnabled+0x18>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <LL_USART_IsEnabled+0x1a>
 800562c:	2300      	movs	r3, #0
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b002      	add	sp, #8
 8005634:	bd80      	pop	{r7, pc}

08005636 <LL_USART_SetPrescaler>:
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	220f      	movs	r2, #15
 8005646:	4393      	bics	r3, r2
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	b292      	uxth	r2, r2
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b002      	add	sp, #8
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <LL_USART_SetStopBitsLength>:
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4a05      	ldr	r2, [pc, #20]	; (8005680 <LL_USART_SetStopBitsLength+0x24>)
 800566c:	401a      	ands	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]
}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b002      	add	sp, #8
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	ffffcfff 	.word	0xffffcfff

08005684 <LL_USART_SetHWFlowCtrl>:
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <LL_USART_SetHWFlowCtrl+0x24>)
 8005694:	401a      	ands	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b002      	add	sp, #8
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	fffffcff 	.word	0xfffffcff

080056ac <LL_USART_SetBaudRate>:
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b0b      	cmp	r3, #11
 80056be:	d846      	bhi.n	800574e <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d043      	beq.n	800574e <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d126      	bne.n	800571e <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	001a      	movs	r2, r3
 80056d6:	4b20      	ldr	r3, [pc, #128]	; (8005758 <LL_USART_SetBaudRate+0xac>)
 80056d8:	0092      	lsls	r2, r2, #2
 80056da:	58d3      	ldr	r3, [r2, r3]
 80056dc:	0019      	movs	r1, r3
 80056de:	68b8      	ldr	r0, [r7, #8]
 80056e0:	f7fa fd1c 	bl	800011c <__udivsi3>
 80056e4:	0003      	movs	r3, r0
 80056e6:	005a      	lsls	r2, r3, #1
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	18d3      	adds	r3, r2, r3
 80056ee:	6a39      	ldr	r1, [r7, #32]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f7fa fd13 	bl	800011c <__udivsi3>
 80056f6:	0003      	movs	r3, r0
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <LL_USART_SetBaudRate+0xb0>)
 8005700:	4013      	ands	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	001a      	movs	r2, r3
 800570c:	2307      	movs	r3, #7
 800570e:	4013      	ands	r3, r2
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	60da      	str	r2, [r3, #12]
}
 800571c:	e017      	b.n	800574e <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	001a      	movs	r2, r3
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <LL_USART_SetBaudRate+0xac>)
 8005726:	0092      	lsls	r2, r2, #2
 8005728:	58d3      	ldr	r3, [r2, r3]
 800572a:	0019      	movs	r1, r3
 800572c:	68b8      	ldr	r0, [r7, #8]
 800572e:	f7fa fcf5 	bl	800011c <__udivsi3>
 8005732:	0003      	movs	r3, r0
 8005734:	001a      	movs	r2, r3
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	18d3      	adds	r3, r2, r3
 800573c:	6a39      	ldr	r1, [r7, #32]
 800573e:	0018      	movs	r0, r3
 8005740:	f7fa fcec 	bl	800011c <__udivsi3>
 8005744:	0003      	movs	r3, r0
 8005746:	b29b      	uxth	r3, r3
 8005748:	001a      	movs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60da      	str	r2, [r3, #12]
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b006      	add	sp, #24
 8005754:	bd80      	pop	{r7, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	08006d00 	.word	0x08006d00
 800575c:	0000fff0 	.word	0x0000fff0

08005760 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b08b      	sub	sp, #44	; 0x2c
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800576a:	231f      	movs	r3, #31
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0018      	movs	r0, r3
 800577a:	f7ff ff4b 	bl	8005614 <LL_USART_IsEnabled>
 800577e:	1e03      	subs	r3, r0, #0
 8005780:	d153      	bne.n	800582a <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2c      	ldr	r2, [pc, #176]	; (8005838 <LL_USART_Init+0xd8>)
 8005788:	401a      	ands	r2, r3
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6899      	ldr	r1, [r3, #8]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	4319      	orrs	r1, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4319      	orrs	r1, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	430b      	orrs	r3, r1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	0011      	movs	r1, r2
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7ff ff54 	bl	800565c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	0011      	movs	r1, r2
 80057bc:	0018      	movs	r0, r3
 80057be:	f7ff ff61 	bl	8005684 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	; (800583c <LL_USART_Init+0xdc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d105      	bne.n	80057d6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80057ca:	2003      	movs	r0, #3
 80057cc:	f7ff fdd6 	bl	800537c <LL_RCC_GetUSARTClockFreq>
 80057d0:	0003      	movs	r3, r0
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	e00b      	b.n	80057ee <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a19      	ldr	r2, [pc, #100]	; (8005840 <LL_USART_Init+0xe0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d107      	bne.n	80057ee <LL_USART_Init+0x8e>
    {
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80057de:	240c      	movs	r4, #12
 80057e0:	193b      	adds	r3, r7, r4
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7ff fdac 	bl	8005340 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80057e8:	193b      	adds	r3, r7, r4
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00f      	beq.n	800581c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80057fc:	231f      	movs	r3, #31
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	69dc      	ldr	r4, [r3, #28]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	0023      	movs	r3, r4
 8005818:	f7ff ff48 	bl	80056ac <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	0011      	movs	r1, r2
 8005824:	0018      	movs	r0, r3
 8005826:	f7ff ff06 	bl	8005636 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800582a:	231f      	movs	r3, #31
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	781b      	ldrb	r3, [r3, #0]
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b009      	add	sp, #36	; 0x24
 8005836:	bd90      	pop	{r4, r7, pc}
 8005838:	efff69f3 	.word	0xefff69f3
 800583c:	40013800 	.word	0x40013800
 8005840:	40004400 	.word	0x40004400

08005844 <__assert_func>:
 8005844:	b530      	push	{r4, r5, lr}
 8005846:	0014      	movs	r4, r2
 8005848:	001a      	movs	r2, r3
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <__assert_func+0x2c>)
 800584c:	0005      	movs	r5, r0
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	b085      	sub	sp, #20
 8005852:	68d8      	ldr	r0, [r3, #12]
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <__assert_func+0x30>)
 8005856:	2c00      	cmp	r4, #0
 8005858:	d101      	bne.n	800585e <__assert_func+0x1a>
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <__assert_func+0x34>)
 800585c:	001c      	movs	r4, r3
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	9100      	str	r1, [sp, #0]
 8005862:	002b      	movs	r3, r5
 8005864:	4905      	ldr	r1, [pc, #20]	; (800587c <__assert_func+0x38>)
 8005866:	9402      	str	r4, [sp, #8]
 8005868:	f000 f810 	bl	800588c <fiprintf>
 800586c:	f000 fc04 	bl	8006078 <abort>
 8005870:	20000094 	.word	0x20000094
 8005874:	08006d30 	.word	0x08006d30
 8005878:	08006d6b 	.word	0x08006d6b
 800587c:	08006d3d 	.word	0x08006d3d

08005880 <__errno>:
 8005880:	4b01      	ldr	r3, [pc, #4]	; (8005888 <__errno+0x8>)
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	4770      	bx	lr
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	20000094 	.word	0x20000094

0800588c <fiprintf>:
 800588c:	b40e      	push	{r1, r2, r3}
 800588e:	b503      	push	{r0, r1, lr}
 8005890:	0001      	movs	r1, r0
 8005892:	ab03      	add	r3, sp, #12
 8005894:	4804      	ldr	r0, [pc, #16]	; (80058a8 <fiprintf+0x1c>)
 8005896:	cb04      	ldmia	r3!, {r2}
 8005898:	6800      	ldr	r0, [r0, #0]
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	f000 f862 	bl	8005964 <_vfiprintf_r>
 80058a0:	b002      	add	sp, #8
 80058a2:	bc08      	pop	{r3}
 80058a4:	b003      	add	sp, #12
 80058a6:	4718      	bx	r3
 80058a8:	20000094 	.word	0x20000094

080058ac <__libc_init_array>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	2600      	movs	r6, #0
 80058b0:	4d0c      	ldr	r5, [pc, #48]	; (80058e4 <__libc_init_array+0x38>)
 80058b2:	4c0d      	ldr	r4, [pc, #52]	; (80058e8 <__libc_init_array+0x3c>)
 80058b4:	1b64      	subs	r4, r4, r5
 80058b6:	10a4      	asrs	r4, r4, #2
 80058b8:	42a6      	cmp	r6, r4
 80058ba:	d109      	bne.n	80058d0 <__libc_init_array+0x24>
 80058bc:	2600      	movs	r6, #0
 80058be:	f001 f839 	bl	8006934 <_init>
 80058c2:	4d0a      	ldr	r5, [pc, #40]	; (80058ec <__libc_init_array+0x40>)
 80058c4:	4c0a      	ldr	r4, [pc, #40]	; (80058f0 <__libc_init_array+0x44>)
 80058c6:	1b64      	subs	r4, r4, r5
 80058c8:	10a4      	asrs	r4, r4, #2
 80058ca:	42a6      	cmp	r6, r4
 80058cc:	d105      	bne.n	80058da <__libc_init_array+0x2e>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	00b3      	lsls	r3, r6, #2
 80058d2:	58eb      	ldr	r3, [r5, r3]
 80058d4:	4798      	blx	r3
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7ee      	b.n	80058b8 <__libc_init_array+0xc>
 80058da:	00b3      	lsls	r3, r6, #2
 80058dc:	58eb      	ldr	r3, [r5, r3]
 80058de:	4798      	blx	r3
 80058e0:	3601      	adds	r6, #1
 80058e2:	e7f2      	b.n	80058ca <__libc_init_array+0x1e>
 80058e4:	08006e04 	.word	0x08006e04
 80058e8:	08006e04 	.word	0x08006e04
 80058ec:	08006e04 	.word	0x08006e04
 80058f0:	08006e08 	.word	0x08006e08

080058f4 <memcpy>:
 80058f4:	2300      	movs	r3, #0
 80058f6:	b510      	push	{r4, lr}
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d100      	bne.n	80058fe <memcpy+0xa>
 80058fc:	bd10      	pop	{r4, pc}
 80058fe:	5ccc      	ldrb	r4, [r1, r3]
 8005900:	54c4      	strb	r4, [r0, r3]
 8005902:	3301      	adds	r3, #1
 8005904:	e7f8      	b.n	80058f8 <memcpy+0x4>

08005906 <memset>:
 8005906:	0003      	movs	r3, r0
 8005908:	1882      	adds	r2, r0, r2
 800590a:	4293      	cmp	r3, r2
 800590c:	d100      	bne.n	8005910 <memset+0xa>
 800590e:	4770      	bx	lr
 8005910:	7019      	strb	r1, [r3, #0]
 8005912:	3301      	adds	r3, #1
 8005914:	e7f9      	b.n	800590a <memset+0x4>

08005916 <__sfputc_r>:
 8005916:	6893      	ldr	r3, [r2, #8]
 8005918:	b510      	push	{r4, lr}
 800591a:	3b01      	subs	r3, #1
 800591c:	6093      	str	r3, [r2, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	da04      	bge.n	800592c <__sfputc_r+0x16>
 8005922:	6994      	ldr	r4, [r2, #24]
 8005924:	42a3      	cmp	r3, r4
 8005926:	db07      	blt.n	8005938 <__sfputc_r+0x22>
 8005928:	290a      	cmp	r1, #10
 800592a:	d005      	beq.n	8005938 <__sfputc_r+0x22>
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	1c58      	adds	r0, r3, #1
 8005930:	6010      	str	r0, [r2, #0]
 8005932:	7019      	strb	r1, [r3, #0]
 8005934:	0008      	movs	r0, r1
 8005936:	bd10      	pop	{r4, pc}
 8005938:	f000 fad0 	bl	8005edc <__swbuf_r>
 800593c:	0001      	movs	r1, r0
 800593e:	e7f9      	b.n	8005934 <__sfputc_r+0x1e>

08005940 <__sfputs_r>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	0006      	movs	r6, r0
 8005944:	000f      	movs	r7, r1
 8005946:	0014      	movs	r4, r2
 8005948:	18d5      	adds	r5, r2, r3
 800594a:	42ac      	cmp	r4, r5
 800594c:	d101      	bne.n	8005952 <__sfputs_r+0x12>
 800594e:	2000      	movs	r0, #0
 8005950:	e007      	b.n	8005962 <__sfputs_r+0x22>
 8005952:	7821      	ldrb	r1, [r4, #0]
 8005954:	003a      	movs	r2, r7
 8005956:	0030      	movs	r0, r6
 8005958:	f7ff ffdd 	bl	8005916 <__sfputc_r>
 800595c:	3401      	adds	r4, #1
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d1f3      	bne.n	800594a <__sfputs_r+0xa>
 8005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005964 <_vfiprintf_r>:
 8005964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005966:	b0a1      	sub	sp, #132	; 0x84
 8005968:	0006      	movs	r6, r0
 800596a:	000c      	movs	r4, r1
 800596c:	001f      	movs	r7, r3
 800596e:	9203      	str	r2, [sp, #12]
 8005970:	2800      	cmp	r0, #0
 8005972:	d004      	beq.n	800597e <_vfiprintf_r+0x1a>
 8005974:	6983      	ldr	r3, [r0, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <_vfiprintf_r+0x1a>
 800597a:	f000 fcb3 	bl	80062e4 <__sinit>
 800597e:	4b8e      	ldr	r3, [pc, #568]	; (8005bb8 <_vfiprintf_r+0x254>)
 8005980:	429c      	cmp	r4, r3
 8005982:	d11c      	bne.n	80059be <_vfiprintf_r+0x5a>
 8005984:	6874      	ldr	r4, [r6, #4]
 8005986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d405      	bmi.n	8005998 <_vfiprintf_r+0x34>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	059b      	lsls	r3, r3, #22
 8005990:	d402      	bmi.n	8005998 <_vfiprintf_r+0x34>
 8005992:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005994:	f000 fd47 	bl	8006426 <__retarget_lock_acquire_recursive>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	071b      	lsls	r3, r3, #28
 800599c:	d502      	bpl.n	80059a4 <_vfiprintf_r+0x40>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d11d      	bne.n	80059e0 <_vfiprintf_r+0x7c>
 80059a4:	0021      	movs	r1, r4
 80059a6:	0030      	movs	r0, r6
 80059a8:	f000 faee 	bl	8005f88 <__swsetup_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d017      	beq.n	80059e0 <_vfiprintf_r+0x7c>
 80059b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b2:	07db      	lsls	r3, r3, #31
 80059b4:	d50d      	bpl.n	80059d2 <_vfiprintf_r+0x6e>
 80059b6:	2001      	movs	r0, #1
 80059b8:	4240      	negs	r0, r0
 80059ba:	b021      	add	sp, #132	; 0x84
 80059bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059be:	4b7f      	ldr	r3, [pc, #508]	; (8005bbc <_vfiprintf_r+0x258>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d101      	bne.n	80059c8 <_vfiprintf_r+0x64>
 80059c4:	68b4      	ldr	r4, [r6, #8]
 80059c6:	e7de      	b.n	8005986 <_vfiprintf_r+0x22>
 80059c8:	4b7d      	ldr	r3, [pc, #500]	; (8005bc0 <_vfiprintf_r+0x25c>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d1db      	bne.n	8005986 <_vfiprintf_r+0x22>
 80059ce:	68f4      	ldr	r4, [r6, #12]
 80059d0:	e7d9      	b.n	8005986 <_vfiprintf_r+0x22>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	d4ee      	bmi.n	80059b6 <_vfiprintf_r+0x52>
 80059d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059da:	f000 fd25 	bl	8006428 <__retarget_lock_release_recursive>
 80059de:	e7ea      	b.n	80059b6 <_vfiprintf_r+0x52>
 80059e0:	2300      	movs	r3, #0
 80059e2:	ad08      	add	r5, sp, #32
 80059e4:	616b      	str	r3, [r5, #20]
 80059e6:	3320      	adds	r3, #32
 80059e8:	766b      	strb	r3, [r5, #25]
 80059ea:	3310      	adds	r3, #16
 80059ec:	76ab      	strb	r3, [r5, #26]
 80059ee:	9707      	str	r7, [sp, #28]
 80059f0:	9f03      	ldr	r7, [sp, #12]
 80059f2:	783b      	ldrb	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <_vfiprintf_r+0x98>
 80059f8:	2b25      	cmp	r3, #37	; 0x25
 80059fa:	d14e      	bne.n	8005a9a <_vfiprintf_r+0x136>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	1afb      	subs	r3, r7, r3
 8005a00:	9305      	str	r3, [sp, #20]
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	429f      	cmp	r7, r3
 8005a06:	d00d      	beq.n	8005a24 <_vfiprintf_r+0xc0>
 8005a08:	9b05      	ldr	r3, [sp, #20]
 8005a0a:	0021      	movs	r1, r4
 8005a0c:	0030      	movs	r0, r6
 8005a0e:	9a03      	ldr	r2, [sp, #12]
 8005a10:	f7ff ff96 	bl	8005940 <__sfputs_r>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d100      	bne.n	8005a1a <_vfiprintf_r+0xb6>
 8005a18:	e0b5      	b.n	8005b86 <_vfiprintf_r+0x222>
 8005a1a:	696a      	ldr	r2, [r5, #20]
 8005a1c:	9b05      	ldr	r3, [sp, #20]
 8005a1e:	4694      	mov	ip, r2
 8005a20:	4463      	add	r3, ip
 8005a22:	616b      	str	r3, [r5, #20]
 8005a24:	783b      	ldrb	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d100      	bne.n	8005a2c <_vfiprintf_r+0xc8>
 8005a2a:	e0ac      	b.n	8005b86 <_vfiprintf_r+0x222>
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	1c7b      	adds	r3, r7, #1
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	2300      	movs	r3, #0
 8005a34:	4252      	negs	r2, r2
 8005a36:	606a      	str	r2, [r5, #4]
 8005a38:	a904      	add	r1, sp, #16
 8005a3a:	3254      	adds	r2, #84	; 0x54
 8005a3c:	1852      	adds	r2, r2, r1
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	60eb      	str	r3, [r5, #12]
 8005a42:	60ab      	str	r3, [r5, #8]
 8005a44:	7013      	strb	r3, [r2, #0]
 8005a46:	65ab      	str	r3, [r5, #88]	; 0x58
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	2205      	movs	r2, #5
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	485d      	ldr	r0, [pc, #372]	; (8005bc4 <_vfiprintf_r+0x260>)
 8005a50:	f000 fd58 	bl	8006504 <memchr>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	1c5f      	adds	r7, r3, #1
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d120      	bne.n	8005a9e <_vfiprintf_r+0x13a>
 8005a5c:	682a      	ldr	r2, [r5, #0]
 8005a5e:	06d3      	lsls	r3, r2, #27
 8005a60:	d504      	bpl.n	8005a6c <_vfiprintf_r+0x108>
 8005a62:	2353      	movs	r3, #83	; 0x53
 8005a64:	a904      	add	r1, sp, #16
 8005a66:	185b      	adds	r3, r3, r1
 8005a68:	2120      	movs	r1, #32
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	0713      	lsls	r3, r2, #28
 8005a6e:	d504      	bpl.n	8005a7a <_vfiprintf_r+0x116>
 8005a70:	2353      	movs	r3, #83	; 0x53
 8005a72:	a904      	add	r1, sp, #16
 8005a74:	185b      	adds	r3, r3, r1
 8005a76:	212b      	movs	r1, #43	; 0x2b
 8005a78:	7019      	strb	r1, [r3, #0]
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a80:	d016      	beq.n	8005ab0 <_vfiprintf_r+0x14c>
 8005a82:	2100      	movs	r1, #0
 8005a84:	68eb      	ldr	r3, [r5, #12]
 8005a86:	9f03      	ldr	r7, [sp, #12]
 8005a88:	783a      	ldrb	r2, [r7, #0]
 8005a8a:	1c78      	adds	r0, r7, #1
 8005a8c:	3a30      	subs	r2, #48	; 0x30
 8005a8e:	4684      	mov	ip, r0
 8005a90:	2a09      	cmp	r2, #9
 8005a92:	d94f      	bls.n	8005b34 <_vfiprintf_r+0x1d0>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	d111      	bne.n	8005abc <_vfiprintf_r+0x158>
 8005a98:	e017      	b.n	8005aca <_vfiprintf_r+0x166>
 8005a9a:	3701      	adds	r7, #1
 8005a9c:	e7a9      	b.n	80059f2 <_vfiprintf_r+0x8e>
 8005a9e:	4b49      	ldr	r3, [pc, #292]	; (8005bc4 <_vfiprintf_r+0x260>)
 8005aa0:	682a      	ldr	r2, [r5, #0]
 8005aa2:	1ac0      	subs	r0, r0, r3
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4083      	lsls	r3, r0
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	9703      	str	r7, [sp, #12]
 8005aae:	e7cb      	b.n	8005a48 <_vfiprintf_r+0xe4>
 8005ab0:	9b07      	ldr	r3, [sp, #28]
 8005ab2:	1d19      	adds	r1, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9107      	str	r1, [sp, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db01      	blt.n	8005ac0 <_vfiprintf_r+0x15c>
 8005abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005abe:	e004      	b.n	8005aca <_vfiprintf_r+0x166>
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	60eb      	str	r3, [r5, #12]
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	783b      	ldrb	r3, [r7, #0]
 8005acc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ace:	d10a      	bne.n	8005ae6 <_vfiprintf_r+0x182>
 8005ad0:	787b      	ldrb	r3, [r7, #1]
 8005ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad4:	d137      	bne.n	8005b46 <_vfiprintf_r+0x1e2>
 8005ad6:	9b07      	ldr	r3, [sp, #28]
 8005ad8:	3702      	adds	r7, #2
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9207      	str	r2, [sp, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db2d      	blt.n	8005b40 <_vfiprintf_r+0x1dc>
 8005ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	7839      	ldrb	r1, [r7, #0]
 8005aea:	4837      	ldr	r0, [pc, #220]	; (8005bc8 <_vfiprintf_r+0x264>)
 8005aec:	f000 fd0a 	bl	8006504 <memchr>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d007      	beq.n	8005b04 <_vfiprintf_r+0x1a0>
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <_vfiprintf_r+0x264>)
 8005af6:	682a      	ldr	r2, [r5, #0]
 8005af8:	1ac0      	subs	r0, r0, r3
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	4083      	lsls	r3, r0
 8005afe:	4313      	orrs	r3, r2
 8005b00:	3701      	adds	r7, #1
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	7839      	ldrb	r1, [r7, #0]
 8005b06:	1c7b      	adds	r3, r7, #1
 8005b08:	2206      	movs	r2, #6
 8005b0a:	4830      	ldr	r0, [pc, #192]	; (8005bcc <_vfiprintf_r+0x268>)
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	7629      	strb	r1, [r5, #24]
 8005b10:	f000 fcf8 	bl	8006504 <memchr>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d045      	beq.n	8005ba4 <_vfiprintf_r+0x240>
 8005b18:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <_vfiprintf_r+0x26c>)
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d127      	bne.n	8005b6e <_vfiprintf_r+0x20a>
 8005b1e:	2207      	movs	r2, #7
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	3307      	adds	r3, #7
 8005b24:	4393      	bics	r3, r2
 8005b26:	3308      	adds	r3, #8
 8005b28:	9307      	str	r3, [sp, #28]
 8005b2a:	696b      	ldr	r3, [r5, #20]
 8005b2c:	9a04      	ldr	r2, [sp, #16]
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	616b      	str	r3, [r5, #20]
 8005b32:	e75d      	b.n	80059f0 <_vfiprintf_r+0x8c>
 8005b34:	210a      	movs	r1, #10
 8005b36:	434b      	muls	r3, r1
 8005b38:	4667      	mov	r7, ip
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	3909      	subs	r1, #9
 8005b3e:	e7a3      	b.n	8005a88 <_vfiprintf_r+0x124>
 8005b40:	2301      	movs	r3, #1
 8005b42:	425b      	negs	r3, r3
 8005b44:	e7ce      	b.n	8005ae4 <_vfiprintf_r+0x180>
 8005b46:	2300      	movs	r3, #0
 8005b48:	001a      	movs	r2, r3
 8005b4a:	3701      	adds	r7, #1
 8005b4c:	606b      	str	r3, [r5, #4]
 8005b4e:	7839      	ldrb	r1, [r7, #0]
 8005b50:	1c78      	adds	r0, r7, #1
 8005b52:	3930      	subs	r1, #48	; 0x30
 8005b54:	4684      	mov	ip, r0
 8005b56:	2909      	cmp	r1, #9
 8005b58:	d903      	bls.n	8005b62 <_vfiprintf_r+0x1fe>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0c3      	beq.n	8005ae6 <_vfiprintf_r+0x182>
 8005b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b60:	e7c1      	b.n	8005ae6 <_vfiprintf_r+0x182>
 8005b62:	230a      	movs	r3, #10
 8005b64:	435a      	muls	r2, r3
 8005b66:	4667      	mov	r7, ip
 8005b68:	1852      	adds	r2, r2, r1
 8005b6a:	3b09      	subs	r3, #9
 8005b6c:	e7ef      	b.n	8005b4e <_vfiprintf_r+0x1ea>
 8005b6e:	ab07      	add	r3, sp, #28
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	0022      	movs	r2, r4
 8005b74:	0029      	movs	r1, r5
 8005b76:	0030      	movs	r0, r6
 8005b78:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <_vfiprintf_r+0x270>)
 8005b7a:	e000      	b.n	8005b7e <_vfiprintf_r+0x21a>
 8005b7c:	bf00      	nop
 8005b7e:	9004      	str	r0, [sp, #16]
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	3301      	adds	r3, #1
 8005b84:	d1d1      	bne.n	8005b2a <_vfiprintf_r+0x1c6>
 8005b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b88:	07db      	lsls	r3, r3, #31
 8005b8a:	d405      	bmi.n	8005b98 <_vfiprintf_r+0x234>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	059b      	lsls	r3, r3, #22
 8005b90:	d402      	bmi.n	8005b98 <_vfiprintf_r+0x234>
 8005b92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b94:	f000 fc48 	bl	8006428 <__retarget_lock_release_recursive>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	065b      	lsls	r3, r3, #25
 8005b9c:	d500      	bpl.n	8005ba0 <_vfiprintf_r+0x23c>
 8005b9e:	e70a      	b.n	80059b6 <_vfiprintf_r+0x52>
 8005ba0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ba2:	e70a      	b.n	80059ba <_vfiprintf_r+0x56>
 8005ba4:	ab07      	add	r3, sp, #28
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	0022      	movs	r2, r4
 8005baa:	0029      	movs	r1, r5
 8005bac:	0030      	movs	r0, r6
 8005bae:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <_vfiprintf_r+0x270>)
 8005bb0:	f000 f882 	bl	8005cb8 <_printf_i>
 8005bb4:	e7e3      	b.n	8005b7e <_vfiprintf_r+0x21a>
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	08006dc4 	.word	0x08006dc4
 8005bbc:	08006de4 	.word	0x08006de4
 8005bc0:	08006da4 	.word	0x08006da4
 8005bc4:	08006d70 	.word	0x08006d70
 8005bc8:	08006d76 	.word	0x08006d76
 8005bcc:	08006d7a 	.word	0x08006d7a
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	08005941 	.word	0x08005941

08005bd8 <_printf_common>:
 8005bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bda:	0015      	movs	r5, r2
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	688a      	ldr	r2, [r1, #8]
 8005be0:	690b      	ldr	r3, [r1, #16]
 8005be2:	000c      	movs	r4, r1
 8005be4:	9000      	str	r0, [sp, #0]
 8005be6:	4293      	cmp	r3, r2
 8005be8:	da00      	bge.n	8005bec <_printf_common+0x14>
 8005bea:	0013      	movs	r3, r2
 8005bec:	0022      	movs	r2, r4
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	3243      	adds	r2, #67	; 0x43
 8005bf2:	7812      	ldrb	r2, [r2, #0]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d001      	beq.n	8005bfc <_printf_common+0x24>
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	069b      	lsls	r3, r3, #26
 8005c00:	d502      	bpl.n	8005c08 <_printf_common+0x30>
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	3302      	adds	r3, #2
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	2306      	movs	r3, #6
 8005c0c:	0017      	movs	r7, r2
 8005c0e:	401f      	ands	r7, r3
 8005c10:	421a      	tst	r2, r3
 8005c12:	d027      	beq.n	8005c64 <_printf_common+0x8c>
 8005c14:	0023      	movs	r3, r4
 8005c16:	3343      	adds	r3, #67	; 0x43
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	1e5a      	subs	r2, r3, #1
 8005c1c:	4193      	sbcs	r3, r2
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d430      	bmi.n	8005c86 <_printf_common+0xae>
 8005c24:	0022      	movs	r2, r4
 8005c26:	9901      	ldr	r1, [sp, #4]
 8005c28:	9800      	ldr	r0, [sp, #0]
 8005c2a:	9e08      	ldr	r6, [sp, #32]
 8005c2c:	3243      	adds	r2, #67	; 0x43
 8005c2e:	47b0      	blx	r6
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d025      	beq.n	8005c80 <_printf_common+0xa8>
 8005c34:	2306      	movs	r3, #6
 8005c36:	6820      	ldr	r0, [r4, #0]
 8005c38:	682a      	ldr	r2, [r5, #0]
 8005c3a:	68e1      	ldr	r1, [r4, #12]
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	4003      	ands	r3, r0
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d103      	bne.n	8005c4c <_printf_common+0x74>
 8005c44:	1a8d      	subs	r5, r1, r2
 8005c46:	43eb      	mvns	r3, r5
 8005c48:	17db      	asrs	r3, r3, #31
 8005c4a:	401d      	ands	r5, r3
 8005c4c:	68a3      	ldr	r3, [r4, #8]
 8005c4e:	6922      	ldr	r2, [r4, #16]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	dd01      	ble.n	8005c58 <_printf_common+0x80>
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	18ed      	adds	r5, r5, r3
 8005c58:	2700      	movs	r7, #0
 8005c5a:	42bd      	cmp	r5, r7
 8005c5c:	d120      	bne.n	8005ca0 <_printf_common+0xc8>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e010      	b.n	8005c84 <_printf_common+0xac>
 8005c62:	3701      	adds	r7, #1
 8005c64:	68e3      	ldr	r3, [r4, #12]
 8005c66:	682a      	ldr	r2, [r5, #0]
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	42bb      	cmp	r3, r7
 8005c6c:	ddd2      	ble.n	8005c14 <_printf_common+0x3c>
 8005c6e:	0022      	movs	r2, r4
 8005c70:	2301      	movs	r3, #1
 8005c72:	9901      	ldr	r1, [sp, #4]
 8005c74:	9800      	ldr	r0, [sp, #0]
 8005c76:	9e08      	ldr	r6, [sp, #32]
 8005c78:	3219      	adds	r2, #25
 8005c7a:	47b0      	blx	r6
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d1f0      	bne.n	8005c62 <_printf_common+0x8a>
 8005c80:	2001      	movs	r0, #1
 8005c82:	4240      	negs	r0, r0
 8005c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c86:	2030      	movs	r0, #48	; 0x30
 8005c88:	18e1      	adds	r1, r4, r3
 8005c8a:	3143      	adds	r1, #67	; 0x43
 8005c8c:	7008      	strb	r0, [r1, #0]
 8005c8e:	0021      	movs	r1, r4
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	3145      	adds	r1, #69	; 0x45
 8005c94:	7809      	ldrb	r1, [r1, #0]
 8005c96:	18a2      	adds	r2, r4, r2
 8005c98:	3243      	adds	r2, #67	; 0x43
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	7011      	strb	r1, [r2, #0]
 8005c9e:	e7c1      	b.n	8005c24 <_printf_common+0x4c>
 8005ca0:	0022      	movs	r2, r4
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	9901      	ldr	r1, [sp, #4]
 8005ca6:	9800      	ldr	r0, [sp, #0]
 8005ca8:	9e08      	ldr	r6, [sp, #32]
 8005caa:	321a      	adds	r2, #26
 8005cac:	47b0      	blx	r6
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d0e6      	beq.n	8005c80 <_printf_common+0xa8>
 8005cb2:	3701      	adds	r7, #1
 8005cb4:	e7d1      	b.n	8005c5a <_printf_common+0x82>
	...

08005cb8 <_printf_i>:
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cba:	b08b      	sub	sp, #44	; 0x2c
 8005cbc:	9206      	str	r2, [sp, #24]
 8005cbe:	000a      	movs	r2, r1
 8005cc0:	3243      	adds	r2, #67	; 0x43
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	9005      	str	r0, [sp, #20]
 8005cc6:	9204      	str	r2, [sp, #16]
 8005cc8:	7e0a      	ldrb	r2, [r1, #24]
 8005cca:	000c      	movs	r4, r1
 8005ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cce:	2a78      	cmp	r2, #120	; 0x78
 8005cd0:	d807      	bhi.n	8005ce2 <_printf_i+0x2a>
 8005cd2:	2a62      	cmp	r2, #98	; 0x62
 8005cd4:	d809      	bhi.n	8005cea <_printf_i+0x32>
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	d100      	bne.n	8005cdc <_printf_i+0x24>
 8005cda:	e0c1      	b.n	8005e60 <_printf_i+0x1a8>
 8005cdc:	2a58      	cmp	r2, #88	; 0x58
 8005cde:	d100      	bne.n	8005ce2 <_printf_i+0x2a>
 8005ce0:	e08c      	b.n	8005dfc <_printf_i+0x144>
 8005ce2:	0026      	movs	r6, r4
 8005ce4:	3642      	adds	r6, #66	; 0x42
 8005ce6:	7032      	strb	r2, [r6, #0]
 8005ce8:	e022      	b.n	8005d30 <_printf_i+0x78>
 8005cea:	0010      	movs	r0, r2
 8005cec:	3863      	subs	r0, #99	; 0x63
 8005cee:	2815      	cmp	r0, #21
 8005cf0:	d8f7      	bhi.n	8005ce2 <_printf_i+0x2a>
 8005cf2:	f7fa fa09 	bl	8000108 <__gnu_thumb1_case_shi>
 8005cf6:	0016      	.short	0x0016
 8005cf8:	fff6001f 	.word	0xfff6001f
 8005cfc:	fff6fff6 	.word	0xfff6fff6
 8005d00:	001ffff6 	.word	0x001ffff6
 8005d04:	fff6fff6 	.word	0xfff6fff6
 8005d08:	fff6fff6 	.word	0xfff6fff6
 8005d0c:	003600a8 	.word	0x003600a8
 8005d10:	fff6009a 	.word	0xfff6009a
 8005d14:	00b9fff6 	.word	0x00b9fff6
 8005d18:	0036fff6 	.word	0x0036fff6
 8005d1c:	fff6fff6 	.word	0xfff6fff6
 8005d20:	009e      	.short	0x009e
 8005d22:	0026      	movs	r6, r4
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	3642      	adds	r6, #66	; 0x42
 8005d28:	1d11      	adds	r1, r2, #4
 8005d2a:	6019      	str	r1, [r3, #0]
 8005d2c:	6813      	ldr	r3, [r2, #0]
 8005d2e:	7033      	strb	r3, [r6, #0]
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0a7      	b.n	8005e84 <_printf_i+0x1cc>
 8005d34:	6808      	ldr	r0, [r1, #0]
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	1d0a      	adds	r2, r1, #4
 8005d3a:	0605      	lsls	r5, r0, #24
 8005d3c:	d50b      	bpl.n	8005d56 <_printf_i+0x9e>
 8005d3e:	680d      	ldr	r5, [r1, #0]
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	da03      	bge.n	8005d4e <_printf_i+0x96>
 8005d46:	232d      	movs	r3, #45	; 0x2d
 8005d48:	9a04      	ldr	r2, [sp, #16]
 8005d4a:	426d      	negs	r5, r5
 8005d4c:	7013      	strb	r3, [r2, #0]
 8005d4e:	4b61      	ldr	r3, [pc, #388]	; (8005ed4 <_printf_i+0x21c>)
 8005d50:	270a      	movs	r7, #10
 8005d52:	9303      	str	r3, [sp, #12]
 8005d54:	e01b      	b.n	8005d8e <_printf_i+0xd6>
 8005d56:	680d      	ldr	r5, [r1, #0]
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	0641      	lsls	r1, r0, #25
 8005d5c:	d5f1      	bpl.n	8005d42 <_printf_i+0x8a>
 8005d5e:	b22d      	sxth	r5, r5
 8005d60:	e7ef      	b.n	8005d42 <_printf_i+0x8a>
 8005d62:	680d      	ldr	r5, [r1, #0]
 8005d64:	6819      	ldr	r1, [r3, #0]
 8005d66:	1d08      	adds	r0, r1, #4
 8005d68:	6018      	str	r0, [r3, #0]
 8005d6a:	062e      	lsls	r6, r5, #24
 8005d6c:	d501      	bpl.n	8005d72 <_printf_i+0xba>
 8005d6e:	680d      	ldr	r5, [r1, #0]
 8005d70:	e003      	b.n	8005d7a <_printf_i+0xc2>
 8005d72:	066d      	lsls	r5, r5, #25
 8005d74:	d5fb      	bpl.n	8005d6e <_printf_i+0xb6>
 8005d76:	680d      	ldr	r5, [r1, #0]
 8005d78:	b2ad      	uxth	r5, r5
 8005d7a:	4b56      	ldr	r3, [pc, #344]	; (8005ed4 <_printf_i+0x21c>)
 8005d7c:	2708      	movs	r7, #8
 8005d7e:	9303      	str	r3, [sp, #12]
 8005d80:	2a6f      	cmp	r2, #111	; 0x6f
 8005d82:	d000      	beq.n	8005d86 <_printf_i+0xce>
 8005d84:	3702      	adds	r7, #2
 8005d86:	0023      	movs	r3, r4
 8005d88:	2200      	movs	r2, #0
 8005d8a:	3343      	adds	r3, #67	; 0x43
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	60a3      	str	r3, [r4, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db03      	blt.n	8005d9e <_printf_i+0xe6>
 8005d96:	2204      	movs	r2, #4
 8005d98:	6821      	ldr	r1, [r4, #0]
 8005d9a:	4391      	bics	r1, r2
 8005d9c:	6021      	str	r1, [r4, #0]
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	d102      	bne.n	8005da8 <_printf_i+0xf0>
 8005da2:	9e04      	ldr	r6, [sp, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00c      	beq.n	8005dc2 <_printf_i+0x10a>
 8005da8:	9e04      	ldr	r6, [sp, #16]
 8005daa:	0028      	movs	r0, r5
 8005dac:	0039      	movs	r1, r7
 8005dae:	f7fa fa3b 	bl	8000228 <__aeabi_uidivmod>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	3e01      	subs	r6, #1
 8005db6:	5c5b      	ldrb	r3, [r3, r1]
 8005db8:	7033      	strb	r3, [r6, #0]
 8005dba:	002b      	movs	r3, r5
 8005dbc:	0005      	movs	r5, r0
 8005dbe:	429f      	cmp	r7, r3
 8005dc0:	d9f3      	bls.n	8005daa <_printf_i+0xf2>
 8005dc2:	2f08      	cmp	r7, #8
 8005dc4:	d109      	bne.n	8005dda <_printf_i+0x122>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d506      	bpl.n	8005dda <_printf_i+0x122>
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	dc02      	bgt.n	8005dda <_printf_i+0x122>
 8005dd4:	2330      	movs	r3, #48	; 0x30
 8005dd6:	3e01      	subs	r6, #1
 8005dd8:	7033      	strb	r3, [r6, #0]
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	1b9b      	subs	r3, r3, r6
 8005dde:	6123      	str	r3, [r4, #16]
 8005de0:	9b07      	ldr	r3, [sp, #28]
 8005de2:	0021      	movs	r1, r4
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	9805      	ldr	r0, [sp, #20]
 8005de8:	9b06      	ldr	r3, [sp, #24]
 8005dea:	aa09      	add	r2, sp, #36	; 0x24
 8005dec:	f7ff fef4 	bl	8005bd8 <_printf_common>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d14c      	bne.n	8005e8e <_printf_i+0x1d6>
 8005df4:	2001      	movs	r0, #1
 8005df6:	4240      	negs	r0, r0
 8005df8:	b00b      	add	sp, #44	; 0x2c
 8005dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfc:	3145      	adds	r1, #69	; 0x45
 8005dfe:	700a      	strb	r2, [r1, #0]
 8005e00:	4a34      	ldr	r2, [pc, #208]	; (8005ed4 <_printf_i+0x21c>)
 8005e02:	9203      	str	r2, [sp, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	ca20      	ldmia	r2!, {r5}
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	0608      	lsls	r0, r1, #24
 8005e0e:	d516      	bpl.n	8005e3e <_printf_i+0x186>
 8005e10:	07cb      	lsls	r3, r1, #31
 8005e12:	d502      	bpl.n	8005e1a <_printf_i+0x162>
 8005e14:	2320      	movs	r3, #32
 8005e16:	4319      	orrs	r1, r3
 8005e18:	6021      	str	r1, [r4, #0]
 8005e1a:	2710      	movs	r7, #16
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	d1b2      	bne.n	8005d86 <_printf_i+0xce>
 8005e20:	2320      	movs	r3, #32
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	439a      	bics	r2, r3
 8005e26:	6022      	str	r2, [r4, #0]
 8005e28:	e7ad      	b.n	8005d86 <_printf_i+0xce>
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	6809      	ldr	r1, [r1, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	0022      	movs	r2, r4
 8005e34:	2178      	movs	r1, #120	; 0x78
 8005e36:	3245      	adds	r2, #69	; 0x45
 8005e38:	7011      	strb	r1, [r2, #0]
 8005e3a:	4a27      	ldr	r2, [pc, #156]	; (8005ed8 <_printf_i+0x220>)
 8005e3c:	e7e1      	b.n	8005e02 <_printf_i+0x14a>
 8005e3e:	0648      	lsls	r0, r1, #25
 8005e40:	d5e6      	bpl.n	8005e10 <_printf_i+0x158>
 8005e42:	b2ad      	uxth	r5, r5
 8005e44:	e7e4      	b.n	8005e10 <_printf_i+0x158>
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	680d      	ldr	r5, [r1, #0]
 8005e4a:	1d10      	adds	r0, r2, #4
 8005e4c:	6949      	ldr	r1, [r1, #20]
 8005e4e:	6018      	str	r0, [r3, #0]
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	062e      	lsls	r6, r5, #24
 8005e54:	d501      	bpl.n	8005e5a <_printf_i+0x1a2>
 8005e56:	6019      	str	r1, [r3, #0]
 8005e58:	e002      	b.n	8005e60 <_printf_i+0x1a8>
 8005e5a:	066d      	lsls	r5, r5, #25
 8005e5c:	d5fb      	bpl.n	8005e56 <_printf_i+0x19e>
 8005e5e:	8019      	strh	r1, [r3, #0]
 8005e60:	2300      	movs	r3, #0
 8005e62:	9e04      	ldr	r6, [sp, #16]
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	e7bb      	b.n	8005de0 <_printf_i+0x128>
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	1d11      	adds	r1, r2, #4
 8005e6c:	6019      	str	r1, [r3, #0]
 8005e6e:	6816      	ldr	r6, [r2, #0]
 8005e70:	2100      	movs	r1, #0
 8005e72:	0030      	movs	r0, r6
 8005e74:	6862      	ldr	r2, [r4, #4]
 8005e76:	f000 fb45 	bl	8006504 <memchr>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d001      	beq.n	8005e82 <_printf_i+0x1ca>
 8005e7e:	1b80      	subs	r0, r0, r6
 8005e80:	6060      	str	r0, [r4, #4]
 8005e82:	6863      	ldr	r3, [r4, #4]
 8005e84:	6123      	str	r3, [r4, #16]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9a04      	ldr	r2, [sp, #16]
 8005e8a:	7013      	strb	r3, [r2, #0]
 8005e8c:	e7a8      	b.n	8005de0 <_printf_i+0x128>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	0032      	movs	r2, r6
 8005e92:	9906      	ldr	r1, [sp, #24]
 8005e94:	9805      	ldr	r0, [sp, #20]
 8005e96:	9d07      	ldr	r5, [sp, #28]
 8005e98:	47a8      	blx	r5
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	d0aa      	beq.n	8005df4 <_printf_i+0x13c>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	079b      	lsls	r3, r3, #30
 8005ea2:	d415      	bmi.n	8005ed0 <_printf_i+0x218>
 8005ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea6:	68e0      	ldr	r0, [r4, #12]
 8005ea8:	4298      	cmp	r0, r3
 8005eaa:	daa5      	bge.n	8005df8 <_printf_i+0x140>
 8005eac:	0018      	movs	r0, r3
 8005eae:	e7a3      	b.n	8005df8 <_printf_i+0x140>
 8005eb0:	0022      	movs	r2, r4
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	9906      	ldr	r1, [sp, #24]
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	9e07      	ldr	r6, [sp, #28]
 8005eba:	3219      	adds	r2, #25
 8005ebc:	47b0      	blx	r6
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d098      	beq.n	8005df4 <_printf_i+0x13c>
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	dcf0      	bgt.n	8005eb0 <_printf_i+0x1f8>
 8005ece:	e7e9      	b.n	8005ea4 <_printf_i+0x1ec>
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	e7f7      	b.n	8005ec4 <_printf_i+0x20c>
 8005ed4:	08006d81 	.word	0x08006d81
 8005ed8:	08006d92 	.word	0x08006d92

08005edc <__swbuf_r>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	0005      	movs	r5, r0
 8005ee0:	000e      	movs	r6, r1
 8005ee2:	0014      	movs	r4, r2
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d004      	beq.n	8005ef2 <__swbuf_r+0x16>
 8005ee8:	6983      	ldr	r3, [r0, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <__swbuf_r+0x16>
 8005eee:	f000 f9f9 	bl	80062e4 <__sinit>
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <__swbuf_r+0xa0>)
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d12e      	bne.n	8005f56 <__swbuf_r+0x7a>
 8005ef8:	686c      	ldr	r4, [r5, #4]
 8005efa:	69a3      	ldr	r3, [r4, #24]
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	d532      	bpl.n	8005f6a <__swbuf_r+0x8e>
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02f      	beq.n	8005f6a <__swbuf_r+0x8e>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	b2f7      	uxtb	r7, r6
 8005f10:	1a98      	subs	r0, r3, r2
 8005f12:	6963      	ldr	r3, [r4, #20]
 8005f14:	b2f6      	uxtb	r6, r6
 8005f16:	4283      	cmp	r3, r0
 8005f18:	dc05      	bgt.n	8005f26 <__swbuf_r+0x4a>
 8005f1a:	0021      	movs	r1, r4
 8005f1c:	0028      	movs	r0, r5
 8005f1e:	f000 f93f 	bl	80061a0 <_fflush_r>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d127      	bne.n	8005f76 <__swbuf_r+0x9a>
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	3001      	adds	r0, #1
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	60a3      	str	r3, [r4, #8]
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	701f      	strb	r7, [r3, #0]
 8005f36:	6963      	ldr	r3, [r4, #20]
 8005f38:	4283      	cmp	r3, r0
 8005f3a:	d004      	beq.n	8005f46 <__swbuf_r+0x6a>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	07db      	lsls	r3, r3, #31
 8005f40:	d507      	bpl.n	8005f52 <__swbuf_r+0x76>
 8005f42:	2e0a      	cmp	r6, #10
 8005f44:	d105      	bne.n	8005f52 <__swbuf_r+0x76>
 8005f46:	0021      	movs	r1, r4
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f000 f929 	bl	80061a0 <_fflush_r>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d111      	bne.n	8005f76 <__swbuf_r+0x9a>
 8005f52:	0030      	movs	r0, r6
 8005f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <__swbuf_r+0xa4>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	d101      	bne.n	8005f60 <__swbuf_r+0x84>
 8005f5c:	68ac      	ldr	r4, [r5, #8]
 8005f5e:	e7cc      	b.n	8005efa <__swbuf_r+0x1e>
 8005f60:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <__swbuf_r+0xa8>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d1c9      	bne.n	8005efa <__swbuf_r+0x1e>
 8005f66:	68ec      	ldr	r4, [r5, #12]
 8005f68:	e7c7      	b.n	8005efa <__swbuf_r+0x1e>
 8005f6a:	0021      	movs	r1, r4
 8005f6c:	0028      	movs	r0, r5
 8005f6e:	f000 f80b 	bl	8005f88 <__swsetup_r>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d0c9      	beq.n	8005f0a <__swbuf_r+0x2e>
 8005f76:	2601      	movs	r6, #1
 8005f78:	4276      	negs	r6, r6
 8005f7a:	e7ea      	b.n	8005f52 <__swbuf_r+0x76>
 8005f7c:	08006dc4 	.word	0x08006dc4
 8005f80:	08006de4 	.word	0x08006de4
 8005f84:	08006da4 	.word	0x08006da4

08005f88 <__swsetup_r>:
 8005f88:	4b37      	ldr	r3, [pc, #220]	; (8006068 <__swsetup_r+0xe0>)
 8005f8a:	b570      	push	{r4, r5, r6, lr}
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	0006      	movs	r6, r0
 8005f90:	000c      	movs	r4, r1
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	d005      	beq.n	8005fa2 <__swsetup_r+0x1a>
 8005f96:	69ab      	ldr	r3, [r5, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <__swsetup_r+0x1a>
 8005f9c:	0028      	movs	r0, r5
 8005f9e:	f000 f9a1 	bl	80062e4 <__sinit>
 8005fa2:	4b32      	ldr	r3, [pc, #200]	; (800606c <__swsetup_r+0xe4>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	d10f      	bne.n	8005fc8 <__swsetup_r+0x40>
 8005fa8:	686c      	ldr	r4, [r5, #4]
 8005faa:	230c      	movs	r3, #12
 8005fac:	5ee2      	ldrsh	r2, [r4, r3]
 8005fae:	b293      	uxth	r3, r2
 8005fb0:	0711      	lsls	r1, r2, #28
 8005fb2:	d42d      	bmi.n	8006010 <__swsetup_r+0x88>
 8005fb4:	06d9      	lsls	r1, r3, #27
 8005fb6:	d411      	bmi.n	8005fdc <__swsetup_r+0x54>
 8005fb8:	2309      	movs	r3, #9
 8005fba:	2001      	movs	r0, #1
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	3337      	adds	r3, #55	; 0x37
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	4240      	negs	r0, r0
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	4b29      	ldr	r3, [pc, #164]	; (8006070 <__swsetup_r+0xe8>)
 8005fca:	429c      	cmp	r4, r3
 8005fcc:	d101      	bne.n	8005fd2 <__swsetup_r+0x4a>
 8005fce:	68ac      	ldr	r4, [r5, #8]
 8005fd0:	e7eb      	b.n	8005faa <__swsetup_r+0x22>
 8005fd2:	4b28      	ldr	r3, [pc, #160]	; (8006074 <__swsetup_r+0xec>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	d1e8      	bne.n	8005faa <__swsetup_r+0x22>
 8005fd8:	68ec      	ldr	r4, [r5, #12]
 8005fda:	e7e6      	b.n	8005faa <__swsetup_r+0x22>
 8005fdc:	075b      	lsls	r3, r3, #29
 8005fde:	d513      	bpl.n	8006008 <__swsetup_r+0x80>
 8005fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d008      	beq.n	8005ff8 <__swsetup_r+0x70>
 8005fe6:	0023      	movs	r3, r4
 8005fe8:	3344      	adds	r3, #68	; 0x44
 8005fea:	4299      	cmp	r1, r3
 8005fec:	d002      	beq.n	8005ff4 <__swsetup_r+0x6c>
 8005fee:	0030      	movs	r0, r6
 8005ff0:	f000 fa94 	bl	800651c <_free_r>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ff8:	2224      	movs	r2, #36	; 0x24
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	4393      	bics	r3, r2
 8005ffe:	81a3      	strh	r3, [r4, #12]
 8006000:	2300      	movs	r3, #0
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	2308      	movs	r3, #8
 800600a:	89a2      	ldrh	r2, [r4, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <__swsetup_r+0xa6>
 8006016:	21a0      	movs	r1, #160	; 0xa0
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	0089      	lsls	r1, r1, #2
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	400b      	ands	r3, r1
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <__swsetup_r+0xa6>
 8006026:	0021      	movs	r1, r4
 8006028:	0030      	movs	r0, r6
 800602a:	f000 fa27 	bl	800647c <__smakebuf_r>
 800602e:	220c      	movs	r2, #12
 8006030:	5ea3      	ldrsh	r3, [r4, r2]
 8006032:	2001      	movs	r0, #1
 8006034:	001a      	movs	r2, r3
 8006036:	b299      	uxth	r1, r3
 8006038:	4002      	ands	r2, r0
 800603a:	4203      	tst	r3, r0
 800603c:	d00f      	beq.n	800605e <__swsetup_r+0xd6>
 800603e:	2200      	movs	r2, #0
 8006040:	60a2      	str	r2, [r4, #8]
 8006042:	6962      	ldr	r2, [r4, #20]
 8006044:	4252      	negs	r2, r2
 8006046:	61a2      	str	r2, [r4, #24]
 8006048:	2000      	movs	r0, #0
 800604a:	6922      	ldr	r2, [r4, #16]
 800604c:	4282      	cmp	r2, r0
 800604e:	d1ba      	bne.n	8005fc6 <__swsetup_r+0x3e>
 8006050:	060a      	lsls	r2, r1, #24
 8006052:	d5b8      	bpl.n	8005fc6 <__swsetup_r+0x3e>
 8006054:	2240      	movs	r2, #64	; 0x40
 8006056:	4313      	orrs	r3, r2
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	3801      	subs	r0, #1
 800605c:	e7b3      	b.n	8005fc6 <__swsetup_r+0x3e>
 800605e:	0788      	lsls	r0, r1, #30
 8006060:	d400      	bmi.n	8006064 <__swsetup_r+0xdc>
 8006062:	6962      	ldr	r2, [r4, #20]
 8006064:	60a2      	str	r2, [r4, #8]
 8006066:	e7ef      	b.n	8006048 <__swsetup_r+0xc0>
 8006068:	20000094 	.word	0x20000094
 800606c:	08006dc4 	.word	0x08006dc4
 8006070:	08006de4 	.word	0x08006de4
 8006074:	08006da4 	.word	0x08006da4

08006078 <abort>:
 8006078:	2006      	movs	r0, #6
 800607a:	b510      	push	{r4, lr}
 800607c:	f000 fb6c 	bl	8006758 <raise>
 8006080:	2001      	movs	r0, #1
 8006082:	f7fa ffa9 	bl	8000fd8 <_exit>
	...

08006088 <__sflush_r>:
 8006088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800608a:	898b      	ldrh	r3, [r1, #12]
 800608c:	0005      	movs	r5, r0
 800608e:	000c      	movs	r4, r1
 8006090:	071a      	lsls	r2, r3, #28
 8006092:	d45f      	bmi.n	8006154 <__sflush_r+0xcc>
 8006094:	684a      	ldr	r2, [r1, #4]
 8006096:	2a00      	cmp	r2, #0
 8006098:	dc04      	bgt.n	80060a4 <__sflush_r+0x1c>
 800609a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800609c:	2a00      	cmp	r2, #0
 800609e:	dc01      	bgt.n	80060a4 <__sflush_r+0x1c>
 80060a0:	2000      	movs	r0, #0
 80060a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060a6:	2f00      	cmp	r7, #0
 80060a8:	d0fa      	beq.n	80060a0 <__sflush_r+0x18>
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	682e      	ldr	r6, [r5, #0]
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	001a      	movs	r2, r3
 80060b4:	0149      	lsls	r1, r1, #5
 80060b6:	400a      	ands	r2, r1
 80060b8:	420b      	tst	r3, r1
 80060ba:	d034      	beq.n	8006126 <__sflush_r+0x9e>
 80060bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	075b      	lsls	r3, r3, #29
 80060c2:	d506      	bpl.n	80060d2 <__sflush_r+0x4a>
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	1ac0      	subs	r0, r0, r3
 80060c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <__sflush_r+0x4a>
 80060ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060d0:	1ac0      	subs	r0, r0, r3
 80060d2:	0002      	movs	r2, r0
 80060d4:	6a21      	ldr	r1, [r4, #32]
 80060d6:	2300      	movs	r3, #0
 80060d8:	0028      	movs	r0, r5
 80060da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060dc:	47b8      	blx	r7
 80060de:	89a1      	ldrh	r1, [r4, #12]
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d106      	bne.n	80060f2 <__sflush_r+0x6a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	2b1d      	cmp	r3, #29
 80060e8:	d831      	bhi.n	800614e <__sflush_r+0xc6>
 80060ea:	4a2c      	ldr	r2, [pc, #176]	; (800619c <__sflush_r+0x114>)
 80060ec:	40da      	lsrs	r2, r3
 80060ee:	07d3      	lsls	r3, r2, #31
 80060f0:	d52d      	bpl.n	800614e <__sflush_r+0xc6>
 80060f2:	2300      	movs	r3, #0
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	04cb      	lsls	r3, r1, #19
 80060fc:	d505      	bpl.n	800610a <__sflush_r+0x82>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d102      	bne.n	8006108 <__sflush_r+0x80>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d100      	bne.n	800610a <__sflush_r+0x82>
 8006108:	6560      	str	r0, [r4, #84]	; 0x54
 800610a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800610c:	602e      	str	r6, [r5, #0]
 800610e:	2900      	cmp	r1, #0
 8006110:	d0c6      	beq.n	80060a0 <__sflush_r+0x18>
 8006112:	0023      	movs	r3, r4
 8006114:	3344      	adds	r3, #68	; 0x44
 8006116:	4299      	cmp	r1, r3
 8006118:	d002      	beq.n	8006120 <__sflush_r+0x98>
 800611a:	0028      	movs	r0, r5
 800611c:	f000 f9fe 	bl	800651c <_free_r>
 8006120:	2000      	movs	r0, #0
 8006122:	6360      	str	r0, [r4, #52]	; 0x34
 8006124:	e7bd      	b.n	80060a2 <__sflush_r+0x1a>
 8006126:	2301      	movs	r3, #1
 8006128:	0028      	movs	r0, r5
 800612a:	6a21      	ldr	r1, [r4, #32]
 800612c:	47b8      	blx	r7
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d1c5      	bne.n	80060be <__sflush_r+0x36>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0c2      	beq.n	80060be <__sflush_r+0x36>
 8006138:	2b1d      	cmp	r3, #29
 800613a:	d001      	beq.n	8006140 <__sflush_r+0xb8>
 800613c:	2b16      	cmp	r3, #22
 800613e:	d101      	bne.n	8006144 <__sflush_r+0xbc>
 8006140:	602e      	str	r6, [r5, #0]
 8006142:	e7ad      	b.n	80060a0 <__sflush_r+0x18>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	89a2      	ldrh	r2, [r4, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	e7a9      	b.n	80060a2 <__sflush_r+0x1a>
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	430b      	orrs	r3, r1
 8006152:	e7fa      	b.n	800614a <__sflush_r+0xc2>
 8006154:	690f      	ldr	r7, [r1, #16]
 8006156:	2f00      	cmp	r7, #0
 8006158:	d0a2      	beq.n	80060a0 <__sflush_r+0x18>
 800615a:	680a      	ldr	r2, [r1, #0]
 800615c:	600f      	str	r7, [r1, #0]
 800615e:	1bd2      	subs	r2, r2, r7
 8006160:	9201      	str	r2, [sp, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	079b      	lsls	r3, r3, #30
 8006166:	d100      	bne.n	800616a <__sflush_r+0xe2>
 8006168:	694a      	ldr	r2, [r1, #20]
 800616a:	60a2      	str	r2, [r4, #8]
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dc00      	bgt.n	8006174 <__sflush_r+0xec>
 8006172:	e795      	b.n	80060a0 <__sflush_r+0x18>
 8006174:	003a      	movs	r2, r7
 8006176:	0028      	movs	r0, r5
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	6a21      	ldr	r1, [r4, #32]
 800617c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800617e:	47b0      	blx	r6
 8006180:	2800      	cmp	r0, #0
 8006182:	dc06      	bgt.n	8006192 <__sflush_r+0x10a>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	2001      	movs	r0, #1
 8006188:	89a2      	ldrh	r2, [r4, #12]
 800618a:	4240      	negs	r0, r0
 800618c:	4313      	orrs	r3, r2
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	e787      	b.n	80060a2 <__sflush_r+0x1a>
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	183f      	adds	r7, r7, r0
 8006196:	1a1b      	subs	r3, r3, r0
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	e7e7      	b.n	800616c <__sflush_r+0xe4>
 800619c:	20400001 	.word	0x20400001

080061a0 <_fflush_r>:
 80061a0:	690b      	ldr	r3, [r1, #16]
 80061a2:	b570      	push	{r4, r5, r6, lr}
 80061a4:	0005      	movs	r5, r0
 80061a6:	000c      	movs	r4, r1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <_fflush_r+0x12>
 80061ac:	2500      	movs	r5, #0
 80061ae:	0028      	movs	r0, r5
 80061b0:	bd70      	pop	{r4, r5, r6, pc}
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d004      	beq.n	80061c0 <_fflush_r+0x20>
 80061b6:	6983      	ldr	r3, [r0, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <_fflush_r+0x20>
 80061bc:	f000 f892 	bl	80062e4 <__sinit>
 80061c0:	4b14      	ldr	r3, [pc, #80]	; (8006214 <_fflush_r+0x74>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d11b      	bne.n	80061fe <_fflush_r+0x5e>
 80061c6:	686c      	ldr	r4, [r5, #4]
 80061c8:	220c      	movs	r2, #12
 80061ca:	5ea3      	ldrsh	r3, [r4, r2]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0ed      	beq.n	80061ac <_fflush_r+0xc>
 80061d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061d2:	07d2      	lsls	r2, r2, #31
 80061d4:	d404      	bmi.n	80061e0 <_fflush_r+0x40>
 80061d6:	059b      	lsls	r3, r3, #22
 80061d8:	d402      	bmi.n	80061e0 <_fflush_r+0x40>
 80061da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061dc:	f000 f923 	bl	8006426 <__retarget_lock_acquire_recursive>
 80061e0:	0028      	movs	r0, r5
 80061e2:	0021      	movs	r1, r4
 80061e4:	f7ff ff50 	bl	8006088 <__sflush_r>
 80061e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ea:	0005      	movs	r5, r0
 80061ec:	07db      	lsls	r3, r3, #31
 80061ee:	d4de      	bmi.n	80061ae <_fflush_r+0xe>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	059b      	lsls	r3, r3, #22
 80061f4:	d4db      	bmi.n	80061ae <_fflush_r+0xe>
 80061f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f8:	f000 f916 	bl	8006428 <__retarget_lock_release_recursive>
 80061fc:	e7d7      	b.n	80061ae <_fflush_r+0xe>
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <_fflush_r+0x78>)
 8006200:	429c      	cmp	r4, r3
 8006202:	d101      	bne.n	8006208 <_fflush_r+0x68>
 8006204:	68ac      	ldr	r4, [r5, #8]
 8006206:	e7df      	b.n	80061c8 <_fflush_r+0x28>
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <_fflush_r+0x7c>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d1dc      	bne.n	80061c8 <_fflush_r+0x28>
 800620e:	68ec      	ldr	r4, [r5, #12]
 8006210:	e7da      	b.n	80061c8 <_fflush_r+0x28>
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	08006dc4 	.word	0x08006dc4
 8006218:	08006de4 	.word	0x08006de4
 800621c:	08006da4 	.word	0x08006da4

08006220 <std>:
 8006220:	2300      	movs	r3, #0
 8006222:	b510      	push	{r4, lr}
 8006224:	0004      	movs	r4, r0
 8006226:	6003      	str	r3, [r0, #0]
 8006228:	6043      	str	r3, [r0, #4]
 800622a:	6083      	str	r3, [r0, #8]
 800622c:	8181      	strh	r1, [r0, #12]
 800622e:	6643      	str	r3, [r0, #100]	; 0x64
 8006230:	0019      	movs	r1, r3
 8006232:	81c2      	strh	r2, [r0, #14]
 8006234:	6103      	str	r3, [r0, #16]
 8006236:	6143      	str	r3, [r0, #20]
 8006238:	6183      	str	r3, [r0, #24]
 800623a:	2208      	movs	r2, #8
 800623c:	305c      	adds	r0, #92	; 0x5c
 800623e:	f7ff fb62 	bl	8005906 <memset>
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <std+0x38>)
 8006244:	6224      	str	r4, [r4, #32]
 8006246:	6263      	str	r3, [r4, #36]	; 0x24
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <std+0x3c>)
 800624a:	62a3      	str	r3, [r4, #40]	; 0x28
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <std+0x40>)
 800624e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <std+0x44>)
 8006252:	6323      	str	r3, [r4, #48]	; 0x30
 8006254:	bd10      	pop	{r4, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	08006799 	.word	0x08006799
 800625c:	080067c1 	.word	0x080067c1
 8006260:	080067f9 	.word	0x080067f9
 8006264:	08006825 	.word	0x08006825

08006268 <_cleanup_r>:
 8006268:	b510      	push	{r4, lr}
 800626a:	4902      	ldr	r1, [pc, #8]	; (8006274 <_cleanup_r+0xc>)
 800626c:	f000 f8ba 	bl	80063e4 <_fwalk_reent>
 8006270:	bd10      	pop	{r4, pc}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	080061a1 	.word	0x080061a1

08006278 <__sfmoreglue>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	2568      	movs	r5, #104	; 0x68
 800627c:	1e4a      	subs	r2, r1, #1
 800627e:	4355      	muls	r5, r2
 8006280:	000e      	movs	r6, r1
 8006282:	0029      	movs	r1, r5
 8006284:	3174      	adds	r1, #116	; 0x74
 8006286:	f000 f9b5 	bl	80065f4 <_malloc_r>
 800628a:	1e04      	subs	r4, r0, #0
 800628c:	d008      	beq.n	80062a0 <__sfmoreglue+0x28>
 800628e:	2100      	movs	r1, #0
 8006290:	002a      	movs	r2, r5
 8006292:	6001      	str	r1, [r0, #0]
 8006294:	6046      	str	r6, [r0, #4]
 8006296:	300c      	adds	r0, #12
 8006298:	60a0      	str	r0, [r4, #8]
 800629a:	3268      	adds	r2, #104	; 0x68
 800629c:	f7ff fb33 	bl	8005906 <memset>
 80062a0:	0020      	movs	r0, r4
 80062a2:	bd70      	pop	{r4, r5, r6, pc}

080062a4 <__sfp_lock_acquire>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	4802      	ldr	r0, [pc, #8]	; (80062b0 <__sfp_lock_acquire+0xc>)
 80062a8:	f000 f8bd 	bl	8006426 <__retarget_lock_acquire_recursive>
 80062ac:	bd10      	pop	{r4, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	20000331 	.word	0x20000331

080062b4 <__sfp_lock_release>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	4802      	ldr	r0, [pc, #8]	; (80062c0 <__sfp_lock_release+0xc>)
 80062b8:	f000 f8b6 	bl	8006428 <__retarget_lock_release_recursive>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000331 	.word	0x20000331

080062c4 <__sinit_lock_acquire>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4802      	ldr	r0, [pc, #8]	; (80062d0 <__sinit_lock_acquire+0xc>)
 80062c8:	f000 f8ad 	bl	8006426 <__retarget_lock_acquire_recursive>
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	20000332 	.word	0x20000332

080062d4 <__sinit_lock_release>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	4802      	ldr	r0, [pc, #8]	; (80062e0 <__sinit_lock_release+0xc>)
 80062d8:	f000 f8a6 	bl	8006428 <__retarget_lock_release_recursive>
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	20000332 	.word	0x20000332

080062e4 <__sinit>:
 80062e4:	b513      	push	{r0, r1, r4, lr}
 80062e6:	0004      	movs	r4, r0
 80062e8:	f7ff ffec 	bl	80062c4 <__sinit_lock_acquire>
 80062ec:	69a3      	ldr	r3, [r4, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <__sinit+0x14>
 80062f2:	f7ff ffef 	bl	80062d4 <__sinit_lock_release>
 80062f6:	bd13      	pop	{r0, r1, r4, pc}
 80062f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80062fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80062fc:	6523      	str	r3, [r4, #80]	; 0x50
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <__sinit+0x68>)
 8006300:	4a13      	ldr	r2, [pc, #76]	; (8006350 <__sinit+0x6c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	62a2      	str	r2, [r4, #40]	; 0x28
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	42a3      	cmp	r3, r4
 800630a:	d101      	bne.n	8006310 <__sinit+0x2c>
 800630c:	2301      	movs	r3, #1
 800630e:	61a3      	str	r3, [r4, #24]
 8006310:	0020      	movs	r0, r4
 8006312:	f000 f81f 	bl	8006354 <__sfp>
 8006316:	6060      	str	r0, [r4, #4]
 8006318:	0020      	movs	r0, r4
 800631a:	f000 f81b 	bl	8006354 <__sfp>
 800631e:	60a0      	str	r0, [r4, #8]
 8006320:	0020      	movs	r0, r4
 8006322:	f000 f817 	bl	8006354 <__sfp>
 8006326:	2200      	movs	r2, #0
 8006328:	2104      	movs	r1, #4
 800632a:	60e0      	str	r0, [r4, #12]
 800632c:	6860      	ldr	r0, [r4, #4]
 800632e:	f7ff ff77 	bl	8006220 <std>
 8006332:	2201      	movs	r2, #1
 8006334:	2109      	movs	r1, #9
 8006336:	68a0      	ldr	r0, [r4, #8]
 8006338:	f7ff ff72 	bl	8006220 <std>
 800633c:	2202      	movs	r2, #2
 800633e:	2112      	movs	r1, #18
 8006340:	68e0      	ldr	r0, [r4, #12]
 8006342:	f7ff ff6d 	bl	8006220 <std>
 8006346:	2301      	movs	r3, #1
 8006348:	61a3      	str	r3, [r4, #24]
 800634a:	e7d2      	b.n	80062f2 <__sinit+0xe>
 800634c:	08006d6c 	.word	0x08006d6c
 8006350:	08006269 	.word	0x08006269

08006354 <__sfp>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	0007      	movs	r7, r0
 8006358:	f7ff ffa4 	bl	80062a4 <__sfp_lock_acquire>
 800635c:	4b1f      	ldr	r3, [pc, #124]	; (80063dc <__sfp+0x88>)
 800635e:	681e      	ldr	r6, [r3, #0]
 8006360:	69b3      	ldr	r3, [r6, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <__sfp+0x18>
 8006366:	0030      	movs	r0, r6
 8006368:	f7ff ffbc 	bl	80062e4 <__sinit>
 800636c:	3648      	adds	r6, #72	; 0x48
 800636e:	68b4      	ldr	r4, [r6, #8]
 8006370:	6873      	ldr	r3, [r6, #4]
 8006372:	3b01      	subs	r3, #1
 8006374:	d504      	bpl.n	8006380 <__sfp+0x2c>
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d022      	beq.n	80063c2 <__sfp+0x6e>
 800637c:	6836      	ldr	r6, [r6, #0]
 800637e:	e7f6      	b.n	800636e <__sfp+0x1a>
 8006380:	220c      	movs	r2, #12
 8006382:	5ea5      	ldrsh	r5, [r4, r2]
 8006384:	2d00      	cmp	r5, #0
 8006386:	d11a      	bne.n	80063be <__sfp+0x6a>
 8006388:	0020      	movs	r0, r4
 800638a:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <__sfp+0x8c>)
 800638c:	3058      	adds	r0, #88	; 0x58
 800638e:	60e3      	str	r3, [r4, #12]
 8006390:	6665      	str	r5, [r4, #100]	; 0x64
 8006392:	f000 f847 	bl	8006424 <__retarget_lock_init_recursive>
 8006396:	f7ff ff8d 	bl	80062b4 <__sfp_lock_release>
 800639a:	0020      	movs	r0, r4
 800639c:	2208      	movs	r2, #8
 800639e:	0029      	movs	r1, r5
 80063a0:	6025      	str	r5, [r4, #0]
 80063a2:	60a5      	str	r5, [r4, #8]
 80063a4:	6065      	str	r5, [r4, #4]
 80063a6:	6125      	str	r5, [r4, #16]
 80063a8:	6165      	str	r5, [r4, #20]
 80063aa:	61a5      	str	r5, [r4, #24]
 80063ac:	305c      	adds	r0, #92	; 0x5c
 80063ae:	f7ff faaa 	bl	8005906 <memset>
 80063b2:	6365      	str	r5, [r4, #52]	; 0x34
 80063b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80063b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80063b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80063ba:	0020      	movs	r0, r4
 80063bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063be:	3468      	adds	r4, #104	; 0x68
 80063c0:	e7d7      	b.n	8006372 <__sfp+0x1e>
 80063c2:	2104      	movs	r1, #4
 80063c4:	0038      	movs	r0, r7
 80063c6:	f7ff ff57 	bl	8006278 <__sfmoreglue>
 80063ca:	1e04      	subs	r4, r0, #0
 80063cc:	6030      	str	r0, [r6, #0]
 80063ce:	d1d5      	bne.n	800637c <__sfp+0x28>
 80063d0:	f7ff ff70 	bl	80062b4 <__sfp_lock_release>
 80063d4:	230c      	movs	r3, #12
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	e7ef      	b.n	80063ba <__sfp+0x66>
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	08006d6c 	.word	0x08006d6c
 80063e0:	ffff0001 	.word	0xffff0001

080063e4 <_fwalk_reent>:
 80063e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e6:	0004      	movs	r4, r0
 80063e8:	0006      	movs	r6, r0
 80063ea:	2700      	movs	r7, #0
 80063ec:	9101      	str	r1, [sp, #4]
 80063ee:	3448      	adds	r4, #72	; 0x48
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	68a5      	ldr	r5, [r4, #8]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	9b00      	ldr	r3, [sp, #0]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	d504      	bpl.n	8006408 <_fwalk_reent+0x24>
 80063fe:	6824      	ldr	r4, [r4, #0]
 8006400:	2c00      	cmp	r4, #0
 8006402:	d1f5      	bne.n	80063f0 <_fwalk_reent+0xc>
 8006404:	0038      	movs	r0, r7
 8006406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006408:	89ab      	ldrh	r3, [r5, #12]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d908      	bls.n	8006420 <_fwalk_reent+0x3c>
 800640e:	220e      	movs	r2, #14
 8006410:	5eab      	ldrsh	r3, [r5, r2]
 8006412:	3301      	adds	r3, #1
 8006414:	d004      	beq.n	8006420 <_fwalk_reent+0x3c>
 8006416:	0029      	movs	r1, r5
 8006418:	0030      	movs	r0, r6
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	4798      	blx	r3
 800641e:	4307      	orrs	r7, r0
 8006420:	3568      	adds	r5, #104	; 0x68
 8006422:	e7e8      	b.n	80063f6 <_fwalk_reent+0x12>

08006424 <__retarget_lock_init_recursive>:
 8006424:	4770      	bx	lr

08006426 <__retarget_lock_acquire_recursive>:
 8006426:	4770      	bx	lr

08006428 <__retarget_lock_release_recursive>:
 8006428:	4770      	bx	lr
	...

0800642c <__swhatbuf_r>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	000e      	movs	r6, r1
 8006430:	001d      	movs	r5, r3
 8006432:	230e      	movs	r3, #14
 8006434:	5ec9      	ldrsh	r1, [r1, r3]
 8006436:	0014      	movs	r4, r2
 8006438:	b096      	sub	sp, #88	; 0x58
 800643a:	2900      	cmp	r1, #0
 800643c:	da08      	bge.n	8006450 <__swhatbuf_r+0x24>
 800643e:	220c      	movs	r2, #12
 8006440:	5eb3      	ldrsh	r3, [r6, r2]
 8006442:	2200      	movs	r2, #0
 8006444:	602a      	str	r2, [r5, #0]
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	d411      	bmi.n	800646e <__swhatbuf_r+0x42>
 800644a:	2380      	movs	r3, #128	; 0x80
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	e00f      	b.n	8006470 <__swhatbuf_r+0x44>
 8006450:	466a      	mov	r2, sp
 8006452:	f000 fa13 	bl	800687c <_fstat_r>
 8006456:	2800      	cmp	r0, #0
 8006458:	dbf1      	blt.n	800643e <__swhatbuf_r+0x12>
 800645a:	23f0      	movs	r3, #240	; 0xf0
 800645c:	9901      	ldr	r1, [sp, #4]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	4019      	ands	r1, r3
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <__swhatbuf_r+0x4c>)
 8006464:	18c9      	adds	r1, r1, r3
 8006466:	424b      	negs	r3, r1
 8006468:	4159      	adcs	r1, r3
 800646a:	6029      	str	r1, [r5, #0]
 800646c:	e7ed      	b.n	800644a <__swhatbuf_r+0x1e>
 800646e:	2340      	movs	r3, #64	; 0x40
 8006470:	2000      	movs	r0, #0
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	b016      	add	sp, #88	; 0x58
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	ffffe000 	.word	0xffffe000

0800647c <__smakebuf_r>:
 800647c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800647e:	2602      	movs	r6, #2
 8006480:	898b      	ldrh	r3, [r1, #12]
 8006482:	0005      	movs	r5, r0
 8006484:	000c      	movs	r4, r1
 8006486:	4233      	tst	r3, r6
 8006488:	d006      	beq.n	8006498 <__smakebuf_r+0x1c>
 800648a:	0023      	movs	r3, r4
 800648c:	3347      	adds	r3, #71	; 0x47
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	6123      	str	r3, [r4, #16]
 8006492:	2301      	movs	r3, #1
 8006494:	6163      	str	r3, [r4, #20]
 8006496:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006498:	466a      	mov	r2, sp
 800649a:	ab01      	add	r3, sp, #4
 800649c:	f7ff ffc6 	bl	800642c <__swhatbuf_r>
 80064a0:	9900      	ldr	r1, [sp, #0]
 80064a2:	0007      	movs	r7, r0
 80064a4:	0028      	movs	r0, r5
 80064a6:	f000 f8a5 	bl	80065f4 <_malloc_r>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d108      	bne.n	80064c0 <__smakebuf_r+0x44>
 80064ae:	220c      	movs	r2, #12
 80064b0:	5ea3      	ldrsh	r3, [r4, r2]
 80064b2:	059a      	lsls	r2, r3, #22
 80064b4:	d4ef      	bmi.n	8006496 <__smakebuf_r+0x1a>
 80064b6:	2203      	movs	r2, #3
 80064b8:	4393      	bics	r3, r2
 80064ba:	431e      	orrs	r6, r3
 80064bc:	81a6      	strh	r6, [r4, #12]
 80064be:	e7e4      	b.n	800648a <__smakebuf_r+0xe>
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <__smakebuf_r+0x84>)
 80064c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	89a2      	ldrh	r2, [r4, #12]
 80064c8:	6020      	str	r0, [r4, #0]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	6120      	str	r0, [r4, #16]
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <__smakebuf_r+0x7a>
 80064da:	0028      	movs	r0, r5
 80064dc:	230e      	movs	r3, #14
 80064de:	5ee1      	ldrsh	r1, [r4, r3]
 80064e0:	f000 f9de 	bl	80068a0 <_isatty_r>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d006      	beq.n	80064f6 <__smakebuf_r+0x7a>
 80064e8:	2203      	movs	r2, #3
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	4393      	bics	r3, r2
 80064ee:	001a      	movs	r2, r3
 80064f0:	2301      	movs	r3, #1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	89a0      	ldrh	r0, [r4, #12]
 80064f8:	4307      	orrs	r7, r0
 80064fa:	81a7      	strh	r7, [r4, #12]
 80064fc:	e7cb      	b.n	8006496 <__smakebuf_r+0x1a>
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	08006269 	.word	0x08006269

08006504 <memchr>:
 8006504:	b2c9      	uxtb	r1, r1
 8006506:	1882      	adds	r2, r0, r2
 8006508:	4290      	cmp	r0, r2
 800650a:	d101      	bne.n	8006510 <memchr+0xc>
 800650c:	2000      	movs	r0, #0
 800650e:	4770      	bx	lr
 8006510:	7803      	ldrb	r3, [r0, #0]
 8006512:	428b      	cmp	r3, r1
 8006514:	d0fb      	beq.n	800650e <memchr+0xa>
 8006516:	3001      	adds	r0, #1
 8006518:	e7f6      	b.n	8006508 <memchr+0x4>
	...

0800651c <_free_r>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	0005      	movs	r5, r0
 8006520:	2900      	cmp	r1, #0
 8006522:	d010      	beq.n	8006546 <_free_r+0x2a>
 8006524:	1f0c      	subs	r4, r1, #4
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	da00      	bge.n	800652e <_free_r+0x12>
 800652c:	18e4      	adds	r4, r4, r3
 800652e:	0028      	movs	r0, r5
 8006530:	f000 f9dc 	bl	80068ec <__malloc_lock>
 8006534:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <_free_r+0x90>)
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <_free_r+0x2c>
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	6014      	str	r4, [r2, #0]
 8006540:	0028      	movs	r0, r5
 8006542:	f000 f9db 	bl	80068fc <__malloc_unlock>
 8006546:	bd70      	pop	{r4, r5, r6, pc}
 8006548:	42a3      	cmp	r3, r4
 800654a:	d908      	bls.n	800655e <_free_r+0x42>
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	1860      	adds	r0, r4, r1
 8006550:	4283      	cmp	r3, r0
 8006552:	d1f3      	bne.n	800653c <_free_r+0x20>
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	1841      	adds	r1, r0, r1
 800655a:	6021      	str	r1, [r4, #0]
 800655c:	e7ee      	b.n	800653c <_free_r+0x20>
 800655e:	001a      	movs	r2, r3
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <_free_r+0x4e>
 8006566:	42a3      	cmp	r3, r4
 8006568:	d9f9      	bls.n	800655e <_free_r+0x42>
 800656a:	6811      	ldr	r1, [r2, #0]
 800656c:	1850      	adds	r0, r2, r1
 800656e:	42a0      	cmp	r0, r4
 8006570:	d10b      	bne.n	800658a <_free_r+0x6e>
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1809      	adds	r1, r1, r0
 8006576:	1850      	adds	r0, r2, r1
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	4283      	cmp	r3, r0
 800657c:	d1e0      	bne.n	8006540 <_free_r+0x24>
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	1841      	adds	r1, r0, r1
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	6053      	str	r3, [r2, #4]
 8006588:	e7da      	b.n	8006540 <_free_r+0x24>
 800658a:	42a0      	cmp	r0, r4
 800658c:	d902      	bls.n	8006594 <_free_r+0x78>
 800658e:	230c      	movs	r3, #12
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	e7d5      	b.n	8006540 <_free_r+0x24>
 8006594:	6821      	ldr	r1, [r4, #0]
 8006596:	1860      	adds	r0, r4, r1
 8006598:	4283      	cmp	r3, r0
 800659a:	d103      	bne.n	80065a4 <_free_r+0x88>
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	1841      	adds	r1, r0, r1
 80065a2:	6021      	str	r1, [r4, #0]
 80065a4:	6063      	str	r3, [r4, #4]
 80065a6:	6054      	str	r4, [r2, #4]
 80065a8:	e7ca      	b.n	8006540 <_free_r+0x24>
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	20000334 	.word	0x20000334

080065b0 <sbrk_aligned>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4e0f      	ldr	r6, [pc, #60]	; (80065f0 <sbrk_aligned+0x40>)
 80065b4:	000d      	movs	r5, r1
 80065b6:	6831      	ldr	r1, [r6, #0]
 80065b8:	0004      	movs	r4, r0
 80065ba:	2900      	cmp	r1, #0
 80065bc:	d102      	bne.n	80065c4 <sbrk_aligned+0x14>
 80065be:	f000 f88f 	bl	80066e0 <_sbrk_r>
 80065c2:	6030      	str	r0, [r6, #0]
 80065c4:	0029      	movs	r1, r5
 80065c6:	0020      	movs	r0, r4
 80065c8:	f000 f88a 	bl	80066e0 <_sbrk_r>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d00a      	beq.n	80065e6 <sbrk_aligned+0x36>
 80065d0:	2303      	movs	r3, #3
 80065d2:	1cc5      	adds	r5, r0, #3
 80065d4:	439d      	bics	r5, r3
 80065d6:	42a8      	cmp	r0, r5
 80065d8:	d007      	beq.n	80065ea <sbrk_aligned+0x3a>
 80065da:	1a29      	subs	r1, r5, r0
 80065dc:	0020      	movs	r0, r4
 80065de:	f000 f87f 	bl	80066e0 <_sbrk_r>
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	d101      	bne.n	80065ea <sbrk_aligned+0x3a>
 80065e6:	2501      	movs	r5, #1
 80065e8:	426d      	negs	r5, r5
 80065ea:	0028      	movs	r0, r5
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	20000338 	.word	0x20000338

080065f4 <_malloc_r>:
 80065f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f6:	2203      	movs	r2, #3
 80065f8:	1ccb      	adds	r3, r1, #3
 80065fa:	4393      	bics	r3, r2
 80065fc:	3308      	adds	r3, #8
 80065fe:	0006      	movs	r6, r0
 8006600:	001f      	movs	r7, r3
 8006602:	2b0c      	cmp	r3, #12
 8006604:	d232      	bcs.n	800666c <_malloc_r+0x78>
 8006606:	270c      	movs	r7, #12
 8006608:	42b9      	cmp	r1, r7
 800660a:	d831      	bhi.n	8006670 <_malloc_r+0x7c>
 800660c:	0030      	movs	r0, r6
 800660e:	f000 f96d 	bl	80068ec <__malloc_lock>
 8006612:	4d32      	ldr	r5, [pc, #200]	; (80066dc <_malloc_r+0xe8>)
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	001c      	movs	r4, r3
 8006618:	2c00      	cmp	r4, #0
 800661a:	d12e      	bne.n	800667a <_malloc_r+0x86>
 800661c:	0039      	movs	r1, r7
 800661e:	0030      	movs	r0, r6
 8006620:	f7ff ffc6 	bl	80065b0 <sbrk_aligned>
 8006624:	0004      	movs	r4, r0
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d11e      	bne.n	8006668 <_malloc_r+0x74>
 800662a:	682c      	ldr	r4, [r5, #0]
 800662c:	0025      	movs	r5, r4
 800662e:	2d00      	cmp	r5, #0
 8006630:	d14a      	bne.n	80066c8 <_malloc_r+0xd4>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	0029      	movs	r1, r5
 8006636:	18e3      	adds	r3, r4, r3
 8006638:	0030      	movs	r0, r6
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	f000 f850 	bl	80066e0 <_sbrk_r>
 8006640:	9b01      	ldr	r3, [sp, #4]
 8006642:	4283      	cmp	r3, r0
 8006644:	d143      	bne.n	80066ce <_malloc_r+0xda>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	3703      	adds	r7, #3
 800664a:	1aff      	subs	r7, r7, r3
 800664c:	2303      	movs	r3, #3
 800664e:	439f      	bics	r7, r3
 8006650:	3708      	adds	r7, #8
 8006652:	2f0c      	cmp	r7, #12
 8006654:	d200      	bcs.n	8006658 <_malloc_r+0x64>
 8006656:	270c      	movs	r7, #12
 8006658:	0039      	movs	r1, r7
 800665a:	0030      	movs	r0, r6
 800665c:	f7ff ffa8 	bl	80065b0 <sbrk_aligned>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d034      	beq.n	80066ce <_malloc_r+0xda>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	19df      	adds	r7, r3, r7
 8006668:	6027      	str	r7, [r4, #0]
 800666a:	e013      	b.n	8006694 <_malloc_r+0xa0>
 800666c:	2b00      	cmp	r3, #0
 800666e:	dacb      	bge.n	8006608 <_malloc_r+0x14>
 8006670:	230c      	movs	r3, #12
 8006672:	2500      	movs	r5, #0
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	0028      	movs	r0, r5
 8006678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	1bd1      	subs	r1, r2, r7
 800667e:	d420      	bmi.n	80066c2 <_malloc_r+0xce>
 8006680:	290b      	cmp	r1, #11
 8006682:	d917      	bls.n	80066b4 <_malloc_r+0xc0>
 8006684:	19e2      	adds	r2, r4, r7
 8006686:	6027      	str	r7, [r4, #0]
 8006688:	42a3      	cmp	r3, r4
 800668a:	d111      	bne.n	80066b0 <_malloc_r+0xbc>
 800668c:	602a      	str	r2, [r5, #0]
 800668e:	6863      	ldr	r3, [r4, #4]
 8006690:	6011      	str	r1, [r2, #0]
 8006692:	6053      	str	r3, [r2, #4]
 8006694:	0030      	movs	r0, r6
 8006696:	0025      	movs	r5, r4
 8006698:	f000 f930 	bl	80068fc <__malloc_unlock>
 800669c:	2207      	movs	r2, #7
 800669e:	350b      	adds	r5, #11
 80066a0:	1d23      	adds	r3, r4, #4
 80066a2:	4395      	bics	r5, r2
 80066a4:	1aea      	subs	r2, r5, r3
 80066a6:	429d      	cmp	r5, r3
 80066a8:	d0e5      	beq.n	8006676 <_malloc_r+0x82>
 80066aa:	1b5b      	subs	r3, r3, r5
 80066ac:	50a3      	str	r3, [r4, r2]
 80066ae:	e7e2      	b.n	8006676 <_malloc_r+0x82>
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	e7ec      	b.n	800668e <_malloc_r+0x9a>
 80066b4:	6862      	ldr	r2, [r4, #4]
 80066b6:	42a3      	cmp	r3, r4
 80066b8:	d101      	bne.n	80066be <_malloc_r+0xca>
 80066ba:	602a      	str	r2, [r5, #0]
 80066bc:	e7ea      	b.n	8006694 <_malloc_r+0xa0>
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	e7e8      	b.n	8006694 <_malloc_r+0xa0>
 80066c2:	0023      	movs	r3, r4
 80066c4:	6864      	ldr	r4, [r4, #4]
 80066c6:	e7a7      	b.n	8006618 <_malloc_r+0x24>
 80066c8:	002c      	movs	r4, r5
 80066ca:	686d      	ldr	r5, [r5, #4]
 80066cc:	e7af      	b.n	800662e <_malloc_r+0x3a>
 80066ce:	230c      	movs	r3, #12
 80066d0:	0030      	movs	r0, r6
 80066d2:	6033      	str	r3, [r6, #0]
 80066d4:	f000 f912 	bl	80068fc <__malloc_unlock>
 80066d8:	e7cd      	b.n	8006676 <_malloc_r+0x82>
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	20000334 	.word	0x20000334

080066e0 <_sbrk_r>:
 80066e0:	2300      	movs	r3, #0
 80066e2:	b570      	push	{r4, r5, r6, lr}
 80066e4:	4d06      	ldr	r5, [pc, #24]	; (8006700 <_sbrk_r+0x20>)
 80066e6:	0004      	movs	r4, r0
 80066e8:	0008      	movs	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fa fce6 	bl	80010bc <_sbrk>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d103      	bne.n	80066fc <_sbrk_r+0x1c>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d000      	beq.n	80066fc <_sbrk_r+0x1c>
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	2000033c 	.word	0x2000033c

08006704 <_raise_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	0004      	movs	r4, r0
 8006708:	000d      	movs	r5, r1
 800670a:	291f      	cmp	r1, #31
 800670c:	d904      	bls.n	8006718 <_raise_r+0x14>
 800670e:	2316      	movs	r3, #22
 8006710:	6003      	str	r3, [r0, #0]
 8006712:	2001      	movs	r0, #1
 8006714:	4240      	negs	r0, r0
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <_raise_r+0x24>
 800671e:	008a      	lsls	r2, r1, #2
 8006720:	189b      	adds	r3, r3, r2
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	2a00      	cmp	r2, #0
 8006726:	d108      	bne.n	800673a <_raise_r+0x36>
 8006728:	0020      	movs	r0, r4
 800672a:	f000 f831 	bl	8006790 <_getpid_r>
 800672e:	002a      	movs	r2, r5
 8006730:	0001      	movs	r1, r0
 8006732:	0020      	movs	r0, r4
 8006734:	f000 f81a 	bl	800676c <_kill_r>
 8006738:	e7ed      	b.n	8006716 <_raise_r+0x12>
 800673a:	2000      	movs	r0, #0
 800673c:	2a01      	cmp	r2, #1
 800673e:	d0ea      	beq.n	8006716 <_raise_r+0x12>
 8006740:	1c51      	adds	r1, r2, #1
 8006742:	d103      	bne.n	800674c <_raise_r+0x48>
 8006744:	2316      	movs	r3, #22
 8006746:	3001      	adds	r0, #1
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	e7e4      	b.n	8006716 <_raise_r+0x12>
 800674c:	2400      	movs	r4, #0
 800674e:	0028      	movs	r0, r5
 8006750:	601c      	str	r4, [r3, #0]
 8006752:	4790      	blx	r2
 8006754:	0020      	movs	r0, r4
 8006756:	e7de      	b.n	8006716 <_raise_r+0x12>

08006758 <raise>:
 8006758:	b510      	push	{r4, lr}
 800675a:	4b03      	ldr	r3, [pc, #12]	; (8006768 <raise+0x10>)
 800675c:	0001      	movs	r1, r0
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	f7ff ffd0 	bl	8006704 <_raise_r>
 8006764:	bd10      	pop	{r4, pc}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	20000094 	.word	0x20000094

0800676c <_kill_r>:
 800676c:	2300      	movs	r3, #0
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	4d06      	ldr	r5, [pc, #24]	; (800678c <_kill_r+0x20>)
 8006772:	0004      	movs	r4, r0
 8006774:	0008      	movs	r0, r1
 8006776:	0011      	movs	r1, r2
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	f7fa fc1d 	bl	8000fb8 <_kill>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d103      	bne.n	800678a <_kill_r+0x1e>
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d000      	beq.n	800678a <_kill_r+0x1e>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	2000033c 	.word	0x2000033c

08006790 <_getpid_r>:
 8006790:	b510      	push	{r4, lr}
 8006792:	f7fa fc0b 	bl	8000fac <_getpid>
 8006796:	bd10      	pop	{r4, pc}

08006798 <__sread>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	000c      	movs	r4, r1
 800679c:	250e      	movs	r5, #14
 800679e:	5f49      	ldrsh	r1, [r1, r5]
 80067a0:	f000 f8b4 	bl	800690c <_read_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	db03      	blt.n	80067b0 <__sread+0x18>
 80067a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80067aa:	181b      	adds	r3, r3, r0
 80067ac:	6563      	str	r3, [r4, #84]	; 0x54
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	4a02      	ldr	r2, [pc, #8]	; (80067bc <__sread+0x24>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	e7f9      	b.n	80067ae <__sread+0x16>
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	ffffefff 	.word	0xffffefff

080067c0 <__swrite>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	001f      	movs	r7, r3
 80067c4:	898b      	ldrh	r3, [r1, #12]
 80067c6:	0005      	movs	r5, r0
 80067c8:	000c      	movs	r4, r1
 80067ca:	0016      	movs	r6, r2
 80067cc:	05db      	lsls	r3, r3, #23
 80067ce:	d505      	bpl.n	80067dc <__swrite+0x1c>
 80067d0:	230e      	movs	r3, #14
 80067d2:	5ec9      	ldrsh	r1, [r1, r3]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2302      	movs	r3, #2
 80067d8:	f000 f874 	bl	80068c4 <_lseek_r>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	4a05      	ldr	r2, [pc, #20]	; (80067f4 <__swrite+0x34>)
 80067e0:	0028      	movs	r0, r5
 80067e2:	4013      	ands	r3, r2
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	0032      	movs	r2, r6
 80067e8:	230e      	movs	r3, #14
 80067ea:	5ee1      	ldrsh	r1, [r4, r3]
 80067ec:	003b      	movs	r3, r7
 80067ee:	f000 f81f 	bl	8006830 <_write_r>
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	ffffefff 	.word	0xffffefff

080067f8 <__sseek>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	000c      	movs	r4, r1
 80067fc:	250e      	movs	r5, #14
 80067fe:	5f49      	ldrsh	r1, [r1, r5]
 8006800:	f000 f860 	bl	80068c4 <_lseek_r>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	1c42      	adds	r2, r0, #1
 8006808:	d103      	bne.n	8006812 <__sseek+0x1a>
 800680a:	4a05      	ldr	r2, [pc, #20]	; (8006820 <__sseek+0x28>)
 800680c:	4013      	ands	r3, r2
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	2280      	movs	r2, #128	; 0x80
 8006814:	0152      	lsls	r2, r2, #5
 8006816:	4313      	orrs	r3, r2
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	6560      	str	r0, [r4, #84]	; 0x54
 800681c:	e7f8      	b.n	8006810 <__sseek+0x18>
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	ffffefff 	.word	0xffffefff

08006824 <__sclose>:
 8006824:	b510      	push	{r4, lr}
 8006826:	230e      	movs	r3, #14
 8006828:	5ec9      	ldrsh	r1, [r1, r3]
 800682a:	f000 f815 	bl	8006858 <_close_r>
 800682e:	bd10      	pop	{r4, pc}

08006830 <_write_r>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	0004      	movs	r4, r0
 8006834:	0008      	movs	r0, r1
 8006836:	0011      	movs	r1, r2
 8006838:	001a      	movs	r2, r3
 800683a:	2300      	movs	r3, #0
 800683c:	4d05      	ldr	r5, [pc, #20]	; (8006854 <_write_r+0x24>)
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fa fbf3 	bl	800102a <_write>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d103      	bne.n	8006850 <_write_r+0x20>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d000      	beq.n	8006850 <_write_r+0x20>
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	2000033c 	.word	0x2000033c

08006858 <_close_r>:
 8006858:	2300      	movs	r3, #0
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	4d06      	ldr	r5, [pc, #24]	; (8006878 <_close_r+0x20>)
 800685e:	0004      	movs	r4, r0
 8006860:	0008      	movs	r0, r1
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	f7fa fbfd 	bl	8001062 <_close>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d103      	bne.n	8006874 <_close_r+0x1c>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d000      	beq.n	8006874 <_close_r+0x1c>
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	2000033c 	.word	0x2000033c

0800687c <_fstat_r>:
 800687c:	2300      	movs	r3, #0
 800687e:	b570      	push	{r4, r5, r6, lr}
 8006880:	4d06      	ldr	r5, [pc, #24]	; (800689c <_fstat_r+0x20>)
 8006882:	0004      	movs	r4, r0
 8006884:	0008      	movs	r0, r1
 8006886:	0011      	movs	r1, r2
 8006888:	602b      	str	r3, [r5, #0]
 800688a:	f7fa fbf4 	bl	8001076 <_fstat>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	d103      	bne.n	800689a <_fstat_r+0x1e>
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d000      	beq.n	800689a <_fstat_r+0x1e>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	2000033c 	.word	0x2000033c

080068a0 <_isatty_r>:
 80068a0:	2300      	movs	r3, #0
 80068a2:	b570      	push	{r4, r5, r6, lr}
 80068a4:	4d06      	ldr	r5, [pc, #24]	; (80068c0 <_isatty_r+0x20>)
 80068a6:	0004      	movs	r4, r0
 80068a8:	0008      	movs	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fa fbf1 	bl	8001092 <_isatty>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d103      	bne.n	80068bc <_isatty_r+0x1c>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <_isatty_r+0x1c>
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	2000033c 	.word	0x2000033c

080068c4 <_lseek_r>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	0004      	movs	r4, r0
 80068c8:	0008      	movs	r0, r1
 80068ca:	0011      	movs	r1, r2
 80068cc:	001a      	movs	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	4d05      	ldr	r5, [pc, #20]	; (80068e8 <_lseek_r+0x24>)
 80068d2:	602b      	str	r3, [r5, #0]
 80068d4:	f7fa fbe6 	bl	80010a4 <_lseek>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d103      	bne.n	80068e4 <_lseek_r+0x20>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d000      	beq.n	80068e4 <_lseek_r+0x20>
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	2000033c 	.word	0x2000033c

080068ec <__malloc_lock>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4802      	ldr	r0, [pc, #8]	; (80068f8 <__malloc_lock+0xc>)
 80068f0:	f7ff fd99 	bl	8006426 <__retarget_lock_acquire_recursive>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	20000330 	.word	0x20000330

080068fc <__malloc_unlock>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	4802      	ldr	r0, [pc, #8]	; (8006908 <__malloc_unlock+0xc>)
 8006900:	f7ff fd92 	bl	8006428 <__retarget_lock_release_recursive>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	20000330 	.word	0x20000330

0800690c <_read_r>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	0004      	movs	r4, r0
 8006910:	0008      	movs	r0, r1
 8006912:	0011      	movs	r1, r2
 8006914:	001a      	movs	r2, r3
 8006916:	2300      	movs	r3, #0
 8006918:	4d05      	ldr	r5, [pc, #20]	; (8006930 <_read_r+0x24>)
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fa fb68 	bl	8000ff0 <_read>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d103      	bne.n	800692c <_read_r+0x20>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d000      	beq.n	800692c <_read_r+0x20>
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	2000033c 	.word	0x2000033c

08006934 <_init>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr

08006940 <_fini>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr
